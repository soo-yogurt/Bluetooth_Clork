
Bluetooth_Clork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08009a54  08009a54  00019a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c48  08009c48  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  08009c48  08009c48  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c50  08009c50  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c50  08009c50  00019c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  08009c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c4  2**0
                  CONTENTS
 10 .bss          00000308  200002c4  200002c4  000202c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005cc  200005cc  000202c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018cb5  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003851  00000000  00000000  00038fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0003c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001430  00000000  00000000  0003ddb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029115  00000000  00000000  0003f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d069  00000000  00000000  000682f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f18ab  00000000  00000000  0008535e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00176c09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006430  00000000  00000000  00176c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009a3c 	.word	0x08009a3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002c8 	.word	0x200002c8
 80001ec:	08009a3c 	.word	0x08009a3c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f002 fd1b 	bl	8003040 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f002 f89e 	bl	8002750 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000614:	2303      	movs	r3, #3
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f002 fe61 	bl	80032ec <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f002 f88e 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200002e0 	.word	0x200002e0
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f003 fcf1 	bl	800409c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800075e:	f003 fe61 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000768:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0xdc>)
 800077a:	f003 fc8f 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800077e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000798:	f003 fc80 	bl	800409c <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40020800 	.word	0x40020800

080007b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_I2C1_Init+0x78>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <MX_I2C1_Init+0x7c>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C1_Init+0x78>)
 80007bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80007c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_I2C1_Init+0x78>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C1_Init+0x78>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_I2C1_Init+0x78>)
 80007d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C1_Init+0x78>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x78>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x78>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x78>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_I2C1_Init+0x78>)
 80007f0:	f003 fe4a 	bl	8004488 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80007fa:	f001 ffa9 	bl	8002750 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C1_Init+0x78>)
 8000802:	f004 fbba 	bl	8004f7a <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800080c:	f001 ffa0 	bl	8002750 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2C1_Init+0x78>)
 8000814:	f004 fbed 	bl	8004ff2 <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800081e:	f001 ff97 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000328 	.word	0x20000328
 800082c:	40005400 	.word	0x40005400

08000830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_I2C_MspInit+0x84>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d12c      	bne.n	80008ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800086e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000874:	2312      	movs	r3, #18
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000880:	2304      	movs	r3, #4
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <HAL_I2C_MspInit+0x8c>)
 800088c:	f003 fc06 	bl	800409c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40005400 	.word	0x40005400
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 커서위치를 기억하고 커서 이동에 규칙을 주기 위해 만들었다.
  int location = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
  // LCD 보드에 부착되어있는 스위치가 연속해서 동작하지 않게 하기 위해서 만들었다.
  uint8_t adc_point = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ce:	f002 fb21 	bl	8002f14 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d2:	f000 f93f 	bl	8000b54 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d6:	f7ff fefb 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 80008da:	f001 ff3f 	bl	800275c <MX_RTC_Init>
  MX_USART3_UART_Init();
 80008de:	f002 fa49 	bl	8002d74 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80008e2:	f002 f95b 	bl	8002b9c <MX_TIM3_Init>
  MX_ADC1_Init();
 80008e6:	f7ff fe5d 	bl	80005a4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80008ea:	f002 fa19 	bl	8002d20 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008ee:	f7ff ff5f 	bl	80007b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80008f2:	f002 f8dd 	bl	8002ab0 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008f6:	f000 f99f 	bl	8000c38 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f002 fb0b 	bl	8002f14 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f929 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f7ff fee5 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000906:	f001 ff29 	bl	800275c <MX_RTC_Init>
  MX_USART3_UART_Init();
 800090a:	f002 fa33 	bl	8002d74 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800090e:	f002 f945 	bl	8002b9c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000912:	f7ff fe47 	bl	80005a4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000916:	f002 fa03 	bl	8002d20 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800091a:	f7ff ff49 	bl	80007b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 800091e:	f002 f8c7 	bl	8002ab0 <MX_TIM2_Init>
  /* Initialize interrupts */
  MX_NVIC_Init();
 8000922:	f000 f989 	bl	8000c38 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN Init */
  MF_Init_flash();
 8000926:	f000 f99b 	bl	8000c60 <MF_Init_flash>
  // LCD 사용을 위한 초기화
  init();
 800092a:	f000 ff8a 	bl	8001842 <init>
  HAL_TIM_Base_Init(&htim3);
 800092e:	487a      	ldr	r0, [pc, #488]	; (8000b18 <main+0x258>)
 8000930:	f005 fd04 	bl	800633c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000934:	4878      	ldr	r0, [pc, #480]	; (8000b18 <main+0x258>)
 8000936:	f005 fd51 	bl	80063dc <HAL_TIM_Base_Start_IT>
  /* USER CODE END Init */

  at.f = flashTime.alarmFormat;
 800093a:	4b78      	ldr	r3, [pc, #480]	; (8000b1c <main+0x25c>)
 800093c:	79da      	ldrb	r2, [r3, #7]
 800093e:	4b78      	ldr	r3, [pc, #480]	; (8000b20 <main+0x260>)
 8000940:	701a      	strb	r2, [r3, #0]
  at.h = flashTime.alarmHour;
 8000942:	4b76      	ldr	r3, [pc, #472]	; (8000b1c <main+0x25c>)
 8000944:	7a1a      	ldrb	r2, [r3, #8]
 8000946:	4b76      	ldr	r3, [pc, #472]	; (8000b20 <main+0x260>)
 8000948:	705a      	strb	r2, [r3, #1]
  at.m = flashTime.alarmMinutes;
 800094a:	4b74      	ldr	r3, [pc, #464]	; (8000b1c <main+0x25c>)
 800094c:	7a5a      	ldrb	r2, [r3, #9]
 800094e:	4b74      	ldr	r3, [pc, #464]	; (8000b20 <main+0x260>)
 8000950:	709a      	strb	r2, [r3, #2]
  at.s = flashTime.alarmSeconds;
 8000952:	4b72      	ldr	r3, [pc, #456]	; (8000b1c <main+0x25c>)
 8000954:	7a9a      	ldrb	r2, [r3, #10]
 8000956:	4b72      	ldr	r3, [pc, #456]	; (8000b20 <main+0x260>)
 8000958:	70da      	strb	r2, [r3, #3]


  sDate.Year = 22;
 800095a:	4b72      	ldr	r3, [pc, #456]	; (8000b24 <main+0x264>)
 800095c:	2216      	movs	r2, #22
 800095e:	70da      	strb	r2, [r3, #3]
  sDate.Month = 6;
 8000960:	4b70      	ldr	r3, [pc, #448]	; (8000b24 <main+0x264>)
 8000962:	2206      	movs	r2, #6
 8000964:	705a      	strb	r2, [r3, #1]
  sDate.Date = 20;
 8000966:	4b6f      	ldr	r3, [pc, #444]	; (8000b24 <main+0x264>)
 8000968:	2214      	movs	r2, #20
 800096a:	709a      	strb	r2, [r3, #2]
  sTime.TimeFormat = 0;
 800096c:	4b6e      	ldr	r3, [pc, #440]	; (8000b28 <main+0x268>)
 800096e:	2200      	movs	r2, #0
 8000970:	70da      	strb	r2, [r3, #3]
  sTime.Hours = 12;
 8000972:	4b6d      	ldr	r3, [pc, #436]	; (8000b28 <main+0x268>)
 8000974:	220c      	movs	r2, #12
 8000976:	701a      	strb	r2, [r3, #0]


  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000978:	2200      	movs	r2, #0
 800097a:	496b      	ldr	r1, [pc, #428]	; (8000b28 <main+0x268>)
 800097c:	486b      	ldr	r0, [pc, #428]	; (8000b2c <main+0x26c>)
 800097e:	f005 fa55 	bl	8005e2c <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000982:	2200      	movs	r2, #0
 8000984:	4967      	ldr	r1, [pc, #412]	; (8000b24 <main+0x264>)
 8000986:	4869      	ldr	r0, [pc, #420]	; (8000b2c <main+0x26c>)
 8000988:	f005 fb48 	bl	800601c <HAL_RTC_SetDate>
  memset(buf, 0, sizeof(buf));
 800098c:	2219      	movs	r2, #25
 800098e:	2100      	movs	r1, #0
 8000990:	4867      	ldr	r0, [pc, #412]	; (8000b30 <main+0x270>)
 8000992:	f007 fe21 	bl	80085d8 <memset>
  memset(rx_buf, 0, sizeof(rx_buf));
 8000996:	2214      	movs	r2, #20
 8000998:	2100      	movs	r1, #0
 800099a:	4866      	ldr	r0, [pc, #408]	; (8000b34 <main+0x274>)
 800099c:	f007 fe1c 	bl	80085d8 <memset>
  HAL_UART_Receive_IT(&huart3, &rx, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	4965      	ldr	r1, [pc, #404]	; (8000b38 <main+0x278>)
 80009a4:	4865      	ldr	r0, [pc, #404]	; (8000b3c <main+0x27c>)
 80009a6:	f006 fe54 	bl	8007652 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (lcd_display_number == 0) {
 80009aa:	4b65      	ldr	r3, [pc, #404]	; (8000b40 <main+0x280>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d13a      	bne.n	8000a28 <main+0x168>
		  // 커서 위치 초기화 ************* cursor *************************************
		  bufferState();
 80009b2:	f000 fb9b 	bl	80010ec <bufferState>
		  location = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
		  //********************* Display ******************************************
		  while (lcd_display_number == 0) {
 80009ba:	e030      	b.n	8000a1e <main+0x15e>
			  Display0_line1();
 80009bc:	f000 fa30 	bl	8000e20 <Display0_line1>
			  Dispaly0_line2();
 80009c0:	f000 fa4c 	bl	8000e5c <Dispaly0_line2>
			  Set_receive_datas();
 80009c4:	f000 fbae 	bl	8001124 <Set_receive_datas>
		  //************************************************************************
		  // 알람이 울리면 longClick으로 멜로디 종료 시킬 수 있다.
			  if (alarmMode == 0) {
 80009c8:	4b5e      	ldr	r3, [pc, #376]	; (8000b44 <main+0x284>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d126      	bne.n	8000a1e <main+0x15e>
				  if (at.f == sTime.TimeFormat) {
 80009d0:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <main+0x260>)
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	4b54      	ldr	r3, [pc, #336]	; (8000b28 <main+0x268>)
 80009d6:	78db      	ldrb	r3, [r3, #3]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d120      	bne.n	8000a1e <main+0x15e>
					  if (at.h == sTime.Hours && at.m == sTime.Minutes && at.s == sTime.Seconds) {
 80009dc:	4b50      	ldr	r3, [pc, #320]	; (8000b20 <main+0x260>)
 80009de:	785a      	ldrb	r2, [r3, #1]
 80009e0:	4b51      	ldr	r3, [pc, #324]	; (8000b28 <main+0x268>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d11a      	bne.n	8000a1e <main+0x15e>
 80009e8:	4b4d      	ldr	r3, [pc, #308]	; (8000b20 <main+0x260>)
 80009ea:	789a      	ldrb	r2, [r3, #2]
 80009ec:	4b4e      	ldr	r3, [pc, #312]	; (8000b28 <main+0x268>)
 80009ee:	785b      	ldrb	r3, [r3, #1]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d114      	bne.n	8000a1e <main+0x15e>
 80009f4:	4b4a      	ldr	r3, [pc, #296]	; (8000b20 <main+0x260>)
 80009f6:	78da      	ldrb	r2, [r3, #3]
 80009f8:	4b4b      	ldr	r3, [pc, #300]	; (8000b28 <main+0x268>)
 80009fa:	789b      	ldrb	r3, [r3, #2]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d10e      	bne.n	8000a1e <main+0x15e>
						  alarmMode = 1;
 8000a00:	4b50      	ldr	r3, [pc, #320]	; (8000b44 <main+0x284>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
						  while (longClick == 0) {
 8000a06:	e001      	b.n	8000a0c <main+0x14c>
							  PlayToAlarm();
 8000a08:	f001 fe0e 	bl	8002628 <PlayToAlarm>
						  while (longClick == 0) {
 8000a0c:	4b4e      	ldr	r3, [pc, #312]	; (8000b48 <main+0x288>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0f9      	beq.n	8000a08 <main+0x148>
						  }
						  longClick = 0;
 8000a14:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <main+0x288>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
		    			  Display0_line1();
 8000a1a:	f000 fa01 	bl	8000e20 <Display0_line1>
		  while (lcd_display_number == 0) {
 8000a1e:	4b48      	ldr	r3, [pc, #288]	; (8000b40 <main+0x280>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0ca      	beq.n	80009bc <main+0xfc>
 8000a26:	e7c0      	b.n	80009aa <main+0xea>
				  }
			  }
		    //**********************************************************************
		  }
	  } //set Time
	  else if (lcd_display_number == 1) {
 8000a28:	4b45      	ldr	r3, [pc, #276]	; (8000b40 <main+0x280>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d12a      	bne.n	8000a86 <main+0x1c6>
		  //********************* Display ******************************************
		  Display1_line1();
 8000a30:	f000 fa54 	bl	8000edc <Display1_line1>
		  Display1_line2();
 8000a34:	f000 fa70 	bl	8000f18 <Display1_line2>
		  //********************** cursor ******************************************
		  bufferState();
 8000a38:	f000 fb58 	bl	80010ec <bufferState>
		  location = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
		  //***********************st 초기?�� *****************************************
		  st.f = sTime.TimeFormat;
 8000a40:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <main+0x268>)
 8000a42:	78da      	ldrb	r2, [r3, #3]
 8000a44:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <main+0x28c>)
 8000a46:	701a      	strb	r2, [r3, #0]
		  st.h = sTime.Hours;
 8000a48:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <main+0x268>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b3f      	ldr	r3, [pc, #252]	; (8000b4c <main+0x28c>)
 8000a4e:	705a      	strb	r2, [r3, #1]
		  st.m = sTime.Minutes;
 8000a50:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <main+0x268>)
 8000a52:	785a      	ldrb	r2, [r3, #1]
 8000a54:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <main+0x28c>)
 8000a56:	709a      	strb	r2, [r3, #2]
		  st.s = sTime.Seconds;
 8000a58:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <main+0x268>)
 8000a5a:	789a      	ldrb	r2, [r3, #2]
 8000a5c:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <main+0x28c>)
 8000a5e:	70da      	strb	r2, [r3, #3]
		  //************************************************************************
		  longClick = 0;
 8000a60:	4b39      	ldr	r3, [pc, #228]	; (8000b48 <main+0x288>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
		  while (lcd_display_number == 1) {
 8000a66:	e009      	b.n	8000a7c <main+0x1bc>
			  AdcSwitch(&adc_point, &location);
 8000a68:	1d3a      	adds	r2, r7, #4
 8000a6a:	1cfb      	adds	r3, r7, #3
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f9e0 	bl	8001e34 <AdcSwitch>
			  SetClock();
 8000a74:	f000 ff2a 	bl	80018cc <SetClock>
			  Set_receive_datas();
 8000a78:	f000 fb54 	bl	8001124 <Set_receive_datas>
		  while (lcd_display_number == 1) {
 8000a7c:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <main+0x280>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d0f1      	beq.n	8000a68 <main+0x1a8>
 8000a84:	e791      	b.n	80009aa <main+0xea>
		  }
		 //*************************************************************************
		} //alarm
		else if (lcd_display_number == 2) {
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <main+0x280>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d128      	bne.n	8000ae0 <main+0x220>
			//********************* Display ****************************************
			Display2_line1();
 8000a8e:	f000 fa71 	bl	8000f74 <Display2_line1>
			Display2_line2();
 8000a92:	f000 fa8d 	bl	8000fb0 <Display2_line2>
			//********************** cursor ****************************************
			bufferState();
 8000a96:	f000 fb29 	bl	80010ec <bufferState>
			location = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
			//***********************st 초기?�� ***************************************
			st.f = at.f;
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <main+0x260>)
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <main+0x28c>)
 8000aa4:	701a      	strb	r2, [r3, #0]
			st.h = at.h;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <main+0x260>)
 8000aa8:	785a      	ldrb	r2, [r3, #1]
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <main+0x28c>)
 8000aac:	705a      	strb	r2, [r3, #1]
			st.m = at.m;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <main+0x260>)
 8000ab0:	789a      	ldrb	r2, [r3, #2]
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <main+0x28c>)
 8000ab4:	709a      	strb	r2, [r3, #2]
			st.s = at.s;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <main+0x260>)
 8000ab8:	78da      	ldrb	r2, [r3, #3]
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <main+0x28c>)
 8000abc:	70da      	strb	r2, [r3, #3]
			//**********************************************************************
			longClick = 0;
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <main+0x288>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
			while (lcd_display_number == 2) {
 8000ac4:	e007      	b.n	8000ad6 <main+0x216>
				AdcSwitch(&adc_point, &location);
 8000ac6:	1d3a      	adds	r2, r7, #4
 8000ac8:	1cfb      	adds	r3, r7, #3
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 f9b1 	bl	8001e34 <AdcSwitch>
				SaveAlarm();
 8000ad2:	f000 febf 	bl	8001854 <SaveAlarm>
			while (lcd_display_number == 2) {
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <main+0x280>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d0f3      	beq.n	8000ac6 <main+0x206>
 8000ade:	e764      	b.n	80009aa <main+0xea>
			}
		}
		else if (lcd_display_number == 3) {
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <main+0x280>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d10e      	bne.n	8000b06 <main+0x246>
			//********************* Display *****************************************
			Display3_line1();
 8000ae8:	f000 fa9a 	bl	8001020 <Display3_line1>
			while(lcd_display_number == 3){
 8000aec:	e006      	b.n	8000afc <main+0x23c>
				Display3_line2(&melody_number);
 8000aee:	4818      	ldr	r0, [pc, #96]	; (8000b50 <main+0x290>)
 8000af0:	f000 fab0 	bl	8001054 <Display3_line2>
				SaveMelody();
 8000af4:	f000 fed6 	bl	80018a4 <SaveMelody>
				Set_receive_datas();
 8000af8:	f000 fb14 	bl	8001124 <Set_receive_datas>
			while(lcd_display_number == 3){
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <main+0x280>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d0f4      	beq.n	8000aee <main+0x22e>
 8000b04:	e751      	b.n	80009aa <main+0xea>
			}
		}
		else if (lcd_display_number > 3)
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <main+0x280>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	f67f af4d 	bls.w	80009aa <main+0xea>
			lcd_display_number = 0;
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <main+0x280>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
	  if (lcd_display_number == 0) {
 8000b16:	e748      	b.n	80009aa <main+0xea>
 8000b18:	200004c8 	.word	0x200004c8
 8000b1c:	2000037c 	.word	0x2000037c
 8000b20:	20000430 	.word	0x20000430
 8000b24:	200003ec 	.word	0x200003ec
 8000b28:	200003d8 	.word	0x200003d8
 8000b2c:	2000045c 	.word	0x2000045c
 8000b30:	200003f0 	.word	0x200003f0
 8000b34:	20000388 	.word	0x20000388
 8000b38:	20000387 	.word	0x20000387
 8000b3c:	20000554 	.word	0x20000554
 8000b40:	200003d4 	.word	0x200003d4
 8000b44:	20000000 	.word	0x20000000
 8000b48:	200003cc 	.word	0x200003cc
 8000b4c:	2000042c 	.word	0x2000042c
 8000b50:	20000434 	.word	0x20000434

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	; 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f007 fd38 	bl	80085d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <SystemClock_Config+0xdc>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <SystemClock_Config+0xdc>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <SystemClock_Config+0xdc>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <SystemClock_Config+0xe0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a25      	ldr	r2, [pc, #148]	; (8000c34 <SystemClock_Config+0xe0>)
 8000b9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <SystemClock_Config+0xe0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000bcc:	23b4      	movs	r3, #180	; 0xb4
 8000bce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 fa97 	bl	8005110 <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000be8:	f001 fdb2 	bl	8002750 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bec:	f004 fa40 	bl	8005070 <HAL_PWREx_EnableOverDrive>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bf6:	f001 fdab 	bl	8002750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	2105      	movs	r1, #5
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 fcf1 	bl	8005600 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c24:	f001 fd94 	bl	8002750 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3750      	adds	r7, #80	; 0x50
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40007000 	.word	0x40007000

08000c38 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2027      	movs	r0, #39	; 0x27
 8000c42:	f002 fe5c 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c46:	2027      	movs	r0, #39	; 0x27
 8000c48:	f002 fe75 	bl	8003936 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2028      	movs	r0, #40	; 0x28
 8000c52:	f002 fe54 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c56:	2028      	movs	r0, #40	; 0x28
 8000c58:	f002 fe6d 	bl	8003936 <HAL_NVIC_EnableIRQ>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <MF_Init_flash>:

/* USER CODE BEGIN 4 */
void MF_Init_flash()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000c64:	f002 ff68 	bl	8003b38 <HAL_FLASH_Unlock>

	if (*((uint32_t*) 0x08104000) == DATA_32) {
 8000c68:	4b5e      	ldr	r3, [pc, #376]	; (8000de4 <MF_Init_flash+0x184>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f241 0211 	movw	r2, #4113	; 0x1011
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d136      	bne.n	8000ce2 <MF_Init_flash+0x82>

		FirstSector = GetSector(FLASH_USER_START_ADDR);
 8000c74:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8000c78:	f001 fb9e 	bl	80023b8 <GetSector>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4a5a      	ldr	r2, [pc, #360]	; (8000de8 <MF_Init_flash+0x188>)
 8000c80:	6013      	str	r3, [r2, #0]
		NbOfSectors = 1;
 8000c82:	4b5a      	ldr	r3, [pc, #360]	; (8000dec <MF_Init_flash+0x18c>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000c88:	4b59      	ldr	r3, [pc, #356]	; (8000df0 <MF_Init_flash+0x190>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000c8e:	4b58      	ldr	r3, [pc, #352]	; (8000df0 <MF_Init_flash+0x190>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	611a      	str	r2, [r3, #16]
		EraseInitStruct.Sector = FirstSector;
 8000c94:	4b54      	ldr	r3, [pc, #336]	; (8000de8 <MF_Init_flash+0x188>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a55      	ldr	r2, [pc, #340]	; (8000df0 <MF_Init_flash+0x190>)
 8000c9a:	6093      	str	r3, [r2, #8]
		EraseInitStruct.NbSectors = NbOfSectors;
 8000c9c:	4b53      	ldr	r3, [pc, #332]	; (8000dec <MF_Init_flash+0x18c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a53      	ldr	r2, [pc, #332]	; (8000df0 <MF_Init_flash+0x190>)
 8000ca2:	60d3      	str	r3, [r2, #12]

		flashTime.alarmFormat = *((uint32_t*) 0x08100014);
 8000ca4:	4b53      	ldr	r3, [pc, #332]	; (8000df4 <MF_Init_flash+0x194>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b53      	ldr	r3, [pc, #332]	; (8000df8 <MF_Init_flash+0x198>)
 8000cac:	71da      	strb	r2, [r3, #7]
		flashTime.alarmHour = *((uint32_t*) 0x08100018);
 8000cae:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <MF_Init_flash+0x19c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b50      	ldr	r3, [pc, #320]	; (8000df8 <MF_Init_flash+0x198>)
 8000cb6:	721a      	strb	r2, [r3, #8]
		flashTime.alarmMinutes = *((uint32_t*) 0x0810001C);
 8000cb8:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <MF_Init_flash+0x1a0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b4e      	ldr	r3, [pc, #312]	; (8000df8 <MF_Init_flash+0x198>)
 8000cc0:	725a      	strb	r2, [r3, #9]
		flashTime.alarmSeconds = *((uint32_t*) 0x08100020);
 8000cc2:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <MF_Init_flash+0x1a4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b4b      	ldr	r3, [pc, #300]	; (8000df8 <MF_Init_flash+0x198>)
 8000cca:	729a      	strb	r2, [r3, #10]
		alarmMode = *((uint32_t*) 0x08100024);
 8000ccc:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <MF_Init_flash+0x1a8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b4e      	ldr	r3, [pc, #312]	; (8000e0c <MF_Init_flash+0x1ac>)
 8000cd4:	601a      	str	r2, [r3, #0]
		melody_number = *((uint32_t*) 0x08100028);
 8000cd6:	4b4e      	ldr	r3, [pc, #312]	; (8000e10 <MF_Init_flash+0x1b0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b4d      	ldr	r3, [pc, #308]	; (8000e14 <MF_Init_flash+0x1b4>)
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e07c      	b.n	8000ddc <MF_Init_flash+0x17c>

	} else {

		FirstSector = GetSector(FLASH_USER_START_ADDR);
 8000ce2:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8000ce6:	f001 fb67 	bl	80023b8 <GetSector>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a3e      	ldr	r2, [pc, #248]	; (8000de8 <MF_Init_flash+0x188>)
 8000cee:	6013      	str	r3, [r2, #0]
		// flash 메모리의 key 값은 데이터와 다른 섹터에 저장되어있다. 따라서 2섹터를 사용한다.
		NbOfSectors = 2;
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <MF_Init_flash+0x18c>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	601a      	str	r2, [r3, #0]
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <MF_Init_flash+0x190>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <MF_Init_flash+0x190>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	611a      	str	r2, [r3, #16]
		EraseInitStruct.Sector = FirstSector;
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <MF_Init_flash+0x188>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a3a      	ldr	r2, [pc, #232]	; (8000df0 <MF_Init_flash+0x190>)
 8000d08:	6093      	str	r3, [r2, #8]
		EraseInitStruct.NbSectors = NbOfSectors;
 8000d0a:	4b38      	ldr	r3, [pc, #224]	; (8000dec <MF_Init_flash+0x18c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a38      	ldr	r2, [pc, #224]	; (8000df0 <MF_Init_flash+0x190>)
 8000d10:	60d3      	str	r3, [r2, #12]

		if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 8000d12:	4941      	ldr	r1, [pc, #260]	; (8000e18 <MF_Init_flash+0x1b8>)
 8000d14:	4836      	ldr	r0, [pc, #216]	; (8000df0 <MF_Init_flash+0x190>)
 8000d16:	f003 f881 	bl	8003e1c <HAL_FLASHEx_Erase>

		}

		NbOfSectors = 1;
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <MF_Init_flash+0x18c>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
		EraseInitStruct.NbSectors = NbOfSectors;
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <MF_Init_flash+0x18c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a32      	ldr	r2, [pc, #200]	; (8000df0 <MF_Init_flash+0x190>)
 8000d26:	60d3      	str	r3, [r2, #12]

		Address = ADDR_FLASH_SECTOR_12;
 8000d28:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <MF_Init_flash+0x1bc>)
 8000d2a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8000d2e:	601a      	str	r2, [r3, #0]

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08104000),
 8000d30:	f241 0211 	movw	r2, #4113	; 0x1011
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	492a      	ldr	r1, [pc, #168]	; (8000de4 <MF_Init_flash+0x184>)
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f002 fea8 	bl	8003a90 <HAL_FLASH_Program>
				((uint32_t) DATA_32));

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100014), 0);
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	492a      	ldr	r1, [pc, #168]	; (8000df4 <MF_Init_flash+0x194>)
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f002 fea0 	bl	8003a90 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100018), 12);
 8000d50:	f04f 020c 	mov.w	r2, #12
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	4928      	ldr	r1, [pc, #160]	; (8000dfc <MF_Init_flash+0x19c>)
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f002 fe98 	bl	8003a90 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x0810001C), 0);
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	4925      	ldr	r1, [pc, #148]	; (8000e00 <MF_Init_flash+0x1a0>)
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f002 fe90 	bl	8003a90 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100020), 0);
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	4922      	ldr	r1, [pc, #136]	; (8000e04 <MF_Init_flash+0x1a4>)
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f002 fe88 	bl	8003a90 <HAL_FLASH_Program>

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100024), 1); // alarmMode off
 8000d80:	f04f 0201 	mov.w	r2, #1
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	491f      	ldr	r1, [pc, #124]	; (8000e08 <MF_Init_flash+0x1a8>)
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f002 fe80 	bl	8003a90 <HAL_FLASH_Program>

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100028), 1);
 8000d90:	f04f 0201 	mov.w	r2, #1
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	491d      	ldr	r1, [pc, #116]	; (8000e10 <MF_Init_flash+0x1b0>)
 8000d9a:	2002      	movs	r0, #2
 8000d9c:	f002 fe78 	bl	8003a90 <HAL_FLASH_Program>

		flashTime.alarmFormat = *((uint32_t*) 0x08100014);
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MF_Init_flash+0x194>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MF_Init_flash+0x198>)
 8000da8:	71da      	strb	r2, [r3, #7]
		flashTime.alarmHour = *((uint32_t*) 0x08100018);
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MF_Init_flash+0x19c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MF_Init_flash+0x198>)
 8000db2:	721a      	strb	r2, [r3, #8]
		flashTime.alarmMinutes = *((uint32_t*) 0x0810001C);
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MF_Init_flash+0x1a0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MF_Init_flash+0x198>)
 8000dbc:	725a      	strb	r2, [r3, #9]
		flashTime.alarmSeconds = *((uint32_t*) 0x08100020);
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MF_Init_flash+0x1a4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MF_Init_flash+0x198>)
 8000dc6:	729a      	strb	r2, [r3, #10]
		alarmMode = *((uint32_t*) 0x08100024);
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MF_Init_flash+0x1a8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MF_Init_flash+0x1ac>)
 8000dd0:	601a      	str	r2, [r3, #0]
		melody_number = *((uint32_t*) 0x08100028);
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MF_Init_flash+0x1b0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MF_Init_flash+0x1b4>)
 8000dda:	701a      	strb	r2, [r3, #0]
	}

	HAL_FLASH_Lock();
 8000ddc:	f002 fece 	bl	8003b7c <HAL_FLASH_Lock>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	08104000 	.word	0x08104000
 8000de8:	2000044c 	.word	0x2000044c
 8000dec:	20000450 	.word	0x20000450
 8000df0:	20000438 	.word	0x20000438
 8000df4:	08100014 	.word	0x08100014
 8000df8:	2000037c 	.word	0x2000037c
 8000dfc:	08100018 	.word	0x08100018
 8000e00:	0810001c 	.word	0x0810001c
 8000e04:	08100020 	.word	0x08100020
 8000e08:	08100024 	.word	0x08100024
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	08100028 	.word	0x08100028
 8000e14:	20000434 	.word	0x20000434
 8000e18:	20000458 	.word	0x20000458
 8000e1c:	20000454 	.word	0x20000454

08000e20 <Display0_line1>:



void Display0_line1()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	sprintf(buf, " %s   LCD Clock  ", alarmOnOff[alarmMode]);
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <Display0_line1+0x2c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <Display0_line1+0x30>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4908      	ldr	r1, [pc, #32]	; (8000e54 <Display0_line1+0x34>)
 8000e32:	4809      	ldr	r0, [pc, #36]	; (8000e58 <Display0_line1+0x38>)
 8000e34:	f007 fc9a 	bl	800876c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	204e      	movs	r0, #78	; 0x4e
 8000e3c:	f000 fca6 	bl	800178c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 8000e40:	4905      	ldr	r1, [pc, #20]	; (8000e58 <Display0_line1+0x38>)
 8000e42:	204e      	movs	r0, #78	; 0x4e
 8000e44:	f000 fce3 	bl	800180e <LCD_SendString>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000014 	.word	0x20000014
 8000e54:	08009a54 	.word	0x08009a54
 8000e58:	200003f0 	.word	0x200003f0

08000e5c <Dispaly0_line2>:
void Dispaly0_line2()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000e62:	2200      	movs	r2, #0
 8000e64:	4916      	ldr	r1, [pc, #88]	; (8000ec0 <Dispaly0_line2+0x64>)
 8000e66:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <Dispaly0_line2+0x68>)
 8000e68:	f005 f87a 	bl	8005f60 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4916      	ldr	r1, [pc, #88]	; (8000ec8 <Dispaly0_line2+0x6c>)
 8000e70:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <Dispaly0_line2+0x68>)
 8000e72:	f005 f957 	bl	8006124 <HAL_RTC_GetDate>
	//HAL_UART_Transmit(&huart3, (uint8_t*) buf, sizeof(buf), 2000);
	sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <Dispaly0_line2+0x64>)
 8000e78:	78db      	ldrb	r3, [r3, #3]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <Dispaly0_line2+0x70>)
 8000e84:	441a      	add	r2, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <Dispaly0_line2+0x64>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000e8a:	4618      	mov	r0, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <Dispaly0_line2+0x64>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
	sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000e90:	4619      	mov	r1, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <Dispaly0_line2+0x64>)
 8000e94:	789b      	ldrb	r3, [r3, #2]
	sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	9100      	str	r1, [sp, #0]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <Dispaly0_line2+0x74>)
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <Dispaly0_line2+0x78>)
 8000ea0:	f007 fc64 	bl	800876c <siprintf>
	printf("\r\n");
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <Dispaly0_line2+0x7c>)
 8000ea6:	f007 fc25 	bl	80086f4 <puts>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000eaa:	21c0      	movs	r1, #192	; 0xc0
 8000eac:	204e      	movs	r0, #78	; 0x4e
 8000eae:	f000 fc6d 	bl	800178c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <Dispaly0_line2+0x78>)
 8000eb4:	204e      	movs	r0, #78	; 0x4e
 8000eb6:	f000 fcaa 	bl	800180e <LCD_SendString>
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200003d8 	.word	0x200003d8
 8000ec4:	2000045c 	.word	0x2000045c
 8000ec8:	200003ec 	.word	0x200003ec
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	08009a68 	.word	0x08009a68
 8000ed4:	200003f0 	.word	0x200003f0
 8000ed8:	08009a80 	.word	0x08009a80

08000edc <Display1_line1>:

void Display1_line1()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	sprintf(buf, " %s   Set Time   ", alarmOnOff[alarmMode]);
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <Display1_line1+0x2c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <Display1_line1+0x30>)
 8000ee8:	4413      	add	r3, r2
 8000eea:	461a      	mov	r2, r3
 8000eec:	4908      	ldr	r1, [pc, #32]	; (8000f10 <Display1_line1+0x34>)
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <Display1_line1+0x38>)
 8000ef0:	f007 fc3c 	bl	800876c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	204e      	movs	r0, #78	; 0x4e
 8000ef8:	f000 fc48 	bl	800178c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 8000efc:	4905      	ldr	r1, [pc, #20]	; (8000f14 <Display1_line1+0x38>)
 8000efe:	204e      	movs	r0, #78	; 0x4e
 8000f00:	f000 fc85 	bl	800180e <LCD_SendString>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000014 	.word	0x20000014
 8000f10:	08009a84 	.word	0x08009a84
 8000f14:	200003f0 	.word	0x200003f0

08000f18 <Display1_line2>:
void Display1_line2()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af02      	add	r7, sp, #8
	sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <Display1_line2+0x4c>)
 8000f20:	78db      	ldrb	r3, [r3, #3]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <Display1_line2+0x50>)
 8000f2c:	441a      	add	r2, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <Display1_line2+0x4c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000f32:	4618      	mov	r0, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <Display1_line2+0x4c>)
 8000f36:	785b      	ldrb	r3, [r3, #1]
	sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000f38:	4619      	mov	r1, r3
			sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <Display1_line2+0x4c>)
 8000f3c:	789b      	ldrb	r3, [r3, #2]
	sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	9100      	str	r1, [sp, #0]
 8000f42:	4603      	mov	r3, r0
 8000f44:	4909      	ldr	r1, [pc, #36]	; (8000f6c <Display1_line2+0x54>)
 8000f46:	480a      	ldr	r0, [pc, #40]	; (8000f70 <Display1_line2+0x58>)
 8000f48:	f007 fc10 	bl	800876c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000f4c:	21c0      	movs	r1, #192	; 0xc0
 8000f4e:	204e      	movs	r0, #78	; 0x4e
 8000f50:	f000 fc1c 	bl	800178c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 8000f54:	4906      	ldr	r1, [pc, #24]	; (8000f70 <Display1_line2+0x58>)
 8000f56:	204e      	movs	r0, #78	; 0x4e
 8000f58:	f000 fc59 	bl	800180e <LCD_SendString>
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200003d8 	.word	0x200003d8
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	08009a68 	.word	0x08009a68
 8000f70:	200003f0 	.word	0x200003f0

08000f74 <Display2_line1>:
void Display2_line1()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	sprintf(buf, " %s   alarm      ", alarmOnOff[alarmMode]);
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <Display2_line1+0x2c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <Display2_line1+0x30>)
 8000f80:	4413      	add	r3, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <Display2_line1+0x34>)
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <Display2_line1+0x38>)
 8000f88:	f007 fbf0 	bl	800876c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	204e      	movs	r0, #78	; 0x4e
 8000f90:	f000 fbfc 	bl	800178c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 8000f94:	4905      	ldr	r1, [pc, #20]	; (8000fac <Display2_line1+0x38>)
 8000f96:	204e      	movs	r0, #78	; 0x4e
 8000f98:	f000 fc39 	bl	800180e <LCD_SendString>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000014 	.word	0x20000014
 8000fa8:	08009a98 	.word	0x08009a98
 8000fac:	200003f0 	.word	0x200003f0

08000fb0 <Display2_line2>:
void Display2_line2()
{
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af04      	add	r7, sp, #16
	sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[at.f], at.h, at.m, at.s,
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <Display2_line2+0x58>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <Display2_line2+0x5c>)
 8000fc4:	441a      	add	r2, r3
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <Display2_line2+0x58>)
 8000fc8:	785b      	ldrb	r3, [r3, #1]
 8000fca:	461d      	mov	r5, r3
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <Display2_line2+0x58>)
 8000fce:	789b      	ldrb	r3, [r3, #2]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <Display2_line2+0x58>)
 8000fd4:	78db      	ldrb	r3, [r3, #3]
 8000fd6:	461c      	mov	r4, r3
			alarmSet[alarmMode]);
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <Display2_line2+0x60>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <Display2_line2+0x64>)
 8000fe0:	440b      	add	r3, r1
	sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[at.f], at.h, at.m, at.s,
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	9401      	str	r4, [sp, #4]
 8000fe6:	9000      	str	r0, [sp, #0]
 8000fe8:	462b      	mov	r3, r5
 8000fea:	490b      	ldr	r1, [pc, #44]	; (8001018 <Display2_line2+0x68>)
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <Display2_line2+0x6c>)
 8000fee:	f007 fbbd 	bl	800876c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000ff2:	21c0      	movs	r1, #192	; 0xc0
 8000ff4:	204e      	movs	r0, #78	; 0x4e
 8000ff6:	f000 fbc9 	bl	800178c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <Display2_line2+0x6c>)
 8000ffc:	204e      	movs	r0, #78	; 0x4e
 8000ffe:	f000 fc06 	bl	800180e <LCD_SendString>
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bdb0      	pop	{r4, r5, r7, pc}
 8001008:	20000430 	.word	0x20000430
 800100c:	20000004 	.word	0x20000004
 8001010:	20000000 	.word	0x20000000
 8001014:	2000000c 	.word	0x2000000c
 8001018:	08009aac 	.word	0x08009aac
 800101c:	200003f0 	.word	0x200003f0

08001020 <Display3_line1>:

void Display3_line1()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	memset(buf, 0, sizeof(buf));
 8001024:	2219      	movs	r2, #25
 8001026:	2100      	movs	r1, #0
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <Display3_line1+0x2c>)
 800102a:	f007 fad5 	bl	80085d8 <memset>
	sprintf(buf, " select melody  ");
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <Display3_line1+0x30>)
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <Display3_line1+0x2c>)
 8001032:	f007 fb9b 	bl	800876c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	204e      	movs	r0, #78	; 0x4e
 800103a:	f000 fba7 	bl	800178c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 800103e:	4903      	ldr	r1, [pc, #12]	; (800104c <Display3_line1+0x2c>)
 8001040:	204e      	movs	r0, #78	; 0x4e
 8001042:	f000 fbe4 	bl	800180e <LCD_SendString>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200003f0 	.word	0x200003f0
 8001050:	08009ac4 	.word	0x08009ac4

08001054 <Display3_line2>:

void Display3_line2(uint8_t *num) // melodyNumber
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	memset(buf, 0, sizeof(buf));
 800105c:	2219      	movs	r2, #25
 800105e:	2100      	movs	r1, #0
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <Display3_line2+0x54>)
 8001062:	f007 fab9 	bl	80085d8 <memset>

	Display3_ADC_switch_select_melody_number(num);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f824 	bl	80010b4 <Display3_ADC_switch_select_melody_number>

	if(*num == 1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d104      	bne.n	800107e <Display3_line2+0x2a>
		sprintf(buf, "<-> 1.Bicycle    ");
 8001074:	490d      	ldr	r1, [pc, #52]	; (80010ac <Display3_line2+0x58>)
 8001076:	480c      	ldr	r0, [pc, #48]	; (80010a8 <Display3_line2+0x54>)
 8001078:	f007 fb78 	bl	800876c <siprintf>
 800107c:	e007      	b.n	800108e <Display3_line2+0x3a>
	else if(*num == 2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d103      	bne.n	800108e <Display3_line2+0x3a>
		sprintf(buf, "<-> 2.underworld ");
 8001086:	490a      	ldr	r1, [pc, #40]	; (80010b0 <Display3_line2+0x5c>)
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <Display3_line2+0x54>)
 800108a:	f007 fb6f 	bl	800876c <siprintf>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 800108e:	21c0      	movs	r1, #192	; 0xc0
 8001090:	204e      	movs	r0, #78	; 0x4e
 8001092:	f000 fb7b 	bl	800178c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 8001096:	4904      	ldr	r1, [pc, #16]	; (80010a8 <Display3_line2+0x54>)
 8001098:	204e      	movs	r0, #78	; 0x4e
 800109a:	f000 fbb8 	bl	800180e <LCD_SendString>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200003f0 	.word	0x200003f0
 80010ac:	08009ad8 	.word	0x08009ad8
 80010b0:	08009aec 	.word	0x08009aec

080010b4 <Display3_ADC_switch_select_melody_number>:

void Display3_ADC_switch_select_melody_number(uint8_t *num)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	if(ADC_flag == 3)
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <Display3_ADC_switch_select_melody_number+0x34>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d103      	bne.n	80010cc <Display3_ADC_switch_select_melody_number+0x18>
	{
		*num = 1;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
	}
	else if(ADC_flag == 4)
	{
		*num = 2;
	}
}
 80010ca:	e006      	b.n	80010da <Display3_ADC_switch_select_melody_number+0x26>
	else if(ADC_flag == 4)
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <Display3_ADC_switch_select_melody_number+0x34>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d102      	bne.n	80010da <Display3_ADC_switch_select_melody_number+0x26>
		*num = 2;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2202      	movs	r2, #2
 80010d8:	701a      	strb	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000428 	.word	0x20000428

080010ec <bufferState>:


void bufferState() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	if (lcd_display_number == 2 || lcd_display_number == 1) {
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <bufferState+0x34>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d003      	beq.n	8001100 <bufferState+0x14>
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <bufferState+0x34>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d108      	bne.n	8001112 <bufferState+0x26>
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001100:	21c0      	movs	r1, #192	; 0xc0
 8001102:	204e      	movs	r0, #78	; 0x4e
 8001104:	f000 fb42 	bl	800178c <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, 0b00001111);
 8001108:	210f      	movs	r1, #15
 800110a:	204e      	movs	r0, #78	; 0x4e
 800110c:	f000 fb3e 	bl	800178c <LCD_SendCommand>
 8001110:	e004      	b.n	800111c <bufferState+0x30>
	} else
		LCD_SendCommand(LCD_ADDR, 0b00001110);
 8001112:	210e      	movs	r1, #14
 8001114:	204e      	movs	r0, #78	; 0x4e
 8001116:	f000 fb39 	bl	800178c <LCD_SendCommand>
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200003d4 	.word	0x200003d4

08001124 <Set_receive_datas>:
// SET+T+A+00+00+00\n
// SET+A+P+00+00+00\n
// SET+M+0\n

void Set_receive_datas() {
 8001124:	b580      	push	{r7, lr}
 8001126:	b092      	sub	sp, #72	; 0x48
 8001128:	af00      	add	r7, sp, #0
	if (receive_data_type != 0) {
 800112a:	4b81      	ldr	r3, [pc, #516]	; (8001330 <Set_receive_datas+0x20c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 80f9 	beq.w	8001326 <Set_receive_datas+0x202>
		if (receive_data_type == 1) {
 8001134:	4b7e      	ldr	r3, [pc, #504]	; (8001330 <Set_receive_datas+0x20c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d16e      	bne.n	800121a <Set_receive_datas+0xf6>
			if (*(p + 6) == 'A') {
 800113c:	4b7d      	ldr	r3, [pc, #500]	; (8001334 <Set_receive_datas+0x210>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3306      	adds	r3, #6
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b41      	cmp	r3, #65	; 0x41
 8001146:	d106      	bne.n	8001156 <Set_receive_datas+0x32>
				int format = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
				sTime.TimeFormat = format;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b79      	ldr	r3, [pc, #484]	; (8001338 <Set_receive_datas+0x214>)
 8001152:	70da      	strb	r2, [r3, #3]
 8001154:	e00b      	b.n	800116e <Set_receive_datas+0x4a>
			} else if (*(p + 6) == 'P') {
 8001156:	4b77      	ldr	r3, [pc, #476]	; (8001334 <Set_receive_datas+0x210>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3306      	adds	r3, #6
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b50      	cmp	r3, #80	; 0x50
 8001160:	d105      	bne.n	800116e <Set_receive_datas+0x4a>
				int format = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	623b      	str	r3, [r7, #32]
				sTime.TimeFormat = format;
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b73      	ldr	r3, [pc, #460]	; (8001338 <Set_receive_datas+0x214>)
 800116c:	70da      	strb	r2, [r3, #3]
			}
			int hours_1 = *(p + 8) - '0';
 800116e:	4b71      	ldr	r3, [pc, #452]	; (8001334 <Set_receive_datas+0x210>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3308      	adds	r3, #8
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	3b30      	subs	r3, #48	; 0x30
 8001178:	61bb      	str	r3, [r7, #24]
			int hours_2 = *(p + 9) - '0';
 800117a:	4b6e      	ldr	r3, [pc, #440]	; (8001334 <Set_receive_datas+0x210>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3309      	adds	r3, #9
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	3b30      	subs	r3, #48	; 0x30
 8001184:	617b      	str	r3, [r7, #20]
			sTime.Hours = (hours_1 * 10) + hours_2;
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4413      	add	r3, r2
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b66      	ldr	r3, [pc, #408]	; (8001338 <Set_receive_datas+0x214>)
 800119e:	701a      	strb	r2, [r3, #0]

			int minutes_1 = *(p + 11) - '0';
 80011a0:	4b64      	ldr	r3, [pc, #400]	; (8001334 <Set_receive_datas+0x210>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	330b      	adds	r3, #11
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	3b30      	subs	r3, #48	; 0x30
 80011aa:	613b      	str	r3, [r7, #16]
			int minutes_2 = *(p + 12) - '0';
 80011ac:	4b61      	ldr	r3, [pc, #388]	; (8001334 <Set_receive_datas+0x210>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	330c      	adds	r3, #12
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	3b30      	subs	r3, #48	; 0x30
 80011b6:	60fb      	str	r3, [r7, #12]
			sTime.Minutes = (minutes_1 * 10) + minutes_2;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b5a      	ldr	r3, [pc, #360]	; (8001338 <Set_receive_datas+0x214>)
 80011d0:	705a      	strb	r2, [r3, #1]

			int seconds_1 = *(p + 14) - '0';
 80011d2:	4b58      	ldr	r3, [pc, #352]	; (8001334 <Set_receive_datas+0x210>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	330e      	adds	r3, #14
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	3b30      	subs	r3, #48	; 0x30
 80011dc:	60bb      	str	r3, [r7, #8]
			int seconds_2 = *(p + 15) - '0';
 80011de:	4b55      	ldr	r3, [pc, #340]	; (8001334 <Set_receive_datas+0x210>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	330f      	adds	r3, #15
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	3b30      	subs	r3, #48	; 0x30
 80011e8:	607b      	str	r3, [r7, #4]
			sTime.Seconds = (seconds_1 * 10) + seconds_2;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4413      	add	r3, r2
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <Set_receive_datas+0x214>)
 8001202:	709a      	strb	r2, [r3, #2]

			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001204:	2200      	movs	r2, #0
 8001206:	494c      	ldr	r1, [pc, #304]	; (8001338 <Set_receive_datas+0x214>)
 8001208:	484c      	ldr	r0, [pc, #304]	; (800133c <Set_receive_datas+0x218>)
 800120a:	f004 fe0f 	bl	8005e2c <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800120e:	2200      	movs	r2, #0
 8001210:	494b      	ldr	r1, [pc, #300]	; (8001340 <Set_receive_datas+0x21c>)
 8001212:	484a      	ldr	r0, [pc, #296]	; (800133c <Set_receive_datas+0x218>)
 8001214:	f004 ff02 	bl	800601c <HAL_RTC_SetDate>
 8001218:	e083      	b.n	8001322 <Set_receive_datas+0x1fe>

		} else if (receive_data_type == 2) {
 800121a:	4b45      	ldr	r3, [pc, #276]	; (8001330 <Set_receive_datas+0x20c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d169      	bne.n	80012f6 <Set_receive_datas+0x1d2>
			if (*(p + 6) == 'A') {
 8001222:	4b44      	ldr	r3, [pc, #272]	; (8001334 <Set_receive_datas+0x210>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3306      	adds	r3, #6
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b41      	cmp	r3, #65	; 0x41
 800122c:	d106      	bne.n	800123c <Set_receive_datas+0x118>
				int format = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	63fb      	str	r3, [r7, #60]	; 0x3c
				at.f = format;
 8001232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b43      	ldr	r3, [pc, #268]	; (8001344 <Set_receive_datas+0x220>)
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e00b      	b.n	8001254 <Set_receive_datas+0x130>
			} else if (*(p + 6) == 'P') {
 800123c:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <Set_receive_datas+0x210>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3306      	adds	r3, #6
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b50      	cmp	r3, #80	; 0x50
 8001246:	d105      	bne.n	8001254 <Set_receive_datas+0x130>
				int format = 1;
 8001248:	2301      	movs	r3, #1
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
				at.f = format;
 800124c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <Set_receive_datas+0x220>)
 8001252:	701a      	strb	r2, [r3, #0]
			}
			int hours_1 = *(p +8) - '0';
 8001254:	4b37      	ldr	r3, [pc, #220]	; (8001334 <Set_receive_datas+0x210>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3308      	adds	r3, #8
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	3b30      	subs	r3, #48	; 0x30
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
			int hours_2 = *(p +9) - '0';
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <Set_receive_datas+0x210>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3309      	adds	r3, #9
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b30      	subs	r3, #48	; 0x30
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
			at.h = (hours_1 * 10) + hours_2;
 800126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800126e:	b2db      	uxtb	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4413      	add	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <Set_receive_datas+0x220>)
 8001284:	705a      	strb	r2, [r3, #1]

			int minutes_1 = *(p + 11) - '0';
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <Set_receive_datas+0x210>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	330b      	adds	r3, #11
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3b30      	subs	r3, #48	; 0x30
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
			int minutes_2 = *(p + 12) - '0';
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <Set_receive_datas+0x210>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	330c      	adds	r3, #12
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3b30      	subs	r3, #48	; 0x30
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
			at.m = (minutes_1 * 10) + minutes_2;
 800129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <Set_receive_datas+0x220>)
 80012b6:	709a      	strb	r2, [r3, #2]

			int seconds_1 = *(p + 14) - '0';
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <Set_receive_datas+0x210>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	330e      	adds	r3, #14
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3b30      	subs	r3, #48	; 0x30
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
			int seconds_2 = *(p + 15) - '0';
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <Set_receive_datas+0x210>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	330f      	adds	r3, #15
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3b30      	subs	r3, #48	; 0x30
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
			at.s = (seconds_1 * 10) + seconds_2;
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4413      	add	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <Set_receive_datas+0x220>)
 80012e8:	70da      	strb	r2, [r3, #3]

			SetUpflash();
 80012ea:	f001 f9b1 	bl	8002650 <SetUpflash>

			alarmMode = 0;
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <Set_receive_datas+0x224>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e015      	b.n	8001322 <Set_receive_datas+0x1fe>

		} else if (receive_data_type == 3) {
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <Set_receive_datas+0x20c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d111      	bne.n	8001322 <Set_receive_datas+0x1fe>
			int melody = *(p + 6) - '0';
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <Set_receive_datas+0x210>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3306      	adds	r3, #6
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	3b30      	subs	r3, #48	; 0x30
 8001308:	647b      	str	r3, [r7, #68]	; 0x44
			if (melody == 1 || melody == 2){
 800130a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800130c:	2b01      	cmp	r3, #1
 800130e:	d002      	beq.n	8001316 <Set_receive_datas+0x1f2>
 8001310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001312:	2b02      	cmp	r3, #2
 8001314:	d105      	bne.n	8001322 <Set_receive_datas+0x1fe>
				melody_number = melody;
 8001316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <Set_receive_datas+0x228>)
 800131c:	701a      	strb	r2, [r3, #0]
				SetUpflash();
 800131e:	f001 f997 	bl	8002650 <SetUpflash>
			}
		}
		Ready_Receive_IT();
 8001322:	f000 f815 	bl	8001350 <Ready_Receive_IT>
	}
}
 8001326:	bf00      	nop
 8001328:	3748      	adds	r7, #72	; 0x48
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200003a0 	.word	0x200003a0
 8001334:	200003a4 	.word	0x200003a4
 8001338:	200003d8 	.word	0x200003d8
 800133c:	2000045c 	.word	0x2000045c
 8001340:	200003ec 	.word	0x200003ec
 8001344:	20000430 	.word	0x20000430
 8001348:	20000000 	.word	0x20000000
 800134c:	20000434 	.word	0x20000434

08001350 <Ready_Receive_IT>:

void Ready_Receive_IT()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	receive_data_type = 0;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <Ready_Receive_IT+0x28>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
	memset(rx_buf, 0, sizeof(rx_buf));
 800135a:	2214      	movs	r2, #20
 800135c:	2100      	movs	r1, #0
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <Ready_Receive_IT+0x2c>)
 8001360:	f007 f93a 	bl	80085d8 <memset>
	bufindex = 0;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <Ready_Receive_IT+0x30>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, &rx, 1);
 800136a:	2201      	movs	r2, #1
 800136c:	4905      	ldr	r1, [pc, #20]	; (8001384 <Ready_Receive_IT+0x34>)
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <Ready_Receive_IT+0x38>)
 8001370:	f006 f96f 	bl	8007652 <HAL_UART_Receive_IT>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200003a0 	.word	0x200003a0
 800137c:	20000388 	.word	0x20000388
 8001380:	2000039c 	.word	0x2000039c
 8001384:	20000387 	.word	0x20000387
 8001388:	20000554 	.word	0x20000554

0800138c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a25      	ldr	r2, [pc, #148]	; (8001430 <HAL_UART_RxCpltCallback+0xa4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d144      	bne.n	8001428 <HAL_UART_RxCpltCallback+0x9c>
		// SET+T+A+00+00+00\n
		// SET+A+P+00+00+00\n
		// SET+M+0\n
		if(rx == '\n')
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_UART_RxCpltCallback+0xa8>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b0a      	cmp	r3, #10
 80013a4:	d12e      	bne.n	8001404 <HAL_UART_RxCpltCallback+0x78>
		{
			p = strstr((char*)rx_buf, "SET");
 80013a6:	4924      	ldr	r1, [pc, #144]	; (8001438 <HAL_UART_RxCpltCallback+0xac>)
 80013a8:	4824      	ldr	r0, [pc, #144]	; (800143c <HAL_UART_RxCpltCallback+0xb0>)
 80013aa:	f007 f9ff 	bl	80087ac <strstr>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <HAL_UART_RxCpltCallback+0xb4>)
 80013b2:	6013      	str	r3, [r2, #0]
			if(p != 0)
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_UART_RxCpltCallback+0xb4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_UART_RxCpltCallback+0x72>
			{
				if (*(p + 4) == 'T')
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_UART_RxCpltCallback+0xb4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3304      	adds	r3, #4
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b54      	cmp	r3, #84	; 0x54
 80013c6:	d103      	bne.n	80013d0 <HAL_UART_RxCpltCallback+0x44>
				{
					receive_data_type = 1;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <HAL_UART_RxCpltCallback+0xb8>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
			rx_buf[bufindex++] = rx;
			HAL_UART_Receive_IT(&huart3, &rx, 1);
		}

	}
}
 80013ce:	e02b      	b.n	8001428 <HAL_UART_RxCpltCallback+0x9c>
				else if(*(p + 4) == 'A')
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_UART_RxCpltCallback+0xb4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3304      	adds	r3, #4
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b41      	cmp	r3, #65	; 0x41
 80013da:	d103      	bne.n	80013e4 <HAL_UART_RxCpltCallback+0x58>
					receive_data_type = 2;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_UART_RxCpltCallback+0xb8>)
 80013de:	2202      	movs	r2, #2
 80013e0:	701a      	strb	r2, [r3, #0]
}
 80013e2:	e021      	b.n	8001428 <HAL_UART_RxCpltCallback+0x9c>
				else if(*(p + 4) == 'M')
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_UART_RxCpltCallback+0xb4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3304      	adds	r3, #4
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b4d      	cmp	r3, #77	; 0x4d
 80013ee:	d103      	bne.n	80013f8 <HAL_UART_RxCpltCallback+0x6c>
					receive_data_type = 3;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_UART_RxCpltCallback+0xb8>)
 80013f2:	2203      	movs	r2, #3
 80013f4:	701a      	strb	r2, [r3, #0]
}
 80013f6:	e017      	b.n	8001428 <HAL_UART_RxCpltCallback+0x9c>
					Ready_Receive_IT();
 80013f8:	f7ff ffaa 	bl	8001350 <Ready_Receive_IT>
}
 80013fc:	e014      	b.n	8001428 <HAL_UART_RxCpltCallback+0x9c>
				Ready_Receive_IT();
 80013fe:	f7ff ffa7 	bl	8001350 <Ready_Receive_IT>
}
 8001402:	e011      	b.n	8001428 <HAL_UART_RxCpltCallback+0x9c>
		else if (bufindex < 19)
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_UART_RxCpltCallback+0xbc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b12      	cmp	r3, #18
 800140a:	dc0d      	bgt.n	8001428 <HAL_UART_RxCpltCallback+0x9c>
			rx_buf[bufindex++] = rx;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_UART_RxCpltCallback+0xbc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	490d      	ldr	r1, [pc, #52]	; (8001448 <HAL_UART_RxCpltCallback+0xbc>)
 8001414:	600a      	str	r2, [r1, #0]
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_UART_RxCpltCallback+0xa8>)
 8001418:	7811      	ldrb	r1, [r2, #0]
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_UART_RxCpltCallback+0xb0>)
 800141c:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Receive_IT(&huart3, &rx, 1);
 800141e:	2201      	movs	r2, #1
 8001420:	4904      	ldr	r1, [pc, #16]	; (8001434 <HAL_UART_RxCpltCallback+0xa8>)
 8001422:	480a      	ldr	r0, [pc, #40]	; (800144c <HAL_UART_RxCpltCallback+0xc0>)
 8001424:	f006 f915 	bl	8007652 <HAL_UART_Receive_IT>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40004800 	.word	0x40004800
 8001434:	20000387 	.word	0x20000387
 8001438:	08009b00 	.word	0x08009b00
 800143c:	20000388 	.word	0x20000388
 8001440:	200003a4 	.word	0x200003a4
 8001444:	200003a0 	.word	0x200003a0
 8001448:	2000039c 	.word	0x2000039c
 800144c:	20000554 	.word	0x20000554

08001450 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;

	if (GPIO_Pin == GPIO_PIN_13) {
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001460:	d156      	bne.n	8001510 <HAL_GPIO_EXTI_Callback+0xc0>
		current_time = HAL_GetTick();
 8001462:	f001 fdbd 	bl	8002fe0 <HAL_GetTick>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_GPIO_EXTI_Callback+0xc8>)
 800146c:	601a      	str	r2, [r3, #0]
		time_interval = current_time - last_time;
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	4a29      	ldr	r2, [pc, #164]	; (8001520 <HAL_GPIO_EXTI_Callback+0xd0>)
 800147a:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_GPIO_EXTI_Callback+0xc8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001482:	6013      	str	r3, [r2, #0]

		pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4826      	ldr	r0, [pc, #152]	; (8001524 <HAL_GPIO_EXTI_Callback+0xd4>)
 800148a:	f002 ffb3 	bl	80043f4 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	73fb      	strb	r3, [r7, #15]

		if (time_interval <= NOISE) {
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	dc07      	bgt.n	80014aa <HAL_GPIO_EXTI_Callback+0x5a>
			printf("Noise %d, %d\r\n", pin, time_interval);
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	4a20      	ldr	r2, [pc, #128]	; (8001520 <HAL_GPIO_EXTI_Callback+0xd0>)
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4821      	ldr	r0, [pc, #132]	; (8001528 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014a4:	f007 f8a0 	bl	80085e8 <iprintf>
 80014a8:	e00e      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x78>
		} else {

			click[1].time = click[0].time;
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1f      	ldr	r2, [pc, #124]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014b0:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014b4:	791a      	ldrb	r2, [r3, #4]
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014b8:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_GPIO_EXTI_Callback+0xd0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014c0:	6013      	str	r3, [r2, #0]
			click[0].level = pin;
 80014c2:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	7113      	strb	r3, [r2, #4]
		}
		if (click[0].level == GPIO_PIN_RESET && click[0].time >= LONG_CLICK_MIN) // long click
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014ca:	791b      	ldrb	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10b      	bne.n	80014e8 <HAL_GPIO_EXTI_Callback+0x98>
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80014d8:	db06      	blt.n	80014e8 <HAL_GPIO_EXTI_Callback+0x98>
		{
			printf("\r\nLong Key\r\n");
 80014da:	4815      	ldr	r0, [pc, #84]	; (8001530 <HAL_GPIO_EXTI_Callback+0xe0>)
 80014dc:	f007 f90a 	bl	80086f4 <puts>
			longClick = 1;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_GPIO_EXTI_Callback+0xe4>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
				&& click[1].level == GPIO_PIN_SET) {
			printf("\r\nSelect Key, %d\r\n", click[0].time);
			lcd_display_number++;
		}
	}
}
 80014e6:	e013      	b.n	8001510 <HAL_GPIO_EXTI_Callback+0xc0>
		} else if (click[0].level == GPIO_PIN_RESET
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014ea:	791b      	ldrb	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10f      	bne.n	8001510 <HAL_GPIO_EXTI_Callback+0xc0>
				&& click[1].level == GPIO_PIN_SET) {
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014f2:	7b1b      	ldrb	r3, [r3, #12]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10b      	bne.n	8001510 <HAL_GPIO_EXTI_Callback+0xc0>
			printf("\r\nSelect Key, %d\r\n", click[0].time);
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_GPIO_EXTI_Callback+0xdc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001500:	f007 f872 	bl	80085e8 <iprintf>
			lcd_display_number++;
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_GPIO_EXTI_Callback+0xec>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_GPIO_EXTI_Callback+0xec>)
 800150e:	701a      	strb	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200003c0 	.word	0x200003c0
 800151c:	200003c8 	.word	0x200003c8
 8001520:	200003c4 	.word	0x200003c4
 8001524:	40020800 	.word	0x40020800
 8001528:	08009b04 	.word	0x08009b04
 800152c:	200003a8 	.word	0x200003a8
 8001530:	08009b14 	.word	0x08009b14
 8001534:	200003cc 	.word	0x200003cc
 8001538:	08009b20 	.word	0x08009b20
 800153c:	200003d4 	.word	0x200003d4

08001540 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a29      	ldr	r2, [pc, #164]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d14c      	bne.n	80015ec <HAL_TIM_PeriodElapsedCallback+0xac>
		HAL_ADC_Start(&hadc1);
 8001552:	4829      	ldr	r0, [pc, #164]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001554:	f001 fdb8 	bl	80030c8 <HAL_ADC_Start>
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8001558:	4827      	ldr	r0, [pc, #156]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800155a:	f001 feba 	bl	80032d2 <HAL_ADC_GetValue>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001564:	601a      	str	r2, [r3, #0]
		printf("ADC_value = %d\r\n", ADC_value);
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	4824      	ldr	r0, [pc, #144]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800156e:	f007 f83b 	bl	80085e8 <iprintf>
		HAL_ADC_Stop(&hadc1);
 8001572:	4821      	ldr	r0, [pc, #132]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001574:	f001 fe7a 	bl	800326c <HAL_ADC_Stop>
		ADC_flag = 0;
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
		//***************** UP ***********************************************
		if ((ADC_value <= UP_KEY_MAX) ) {
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	dc03      	bgt.n	800158e <HAL_TIM_PeriodElapsedCallback+0x4e>
			ADC_flag = 1;
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
		//***************** RIGHT **********************************************
		else if ((ADC_value >= RIGHT_KEY_MIN && ADC_value <= RIGHT_KEY_MAX)) {
			ADC_flag = 4;
		}
	}
}
 800158c:	e02e      	b.n	80015ec <HAL_TIM_PeriodElapsedCallback+0xac>
		else if ((ADC_value >= DOWN_KEY_MIN && ADC_value <= DOWN_KEY_MAX) ) {
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f240 323d 	movw	r2, #829	; 0x33d
 8001596:	4293      	cmp	r3, r2
 8001598:	dd09      	ble.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x6e>
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f240 3266 	movw	r2, #870	; 0x366
 80015a2:	4293      	cmp	r3, r2
 80015a4:	dc03      	bgt.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x6e>
			ADC_flag = 2;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e01e      	b.n	80015ec <HAL_TIM_PeriodElapsedCallback+0xac>
		else if ((ADC_value >= LEFT_KEY_MIN && ADC_value <= LEFT_KEY_MAX)) {
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f240 7275 	movw	r2, #1909	; 0x775
 80015b6:	4293      	cmp	r3, r2
 80015b8:	dd08      	ble.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x8c>
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f5b3 6ff5 	cmp.w	r3, #1960	; 0x7a8
 80015c2:	dc03      	bgt.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x8c>
			ADC_flag = 3;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015c6:	2203      	movs	r2, #3
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e00f      	b.n	80015ec <HAL_TIM_PeriodElapsedCallback+0xac>
		else if ((ADC_value >= RIGHT_KEY_MIN && ADC_value <= RIGHT_KEY_MAX)) {
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f640 3267 	movw	r2, #2919	; 0xb67
 80015d4:	4293      	cmp	r3, r2
 80015d6:	dd09      	ble.n	80015ec <HAL_TIM_PeriodElapsedCallback+0xac>
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f640 32c2 	movw	r2, #3010	; 0xbc2
 80015e0:	4293      	cmp	r3, r2
 80015e2:	dc03      	bgt.n	80015ec <HAL_TIM_PeriodElapsedCallback+0xac>
			ADC_flag = 4;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015e6:	2204      	movs	r2, #4
 80015e8:	601a      	str	r2, [r3, #0]
}
 80015ea:	e7ff      	b.n	80015ec <HAL_TIM_PeriodElapsedCallback+0xac>
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40000400 	.word	0x40000400
 80015f8:	200002e0 	.word	0x200002e0
 80015fc:	200003d0 	.word	0x200003d0
 8001600:	08009b34 	.word	0x08009b34
 8001604:	20000428 	.word	0x20000428

08001608 <I2C_Scan>:

void I2C_Scan() {
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b098      	sub	sp, #96	; 0x60
 800160c:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <I2C_Scan+0xc0>)
 8001610:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001614:	461d      	mov	r5, r3
 8001616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800161e:	6020      	str	r0, [r4, #0]
 8001620:	3404      	adds	r4, #4
 8001622:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 8001624:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fde1 	bl	80001f0 <strlen>
 800162e:	4603      	mov	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	4824      	ldr	r0, [pc, #144]	; (80016cc <I2C_Scan+0xc4>)
 800163c:	f005 ff77 	bl	800752e <HAL_UART_Transmit>

	HAL_StatusTypeDef res;
	for (uint16_t i = 0; i < 128; i++) {
 8001640:	2300      	movs	r3, #0
 8001642:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001646:	e02f      	b.n	80016a8 <I2C_Scan+0xa0>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8001648:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	b299      	uxth	r1, r3
 8001650:	230a      	movs	r3, #10
 8001652:	2201      	movs	r2, #1
 8001654:	481e      	ldr	r0, [pc, #120]	; (80016d0 <I2C_Scan+0xc8>)
 8001656:	f003 f959 	bl	800490c <HAL_I2C_IsDeviceReady>
 800165a:	4603      	mov	r3, r0
 800165c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		if (res == HAL_OK) {
 8001660:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001664:	2b00      	cmp	r3, #0
 8001666:	d113      	bne.n	8001690 <I2C_Scan+0x88>
			char msg[64];
			snprintf(msg, sizeof(msg), "0x%02X", i);
 8001668:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800166c:	1d38      	adds	r0, r7, #4
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <I2C_Scan+0xcc>)
 8001670:	2140      	movs	r1, #64	; 0x40
 8001672:	f007 f847 	bl	8008704 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fdb9 	bl	80001f0 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	1d39      	adds	r1, r7, #4
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	4810      	ldr	r0, [pc, #64]	; (80016cc <I2C_Scan+0xc4>)
 800168a:	f005 ff50 	bl	800752e <HAL_UART_Transmit>
 800168e:	e006      	b.n	800169e <I2C_Scan+0x96>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart2, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	2201      	movs	r2, #1
 8001696:	4910      	ldr	r1, [pc, #64]	; (80016d8 <I2C_Scan+0xd0>)
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <I2C_Scan+0xc4>)
 800169a:	f005 ff48 	bl	800752e <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 800169e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016a2:	3301      	adds	r3, #1
 80016a4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80016a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016ac:	2b7f      	cmp	r3, #127	; 0x7f
 80016ae:	d9cb      	bls.n	8001648 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
 80016b4:	2202      	movs	r2, #2
 80016b6:	4909      	ldr	r1, [pc, #36]	; (80016dc <I2C_Scan+0xd4>)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <I2C_Scan+0xc4>)
 80016ba:	f005 ff38 	bl	800752e <HAL_UART_Transmit>
}
 80016be:	bf00      	nop
 80016c0:	3760      	adds	r7, #96	; 0x60
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bdb0      	pop	{r4, r5, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	08009b58 	.word	0x08009b58
 80016cc:	20000510 	.word	0x20000510
 80016d0:	20000328 	.word	0x20000328
 80016d4:	08009b48 	.word	0x08009b48
 80016d8:	08009b50 	.word	0x08009b50
 80016dc:	08009b54 	.word	0x08009b54

080016e0 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	460b      	mov	r3, r1
 80016ec:	71bb      	strb	r3, [r7, #6]
 80016ee:	4613      	mov	r3, r2
 80016f0:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	b299      	uxth	r1, r3
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	2201      	movs	r2, #1
 80016fc:	4822      	ldr	r0, [pc, #136]	; (8001788 <LCD_SendInternal+0xa8>)
 80016fe:	f003 f905 	bl	800490c <HAL_I2C_IsDeviceReady>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d000      	beq.n	800170e <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800170c:	e7f1      	b.n	80016f2 <LCD_SendInternal+0x12>
			break;
 800170e:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8001710:	79bb      	ldrb	r3, [r7, #6]
 8001712:	f023 030f 	bic.w	r3, r3, #15
 8001716:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8001718:	79bb      	ldrb	r3, [r7, #6]
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 800171e:	7bba      	ldrb	r2, [r7, #14]
 8001720:	797b      	ldrb	r3, [r7, #5]
 8001722:	4313      	orrs	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f043 030c 	orr.w	r3, r3, #12
 800172a:	b2db      	uxtb	r3, r3
 800172c:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 800172e:	7bba      	ldrb	r2, [r7, #14]
 8001730:	797b      	ldrb	r3, [r7, #5]
 8001732:	4313      	orrs	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f043 0308 	orr.w	r3, r3, #8
 800173a:	b2db      	uxtb	r3, r3
 800173c:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 800173e:	7b7a      	ldrb	r2, [r7, #13]
 8001740:	797b      	ldrb	r3, [r7, #5]
 8001742:	4313      	orrs	r3, r2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f043 030c 	orr.w	r3, r3, #12
 800174a:	b2db      	uxtb	r3, r3
 800174c:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 800174e:	7b7a      	ldrb	r2, [r7, #13]
 8001750:	797b      	ldrb	r3, [r7, #5]
 8001752:	4313      	orrs	r3, r2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	b2db      	uxtb	r3, r3
 800175c:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	b299      	uxth	r1, r3
 8001762:	f107 0208 	add.w	r2, r7, #8
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2304      	movs	r3, #4
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <LCD_SendInternal+0xa8>)
 8001770:	f002 ffce 	bl	8004710 <HAL_I2C_Master_Transmit>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001778:	2005      	movs	r0, #5
 800177a:	f001 fc3d 	bl	8002ff8 <HAL_Delay>
	return res;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000328 	.word	0x20000328

0800178c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	460a      	mov	r2, r1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	4613      	mov	r3, r2
 800179a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 800179c:	79b9      	ldrb	r1, [r7, #6]
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2200      	movs	r2, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff9c 	bl	80016e0 <LCD_SendInternal>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	460a      	mov	r2, r1
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 80017c0:	79b9      	ldrb	r1, [r7, #6]
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff8a 	bl	80016e0 <LCD_SendInternal>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2130      	movs	r1, #48	; 0x30
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ffd2 	bl	800178c <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	2102      	movs	r1, #2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ffcd 	bl	800178c <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	210c      	movs	r1, #12
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ffc8 	bl	800178c <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2101      	movs	r1, #1
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ffc3 	bl	800178c <LCD_SendCommand>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	6039      	str	r1, [r7, #0]
 8001818:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 800181a:	e009      	b.n	8001830 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ffc3 	bl	80017b0 <LCD_SendData>
		str++;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f1      	bne.n	800181c <LCD_SendString+0xe>
	}
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <init>:

void init() {
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
	I2C_Scan();
 8001846:	f7ff fedf 	bl	8001608 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 800184a:	204e      	movs	r0, #78	; 0x4e
 800184c:	f7ff ffc2 	bl	80017d4 <LCD_Init>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}

08001854 <SaveAlarm>:

void loop() {
	HAL_Delay(100);
}
void SaveAlarm() {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	/***************** Save 기능 **************************/
	if (longClick == 1) {
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <SaveAlarm+0x40>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d117      	bne.n	8001890 <SaveAlarm+0x3c>
		at.f = st.f;
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <SaveAlarm+0x44>)
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <SaveAlarm+0x48>)
 8001866:	701a      	strb	r2, [r3, #0]
		at.h = st.h;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <SaveAlarm+0x44>)
 800186a:	785a      	ldrb	r2, [r3, #1]
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <SaveAlarm+0x48>)
 800186e:	705a      	strb	r2, [r3, #1]
		at.m = st.m;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <SaveAlarm+0x44>)
 8001872:	789a      	ldrb	r2, [r3, #2]
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <SaveAlarm+0x48>)
 8001876:	709a      	strb	r2, [r3, #2]
		at.s = st.s;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <SaveAlarm+0x44>)
 800187a:	78da      	ldrb	r2, [r3, #3]
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <SaveAlarm+0x48>)
 800187e:	70da      	strb	r2, [r3, #3]
		longClick = 0;
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SaveAlarm+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
		lcd_display_number = 0;
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <SaveAlarm+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
		SetUpflash();
 800188c:	f000 fee0 	bl	8002650 <SetUpflash>
	}
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200003cc 	.word	0x200003cc
 8001898:	2000042c 	.word	0x2000042c
 800189c:	20000430 	.word	0x20000430
 80018a0:	200003d4 	.word	0x200003d4

080018a4 <SaveMelody>:

void SaveMelody()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	if (longClick == 1) {
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SaveMelody+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d107      	bne.n	80018c0 <SaveMelody+0x1c>
		longClick = 0;
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SaveMelody+0x20>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
		lcd_display_number = 0;
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SaveMelody+0x24>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
		SetUpflash();
 80018bc:	f000 fec8 	bl	8002650 <SetUpflash>
	}
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200003cc 	.word	0x200003cc
 80018c8:	200003d4 	.word	0x200003d4

080018cc <SetClock>:

void SetClock() {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

	/***************** Save 기능 **************************/
	if (longClick == 1) {
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <SetClock+0x50>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d11f      	bne.n	8001918 <SetClock+0x4c>
		sTime.TimeFormat = st.f;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <SetClock+0x54>)
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <SetClock+0x58>)
 80018de:	70da      	strb	r2, [r3, #3]
		sTime.Hours = st.h;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <SetClock+0x54>)
 80018e2:	785a      	ldrb	r2, [r3, #1]
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <SetClock+0x58>)
 80018e6:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = st.m;
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <SetClock+0x54>)
 80018ea:	789a      	ldrb	r2, [r3, #2]
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <SetClock+0x58>)
 80018ee:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = st.s;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <SetClock+0x54>)
 80018f2:	78da      	ldrb	r2, [r3, #3]
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <SetClock+0x58>)
 80018f6:	709a      	strb	r2, [r3, #2]

		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80018f8:	2200      	movs	r2, #0
 80018fa:	490a      	ldr	r1, [pc, #40]	; (8001924 <SetClock+0x58>)
 80018fc:	480a      	ldr	r0, [pc, #40]	; (8001928 <SetClock+0x5c>)
 80018fe:	f004 fa95 	bl	8005e2c <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001902:	2200      	movs	r2, #0
 8001904:	4909      	ldr	r1, [pc, #36]	; (800192c <SetClock+0x60>)
 8001906:	4808      	ldr	r0, [pc, #32]	; (8001928 <SetClock+0x5c>)
 8001908:	f004 fb88 	bl	800601c <HAL_RTC_SetDate>

		longClick = 0;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <SetClock+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
		lcd_display_number = 0;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <SetClock+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	}
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200003cc 	.word	0x200003cc
 8001920:	2000042c 	.word	0x2000042c
 8001924:	200003d8 	.word	0x200003d8
 8001928:	2000045c 	.word	0x2000045c
 800192c:	200003ec 	.word	0x200003ec
 8001930:	200003d4 	.word	0x200003d4

08001934 <SetTimeDown>:
void SetTimeDown(const int *location) {
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af04      	add	r7, sp, #16
 800193a:	6078      	str	r0, [r7, #4]
	if (*location == 0) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <SetTimeDown+0x20>
		st.f ^= 1;
 8001944:	4b8e      	ldr	r3, [pc, #568]	; (8001b80 <SetTimeDown+0x24c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	f083 0301 	eor.w	r3, r3, #1
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <SetTimeDown+0x24c>)
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e0a7      	b.n	8001aa4 <SetTimeDown+0x170>
	}
	else if (*location == 3){
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d116      	bne.n	800198a <SetTimeDown+0x56>
		if(st.h >= 10) st.h -= 10;
 800195c:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <SetTimeDown+0x24c>)
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	2b09      	cmp	r3, #9
 8001962:	d906      	bls.n	8001972 <SetTimeDown+0x3e>
 8001964:	4b86      	ldr	r3, [pc, #536]	; (8001b80 <SetTimeDown+0x24c>)
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	3b0a      	subs	r3, #10
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <SetTimeDown+0x24c>)
 800196e:	705a      	strb	r2, [r3, #1]
 8001970:	e098      	b.n	8001aa4 <SetTimeDown+0x170>
		else if (st.h == 0)
 8001972:	4b83      	ldr	r3, [pc, #524]	; (8001b80 <SetTimeDown+0x24c>)
 8001974:	785b      	ldrb	r3, [r3, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <SetTimeDown+0x4e>
			st.h = 10;
 800197a:	4b81      	ldr	r3, [pc, #516]	; (8001b80 <SetTimeDown+0x24c>)
 800197c:	220a      	movs	r2, #10
 800197e:	705a      	strb	r2, [r3, #1]
 8001980:	e090      	b.n	8001aa4 <SetTimeDown+0x170>
		else
			st.h = 0;
 8001982:	4b7f      	ldr	r3, [pc, #508]	; (8001b80 <SetTimeDown+0x24c>)
 8001984:	2200      	movs	r2, #0
 8001986:	705a      	strb	r2, [r3, #1]
 8001988:	e08c      	b.n	8001aa4 <SetTimeDown+0x170>
	}
	else if (*location == 4) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b04      	cmp	r3, #4
 8001990:	d10e      	bne.n	80019b0 <SetTimeDown+0x7c>
		if (st.h == 0) st.h = 12;
 8001992:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <SetTimeDown+0x24c>)
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <SetTimeDown+0x6e>
 800199a:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <SetTimeDown+0x24c>)
 800199c:	220c      	movs	r2, #12
 800199e:	705a      	strb	r2, [r3, #1]
 80019a0:	e080      	b.n	8001aa4 <SetTimeDown+0x170>
		else st.h -= 1;
 80019a2:	4b77      	ldr	r3, [pc, #476]	; (8001b80 <SetTimeDown+0x24c>)
 80019a4:	785b      	ldrb	r3, [r3, #1]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b75      	ldr	r3, [pc, #468]	; (8001b80 <SetTimeDown+0x24c>)
 80019ac:	705a      	strb	r2, [r3, #1]
 80019ae:	e079      	b.n	8001aa4 <SetTimeDown+0x170>
	}
	else if (*location == 6) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b06      	cmp	r3, #6
 80019b6:	d111      	bne.n	80019dc <SetTimeDown+0xa8>
		if (st.m < 10) st.m += 50;
 80019b8:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <SetTimeDown+0x24c>)
 80019ba:	789b      	ldrb	r3, [r3, #2]
 80019bc:	2b09      	cmp	r3, #9
 80019be:	d806      	bhi.n	80019ce <SetTimeDown+0x9a>
 80019c0:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <SetTimeDown+0x24c>)
 80019c2:	789b      	ldrb	r3, [r3, #2]
 80019c4:	3332      	adds	r3, #50	; 0x32
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <SetTimeDown+0x24c>)
 80019ca:	709a      	strb	r2, [r3, #2]
 80019cc:	e06a      	b.n	8001aa4 <SetTimeDown+0x170>
		else st.m -= 10;
 80019ce:	4b6c      	ldr	r3, [pc, #432]	; (8001b80 <SetTimeDown+0x24c>)
 80019d0:	789b      	ldrb	r3, [r3, #2]
 80019d2:	3b0a      	subs	r3, #10
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <SetTimeDown+0x24c>)
 80019d8:	709a      	strb	r2, [r3, #2]
 80019da:	e063      	b.n	8001aa4 <SetTimeDown+0x170>
	}
	else if (*location == 7) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b07      	cmp	r3, #7
 80019e2:	d11b      	bne.n	8001a1c <SetTimeDown+0xe8>
		if (st.m % 10 == 0) st.m += 9;
 80019e4:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <SetTimeDown+0x24c>)
 80019e6:	789a      	ldrb	r2, [r3, #2]
 80019e8:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <SetTimeDown+0x250>)
 80019ea:	fba3 1302 	umull	r1, r3, r3, r2
 80019ee:	08d9      	lsrs	r1, r3, #3
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d106      	bne.n	8001a0e <SetTimeDown+0xda>
 8001a00:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <SetTimeDown+0x24c>)
 8001a02:	789b      	ldrb	r3, [r3, #2]
 8001a04:	3309      	adds	r3, #9
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <SetTimeDown+0x24c>)
 8001a0a:	709a      	strb	r2, [r3, #2]
 8001a0c:	e04a      	b.n	8001aa4 <SetTimeDown+0x170>
		else st.m--;
 8001a0e:	4b5c      	ldr	r3, [pc, #368]	; (8001b80 <SetTimeDown+0x24c>)
 8001a10:	789b      	ldrb	r3, [r3, #2]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b5a      	ldr	r3, [pc, #360]	; (8001b80 <SetTimeDown+0x24c>)
 8001a18:	709a      	strb	r2, [r3, #2]
 8001a1a:	e043      	b.n	8001aa4 <SetTimeDown+0x170>
	}
	else if (*location == 9) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b09      	cmp	r3, #9
 8001a22:	d111      	bne.n	8001a48 <SetTimeDown+0x114>
		if (st.s < 10) st.s += 50;
 8001a24:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <SetTimeDown+0x24c>)
 8001a26:	78db      	ldrb	r3, [r3, #3]
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d806      	bhi.n	8001a3a <SetTimeDown+0x106>
 8001a2c:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <SetTimeDown+0x24c>)
 8001a2e:	78db      	ldrb	r3, [r3, #3]
 8001a30:	3332      	adds	r3, #50	; 0x32
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b52      	ldr	r3, [pc, #328]	; (8001b80 <SetTimeDown+0x24c>)
 8001a36:	70da      	strb	r2, [r3, #3]
 8001a38:	e034      	b.n	8001aa4 <SetTimeDown+0x170>
		else st.s -= 10;
 8001a3a:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <SetTimeDown+0x24c>)
 8001a3c:	78db      	ldrb	r3, [r3, #3]
 8001a3e:	3b0a      	subs	r3, #10
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <SetTimeDown+0x24c>)
 8001a44:	70da      	strb	r2, [r3, #3]
 8001a46:	e02d      	b.n	8001aa4 <SetTimeDown+0x170>
	}
	else if (*location == 10) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b0a      	cmp	r3, #10
 8001a4e:	d11b      	bne.n	8001a88 <SetTimeDown+0x154>
		if (st.s % 10 == 0) st.s += 9;
 8001a50:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <SetTimeDown+0x24c>)
 8001a52:	78da      	ldrb	r2, [r3, #3]
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <SetTimeDown+0x250>)
 8001a56:	fba3 1302 	umull	r1, r3, r3, r2
 8001a5a:	08d9      	lsrs	r1, r3, #3
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d106      	bne.n	8001a7a <SetTimeDown+0x146>
 8001a6c:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <SetTimeDown+0x24c>)
 8001a6e:	78db      	ldrb	r3, [r3, #3]
 8001a70:	3309      	adds	r3, #9
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <SetTimeDown+0x24c>)
 8001a76:	70da      	strb	r2, [r3, #3]
 8001a78:	e014      	b.n	8001aa4 <SetTimeDown+0x170>
		else st.s--;
 8001a7a:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <SetTimeDown+0x24c>)
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <SetTimeDown+0x24c>)
 8001a84:	70da      	strb	r2, [r3, #3]
 8001a86:	e00d      	b.n	8001aa4 <SetTimeDown+0x170>
	}
	else if (*location == 12 && lcd_display_number == 2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	d109      	bne.n	8001aa4 <SetTimeDown+0x170>
 8001a90:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <SetTimeDown+0x254>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d105      	bne.n	8001aa4 <SetTimeDown+0x170>
		alarmMode ^= 1;
 8001a98:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <SetTimeDown+0x258>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f083 0301 	eor.w	r3, r3, #1
 8001aa0:	4a3a      	ldr	r2, [pc, #232]	; (8001b8c <SetTimeDown+0x258>)
 8001aa2:	6013      	str	r3, [r2, #0]


	//-------------------------------------------------------
	char format[3];
	if (st.f == 0)
 8001aa4:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <SetTimeDown+0x24c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <SetTimeDown+0x18c>
		strcpy(format, "AM");
 8001aac:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <SetTimeDown+0x25c>)
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	8019      	strh	r1, [r3, #0]
 8001ab8:	3302      	adds	r3, #2
 8001aba:	0c12      	lsrs	r2, r2, #16
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e00c      	b.n	8001ada <SetTimeDown+0x1a6>
	else if (st.f == 1)
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <SetTimeDown+0x24c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d108      	bne.n	8001ada <SetTimeDown+0x1a6>
		strcpy(format, "PM");
 8001ac8:	4a32      	ldr	r2, [pc, #200]	; (8001b94 <SetTimeDown+0x260>)
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	8019      	strh	r1, [r3, #0]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	0c12      	lsrs	r2, r2, #16
 8001ad8:	701a      	strb	r2, [r3, #0]
	/****************** Display *************************************/
	if (lcd_display_number == 1)
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <SetTimeDown+0x254>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d111      	bne.n	8001b06 <SetTimeDown+0x1d2>
		sprintf(temp, "%s %02d:%02d:%02d     ", format, st.h, st.m, st.s);
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <SetTimeDown+0x24c>)
 8001ae4:	785b      	ldrb	r3, [r3, #1]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <SetTimeDown+0x24c>)
 8001aea:	789b      	ldrb	r3, [r3, #2]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <SetTimeDown+0x24c>)
 8001af0:	78db      	ldrb	r3, [r3, #3]
 8001af2:	f107 0208 	add.w	r2, r7, #8
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	9100      	str	r1, [sp, #0]
 8001afa:	4603      	mov	r3, r0
 8001afc:	4926      	ldr	r1, [pc, #152]	; (8001b98 <SetTimeDown+0x264>)
 8001afe:	4827      	ldr	r0, [pc, #156]	; (8001b9c <SetTimeDown+0x268>)
 8001b00:	f006 fe34 	bl	800876c <siprintf>
 8001b04:	e01b      	b.n	8001b3e <SetTimeDown+0x20a>
	else if (lcd_display_number == 2)
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <SetTimeDown+0x254>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d117      	bne.n	8001b3e <SetTimeDown+0x20a>
		sprintf(temp, "%s %02d:%02d:%02d %s  ", format, st.h, st.m, st.s,
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <SetTimeDown+0x24c>)
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	461c      	mov	r4, r3
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <SetTimeDown+0x24c>)
 8001b16:	789b      	ldrb	r3, [r3, #2]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <SetTimeDown+0x24c>)
 8001b1c:	78db      	ldrb	r3, [r3, #3]
 8001b1e:	4618      	mov	r0, r3
				alarmSet[alarmMode]);
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <SetTimeDown+0x258>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <SetTimeDown+0x26c>)
 8001b28:	4413      	add	r3, r2
		sprintf(temp, "%s %02d:%02d:%02d %s  ", format, st.h, st.m, st.s,
 8001b2a:	f107 0208 	add.w	r2, r7, #8
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	9001      	str	r0, [sp, #4]
 8001b32:	9100      	str	r1, [sp, #0]
 8001b34:	4623      	mov	r3, r4
 8001b36:	491b      	ldr	r1, [pc, #108]	; (8001ba4 <SetTimeDown+0x270>)
 8001b38:	4818      	ldr	r0, [pc, #96]	; (8001b9c <SetTimeDown+0x268>)
 8001b3a:	f006 fe17 	bl	800876c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001b3e:	21c0      	movs	r1, #192	; 0xc0
 8001b40:	204e      	movs	r0, #78	; 0x4e
 8001b42:	f7ff fe23 	bl	800178c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp);
 8001b46:	4915      	ldr	r1, [pc, #84]	; (8001b9c <SetTimeDown+0x268>)
 8001b48:	204e      	movs	r0, #78	; 0x4e
 8001b4a:	f7ff fe60 	bl	800180e <LCD_SendString>
	/***************** SetTime ?�� 커서 ?��?��리기 **************************/
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001b4e:	21c0      	movs	r1, #192	; 0xc0
 8001b50:	204e      	movs	r0, #78	; 0x4e
 8001b52:	f7ff fe1b 	bl	800178c <LCD_SendCommand>
	for (int j = 0; j < *location; j++) {
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e006      	b.n	8001b6a <SetTimeDown+0x236>
		LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001b5c:	2114      	movs	r1, #20
 8001b5e:	204e      	movs	r0, #78	; 0x4e
 8001b60:	f7ff fe14 	bl	800178c <LCD_SendCommand>
	for (int j = 0; j < *location; j++) {
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbf3      	blt.n	8001b5c <SetTimeDown+0x228>
	}
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000042c 	.word	0x2000042c
 8001b84:	cccccccd 	.word	0xcccccccd
 8001b88:	200003d4 	.word	0x200003d4
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	08009b70 	.word	0x08009b70
 8001b94:	08009b74 	.word	0x08009b74
 8001b98:	08009a68 	.word	0x08009a68
 8001b9c:	2000040c 	.word	0x2000040c
 8001ba0:	2000000c 	.word	0x2000000c
 8001ba4:	08009b78 	.word	0x08009b78

08001ba8 <SetTimeUp>:

void SetTimeUp(const int *location) {
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af04      	add	r7, sp, #16
 8001bae:	6078      	str	r0, [r7, #4]
	if (*location == 0) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <SetTimeUp+0x20>
		st.f ^= 1;
 8001bb8:	4b94      	ldr	r3, [pc, #592]	; (8001e0c <SetTimeUp+0x264>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	f083 0301 	eor.w	r3, r3, #1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b92      	ldr	r3, [pc, #584]	; (8001e0c <SetTimeUp+0x264>)
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e0b3      	b.n	8001d30 <SetTimeUp+0x188>
	}
	else if (*location == 3) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d11a      	bne.n	8001c06 <SetTimeUp+0x5e>
		if(st.h > 2 && st.h != 12)
 8001bd0:	4b8e      	ldr	r3, [pc, #568]	; (8001e0c <SetTimeUp+0x264>)
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d907      	bls.n	8001be8 <SetTimeUp+0x40>
 8001bd8:	4b8c      	ldr	r3, [pc, #560]	; (8001e0c <SetTimeUp+0x264>)
 8001bda:	785b      	ldrb	r3, [r3, #1]
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d003      	beq.n	8001be8 <SetTimeUp+0x40>
			st.h = 12;
 8001be0:	4b8a      	ldr	r3, [pc, #552]	; (8001e0c <SetTimeUp+0x264>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	705a      	strb	r2, [r3, #1]
 8001be6:	e0a3      	b.n	8001d30 <SetTimeUp+0x188>
		else if (st.h == 12)
 8001be8:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <SetTimeUp+0x264>)
 8001bea:	785b      	ldrb	r3, [r3, #1]
 8001bec:	2b0c      	cmp	r3, #12
 8001bee:	d103      	bne.n	8001bf8 <SetTimeUp+0x50>
			st.h = 0;
 8001bf0:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <SetTimeUp+0x264>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	705a      	strb	r2, [r3, #1]
 8001bf6:	e09b      	b.n	8001d30 <SetTimeUp+0x188>
		else
			st.h += 10;
 8001bf8:	4b84      	ldr	r3, [pc, #528]	; (8001e0c <SetTimeUp+0x264>)
 8001bfa:	785b      	ldrb	r3, [r3, #1]
 8001bfc:	330a      	adds	r3, #10
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b82      	ldr	r3, [pc, #520]	; (8001e0c <SetTimeUp+0x264>)
 8001c02:	705a      	strb	r2, [r3, #1]
 8001c04:	e094      	b.n	8001d30 <SetTimeUp+0x188>
	}
	else if (*location == 4) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d10e      	bne.n	8001c2c <SetTimeUp+0x84>
		if (st.h == 12)
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <SetTimeUp+0x264>)
 8001c10:	785b      	ldrb	r3, [r3, #1]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d103      	bne.n	8001c1e <SetTimeUp+0x76>
			st.h = 0;
 8001c16:	4b7d      	ldr	r3, [pc, #500]	; (8001e0c <SetTimeUp+0x264>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	705a      	strb	r2, [r3, #1]
 8001c1c:	e088      	b.n	8001d30 <SetTimeUp+0x188>
		else
			st.h += 1;
 8001c1e:	4b7b      	ldr	r3, [pc, #492]	; (8001e0c <SetTimeUp+0x264>)
 8001c20:	785b      	ldrb	r3, [r3, #1]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b79      	ldr	r3, [pc, #484]	; (8001e0c <SetTimeUp+0x264>)
 8001c28:	705a      	strb	r2, [r3, #1]
 8001c2a:	e081      	b.n	8001d30 <SetTimeUp+0x188>

	} else if (*location == 6) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b06      	cmp	r3, #6
 8001c32:	d115      	bne.n	8001c60 <SetTimeUp+0xb8>
		if (st.m >= 50)
 8001c34:	4b75      	ldr	r3, [pc, #468]	; (8001e0c <SetTimeUp+0x264>)
 8001c36:	789b      	ldrb	r3, [r3, #2]
 8001c38:	2b31      	cmp	r3, #49	; 0x31
 8001c3a:	d906      	bls.n	8001c4a <SetTimeUp+0xa2>
			st.m -= 50;
 8001c3c:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <SetTimeUp+0x264>)
 8001c3e:	789b      	ldrb	r3, [r3, #2]
 8001c40:	3b32      	subs	r3, #50	; 0x32
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <SetTimeUp+0x264>)
 8001c46:	709a      	strb	r2, [r3, #2]
 8001c48:	e072      	b.n	8001d30 <SetTimeUp+0x188>
		else if (st.m < 50) {
 8001c4a:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <SetTimeUp+0x264>)
 8001c4c:	789b      	ldrb	r3, [r3, #2]
 8001c4e:	2b31      	cmp	r3, #49	; 0x31
 8001c50:	d86e      	bhi.n	8001d30 <SetTimeUp+0x188>
			st.m += 10;
 8001c52:	4b6e      	ldr	r3, [pc, #440]	; (8001e0c <SetTimeUp+0x264>)
 8001c54:	789b      	ldrb	r3, [r3, #2]
 8001c56:	330a      	adds	r3, #10
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b6c      	ldr	r3, [pc, #432]	; (8001e0c <SetTimeUp+0x264>)
 8001c5c:	709a      	strb	r2, [r3, #2]
 8001c5e:	e067      	b.n	8001d30 <SetTimeUp+0x188>
		}
	} else if (*location == 7) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b07      	cmp	r3, #7
 8001c66:	d11b      	bne.n	8001ca0 <SetTimeUp+0xf8>
		if (st.m % 10 == 9)
 8001c68:	4b68      	ldr	r3, [pc, #416]	; (8001e0c <SetTimeUp+0x264>)
 8001c6a:	789a      	ldrb	r2, [r3, #2]
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <SetTimeUp+0x268>)
 8001c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8001c72:	08d9      	lsrs	r1, r3, #3
 8001c74:	460b      	mov	r3, r1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b09      	cmp	r3, #9
 8001c82:	d106      	bne.n	8001c92 <SetTimeUp+0xea>
			st.m -= 9;
 8001c84:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <SetTimeUp+0x264>)
 8001c86:	789b      	ldrb	r3, [r3, #2]
 8001c88:	3b09      	subs	r3, #9
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b5f      	ldr	r3, [pc, #380]	; (8001e0c <SetTimeUp+0x264>)
 8001c8e:	709a      	strb	r2, [r3, #2]
 8001c90:	e04e      	b.n	8001d30 <SetTimeUp+0x188>
		else
			st.m++;
 8001c92:	4b5e      	ldr	r3, [pc, #376]	; (8001e0c <SetTimeUp+0x264>)
 8001c94:	789b      	ldrb	r3, [r3, #2]
 8001c96:	3301      	adds	r3, #1
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <SetTimeUp+0x264>)
 8001c9c:	709a      	strb	r2, [r3, #2]
 8001c9e:	e047      	b.n	8001d30 <SetTimeUp+0x188>
	} else if (*location == 9) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b09      	cmp	r3, #9
 8001ca6:	d115      	bne.n	8001cd4 <SetTimeUp+0x12c>
		if (st.s >= 50)
 8001ca8:	4b58      	ldr	r3, [pc, #352]	; (8001e0c <SetTimeUp+0x264>)
 8001caa:	78db      	ldrb	r3, [r3, #3]
 8001cac:	2b31      	cmp	r3, #49	; 0x31
 8001cae:	d906      	bls.n	8001cbe <SetTimeUp+0x116>
			st.s -= 50;
 8001cb0:	4b56      	ldr	r3, [pc, #344]	; (8001e0c <SetTimeUp+0x264>)
 8001cb2:	78db      	ldrb	r3, [r3, #3]
 8001cb4:	3b32      	subs	r3, #50	; 0x32
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <SetTimeUp+0x264>)
 8001cba:	70da      	strb	r2, [r3, #3]
 8001cbc:	e038      	b.n	8001d30 <SetTimeUp+0x188>
		else if (st.s < 50)
 8001cbe:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <SetTimeUp+0x264>)
 8001cc0:	78db      	ldrb	r3, [r3, #3]
 8001cc2:	2b31      	cmp	r3, #49	; 0x31
 8001cc4:	d834      	bhi.n	8001d30 <SetTimeUp+0x188>
			st.s += 10;
 8001cc6:	4b51      	ldr	r3, [pc, #324]	; (8001e0c <SetTimeUp+0x264>)
 8001cc8:	78db      	ldrb	r3, [r3, #3]
 8001cca:	330a      	adds	r3, #10
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <SetTimeUp+0x264>)
 8001cd0:	70da      	strb	r2, [r3, #3]
 8001cd2:	e02d      	b.n	8001d30 <SetTimeUp+0x188>
	} else if (*location == 10) {
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b0a      	cmp	r3, #10
 8001cda:	d11b      	bne.n	8001d14 <SetTimeUp+0x16c>
		if (st.s % 10 == 9)
 8001cdc:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <SetTimeUp+0x264>)
 8001cde:	78da      	ldrb	r2, [r3, #3]
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <SetTimeUp+0x268>)
 8001ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ce6:	08d9      	lsrs	r1, r3, #3
 8001ce8:	460b      	mov	r3, r1
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d106      	bne.n	8001d06 <SetTimeUp+0x15e>
			st.s -= 9;
 8001cf8:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <SetTimeUp+0x264>)
 8001cfa:	78db      	ldrb	r3, [r3, #3]
 8001cfc:	3b09      	subs	r3, #9
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <SetTimeUp+0x264>)
 8001d02:	70da      	strb	r2, [r3, #3]
 8001d04:	e014      	b.n	8001d30 <SetTimeUp+0x188>
		else
			st.s++;
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <SetTimeUp+0x264>)
 8001d08:	78db      	ldrb	r3, [r3, #3]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <SetTimeUp+0x264>)
 8001d10:	70da      	strb	r2, [r3, #3]
 8001d12:	e00d      	b.n	8001d30 <SetTimeUp+0x188>
	} else if (*location == 12 && lcd_display_number == 2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b0c      	cmp	r3, #12
 8001d1a:	d109      	bne.n	8001d30 <SetTimeUp+0x188>
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <SetTimeUp+0x26c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d105      	bne.n	8001d30 <SetTimeUp+0x188>
		alarmMode ^= 1;
 8001d24:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <SetTimeUp+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f083 0301 	eor.w	r3, r3, #1
 8001d2c:	4a3a      	ldr	r2, [pc, #232]	; (8001e18 <SetTimeUp+0x270>)
 8001d2e:	6013      	str	r3, [r2, #0]
	char format[3];
	if (st.f == 0)
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <SetTimeUp+0x264>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <SetTimeUp+0x1a4>
		strcpy(format, "AM");
 8001d38:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <SetTimeUp+0x274>)
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	4611      	mov	r1, r2
 8001d42:	8019      	strh	r1, [r3, #0]
 8001d44:	3302      	adds	r3, #2
 8001d46:	0c12      	lsrs	r2, r2, #16
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	e00c      	b.n	8001d66 <SetTimeUp+0x1be>
	else if (st.f == 1)
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <SetTimeUp+0x264>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d108      	bne.n	8001d66 <SetTimeUp+0x1be>
		strcpy(format, "PM");
 8001d54:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <SetTimeUp+0x278>)
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	8019      	strh	r1, [r3, #0]
 8001d60:	3302      	adds	r3, #2
 8001d62:	0c12      	lsrs	r2, r2, #16
 8001d64:	701a      	strb	r2, [r3, #0]
/****************** Display *************************************/
	if (lcd_display_number == 1)
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <SetTimeUp+0x26c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d111      	bne.n	8001d92 <SetTimeUp+0x1ea>
		sprintf(temp, "%s %02d:%02d:%02d     ", format, st.h, st.m, st.s);
 8001d6e:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <SetTimeUp+0x264>)
 8001d70:	785b      	ldrb	r3, [r3, #1]
 8001d72:	4618      	mov	r0, r3
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <SetTimeUp+0x264>)
 8001d76:	789b      	ldrb	r3, [r3, #2]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <SetTimeUp+0x264>)
 8001d7c:	78db      	ldrb	r3, [r3, #3]
 8001d7e:	f107 0208 	add.w	r2, r7, #8
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	9100      	str	r1, [sp, #0]
 8001d86:	4603      	mov	r3, r0
 8001d88:	4926      	ldr	r1, [pc, #152]	; (8001e24 <SetTimeUp+0x27c>)
 8001d8a:	4827      	ldr	r0, [pc, #156]	; (8001e28 <SetTimeUp+0x280>)
 8001d8c:	f006 fcee 	bl	800876c <siprintf>
 8001d90:	e01b      	b.n	8001dca <SetTimeUp+0x222>
	else if (lcd_display_number == 2)
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <SetTimeUp+0x26c>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d117      	bne.n	8001dca <SetTimeUp+0x222>
		sprintf(temp, "%s %02d:%02d:%02d %s  ", format, st.h, st.m, st.s,
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <SetTimeUp+0x264>)
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	461c      	mov	r4, r3
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <SetTimeUp+0x264>)
 8001da2:	789b      	ldrb	r3, [r3, #2]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <SetTimeUp+0x264>)
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	4618      	mov	r0, r3
				alarmSet[alarmMode]);
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <SetTimeUp+0x270>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <SetTimeUp+0x284>)
 8001db4:	4413      	add	r3, r2
		sprintf(temp, "%s %02d:%02d:%02d %s  ", format, st.h, st.m, st.s,
 8001db6:	f107 0208 	add.w	r2, r7, #8
 8001dba:	9302      	str	r3, [sp, #8]
 8001dbc:	9001      	str	r0, [sp, #4]
 8001dbe:	9100      	str	r1, [sp, #0]
 8001dc0:	4623      	mov	r3, r4
 8001dc2:	491b      	ldr	r1, [pc, #108]	; (8001e30 <SetTimeUp+0x288>)
 8001dc4:	4818      	ldr	r0, [pc, #96]	; (8001e28 <SetTimeUp+0x280>)
 8001dc6:	f006 fcd1 	bl	800876c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001dca:	21c0      	movs	r1, #192	; 0xc0
 8001dcc:	204e      	movs	r0, #78	; 0x4e
 8001dce:	f7ff fcdd 	bl	800178c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp);
 8001dd2:	4915      	ldr	r1, [pc, #84]	; (8001e28 <SetTimeUp+0x280>)
 8001dd4:	204e      	movs	r0, #78	; 0x4e
 8001dd6:	f7ff fd1a 	bl	800180e <LCD_SendString>

	/***************** SetTime ?�� 커서 ?��?��리기 **************************/
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001dda:	21c0      	movs	r1, #192	; 0xc0
 8001ddc:	204e      	movs	r0, #78	; 0x4e
 8001dde:	f7ff fcd5 	bl	800178c <LCD_SendCommand>
	for (int j = 0; j < *location; j++) {
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e006      	b.n	8001df6 <SetTimeUp+0x24e>
		LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001de8:	2114      	movs	r1, #20
 8001dea:	204e      	movs	r0, #78	; 0x4e
 8001dec:	f7ff fcce 	bl	800178c <LCD_SendCommand>
	for (int j = 0; j < *location; j++) {
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3301      	adds	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbf3      	blt.n	8001de8 <SetTimeUp+0x240>
	}
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000042c 	.word	0x2000042c
 8001e10:	cccccccd 	.word	0xcccccccd
 8001e14:	200003d4 	.word	0x200003d4
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	08009b70 	.word	0x08009b70
 8001e20:	08009b74 	.word	0x08009b74
 8001e24:	08009a68 	.word	0x08009a68
 8001e28:	2000040c 	.word	0x2000040c
 8001e2c:	2000000c 	.word	0x2000000c
 8001e30:	08009b78 	.word	0x08009b78

08001e34 <AdcSwitch>:

void AdcSwitch(uint8_t *adc_point, int *location) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
	//***************** UP *************************************************
	if (ADC_flag == 1 && *adc_point != 1) {
 8001e3e:	4b76      	ldr	r3, [pc, #472]	; (8002018 <AdcSwitch+0x1e4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d110      	bne.n	8001e68 <AdcSwitch+0x34>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d00c      	beq.n	8001e68 <AdcSwitch+0x34>
		*adc_point = 1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
		printf("ADC_value = %d\r\n", ADC_value);
 8001e54:	4b71      	ldr	r3, [pc, #452]	; (800201c <AdcSwitch+0x1e8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4871      	ldr	r0, [pc, #452]	; (8002020 <AdcSwitch+0x1ec>)
 8001e5c:	f006 fbc4 	bl	80085e8 <iprintf>
		SetTimeUp(location);
 8001e60:	6838      	ldr	r0, [r7, #0]
 8001e62:	f7ff fea1 	bl	8001ba8 <SetTimeUp>
 8001e66:	e0c5      	b.n	8001ff4 <AdcSwitch+0x1c0>
	}
	//***************** DOWN ***********************************************
	else if (ADC_flag == 2 && *adc_point != 2) {
 8001e68:	4b6b      	ldr	r3, [pc, #428]	; (8002018 <AdcSwitch+0x1e4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d110      	bne.n	8001e92 <AdcSwitch+0x5e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d00c      	beq.n	8001e92 <AdcSwitch+0x5e>
		*adc_point = 2;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	701a      	strb	r2, [r3, #0]
		printf("ADC_value = %d\r\n", ADC_value);
 8001e7e:	4b67      	ldr	r3, [pc, #412]	; (800201c <AdcSwitch+0x1e8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4619      	mov	r1, r3
 8001e84:	4866      	ldr	r0, [pc, #408]	; (8002020 <AdcSwitch+0x1ec>)
 8001e86:	f006 fbaf 	bl	80085e8 <iprintf>
		SetTimeDown(location);
 8001e8a:	6838      	ldr	r0, [r7, #0]
 8001e8c:	f7ff fd52 	bl	8001934 <SetTimeDown>
 8001e90:	e0b0      	b.n	8001ff4 <AdcSwitch+0x1c0>
	}
	//****************** LEFT **********************************************
	else if (ADC_flag == 3  && *adc_point != 3) {
 8001e92:	4b61      	ldr	r3, [pc, #388]	; (8002018 <AdcSwitch+0x1e4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d157      	bne.n	8001f4a <AdcSwitch+0x116>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d053      	beq.n	8001f4a <AdcSwitch+0x116>
		printf("ADC_value = %d\r\n", ADC_value);
 8001ea2:	4b5e      	ldr	r3, [pc, #376]	; (800201c <AdcSwitch+0x1e8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	485d      	ldr	r0, [pc, #372]	; (8002020 <AdcSwitch+0x1ec>)
 8001eaa:	f006 fb9d 	bl	80085e8 <iprintf>
		*adc_point = 3;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	701a      	strb	r2, [r3, #0]
		//****************** LEFT **********************************************
		if (*location <= 0) {
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dc10      	bgt.n	8001ede <AdcSwitch+0xaa>
			for (int r = 0; r < 12; r++) {
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e006      	b.n	8001ed0 <AdcSwitch+0x9c>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001ec2:	2114      	movs	r1, #20
 8001ec4:	204e      	movs	r0, #78	; 0x4e
 8001ec6:	f7ff fc61 	bl	800178c <LCD_SendCommand>
			for (int r = 0; r < 12; r++) {
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b0b      	cmp	r3, #11
 8001ed4:	ddf5      	ble.n	8001ec2 <AdcSwitch+0x8e>
			}
			*location = 12;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	220c      	movs	r2, #12
 8001eda:	601a      	str	r2, [r3, #0]
		if (*location <= 0) {
 8001edc:	e08a      	b.n	8001ff4 <AdcSwitch+0x1c0>
		}
		else {
			if (*location == 3) {
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d10c      	bne.n	8001f00 <AdcSwitch+0xcc>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	204e      	movs	r0, #78	; 0x4e
 8001eea:	f7ff fc4f 	bl	800178c <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001eee:	2110      	movs	r1, #16
 8001ef0:	204e      	movs	r0, #78	; 0x4e
 8001ef2:	f7ff fc4b 	bl	800178c <LCD_SendCommand>
				(*location) -= 2;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1e9a      	subs	r2, r3, #2
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	601a      	str	r2, [r3, #0]
			}
			if (*location == 6 || *location == 9 || *location == 12) {
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b06      	cmp	r3, #6
 8001f06:	d007      	beq.n	8001f18 <AdcSwitch+0xe4>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b09      	cmp	r3, #9
 8001f0e:	d003      	beq.n	8001f18 <AdcSwitch+0xe4>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b0c      	cmp	r3, #12
 8001f16:	d108      	bne.n	8001f2a <AdcSwitch+0xf6>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001f18:	2110      	movs	r1, #16
 8001f1a:	204e      	movs	r0, #78	; 0x4e
 8001f1c:	f7ff fc36 	bl	800178c <LCD_SendCommand>
				(*location) -= 1;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	601a      	str	r2, [r3, #0]
			}
			LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	204e      	movs	r0, #78	; 0x4e
 8001f2e:	f7ff fc2d 	bl	800178c <LCD_SendCommand>
			(*location)--;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	1e5a      	subs	r2, r3, #1
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	601a      	str	r2, [r3, #0]
			printf("2||%d\r\n", *adc_point );
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4838      	ldr	r0, [pc, #224]	; (8002024 <AdcSwitch+0x1f0>)
 8001f44:	f006 fb50 	bl	80085e8 <iprintf>
		if (*location <= 0) {
 8001f48:	e054      	b.n	8001ff4 <AdcSwitch+0x1c0>
		}
	}
	//***************** RIGHT **********************************************
	else if (ADC_flag == 4  && *adc_point != 4){
 8001f4a:	4b33      	ldr	r3, [pc, #204]	; (8002018 <AdcSwitch+0x1e4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d150      	bne.n	8001ff4 <AdcSwitch+0x1c0>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d04c      	beq.n	8001ff4 <AdcSwitch+0x1c0>
		printf("ADC_value = %d\r\n", ADC_value);
 8001f5a:	4b30      	ldr	r3, [pc, #192]	; (800201c <AdcSwitch+0x1e8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	482f      	ldr	r0, [pc, #188]	; (8002020 <AdcSwitch+0x1ec>)
 8001f62:	f006 fb41 	bl	80085e8 <iprintf>
		*adc_point = 4;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	701a      	strb	r2, [r3, #0]
		//***************** RIGHT **********************************************
		if (12 <= *location ) {
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b0b      	cmp	r3, #11
 8001f72:	dd10      	ble.n	8001f96 <AdcSwitch+0x162>
			for (int l = 12; l > 0; l--) {
 8001f74:	230c      	movs	r3, #12
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	e006      	b.n	8001f88 <AdcSwitch+0x154>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	204e      	movs	r0, #78	; 0x4e
 8001f7e:	f7ff fc05 	bl	800178c <LCD_SendCommand>
			for (int l = 12; l > 0; l--) {
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	dcf5      	bgt.n	8001f7a <AdcSwitch+0x146>
			}
			*location = 0;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e02e      	b.n	8001ff4 <AdcSwitch+0x1c0>
		} else {
			if (*location == 0) {
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <AdcSwitch+0x184>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001f9e:	2114      	movs	r1, #20
 8001fa0:	204e      	movs	r0, #78	; 0x4e
 8001fa2:	f7ff fbf3 	bl	800178c <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001fa6:	2114      	movs	r1, #20
 8001fa8:	204e      	movs	r0, #78	; 0x4e
 8001faa:	f7ff fbef 	bl	800178c <LCD_SendCommand>
				(*location) += 2;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	1c9a      	adds	r2, r3, #2
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	601a      	str	r2, [r3, #0]
			}
			if (*location == 4 || *location == 7 || *location == 10) {
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d007      	beq.n	8001fd0 <AdcSwitch+0x19c>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b07      	cmp	r3, #7
 8001fc6:	d003      	beq.n	8001fd0 <AdcSwitch+0x19c>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b0a      	cmp	r3, #10
 8001fce:	d108      	bne.n	8001fe2 <AdcSwitch+0x1ae>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001fd0:	2114      	movs	r1, #20
 8001fd2:	204e      	movs	r0, #78	; 0x4e
 8001fd4:	f7ff fbda 	bl	800178c <LCD_SendCommand>
				(*location) += 1;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	601a      	str	r2, [r3, #0]
			}
			LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001fe2:	2114      	movs	r1, #20
 8001fe4:	204e      	movs	r0, #78	; 0x4e
 8001fe6:	f7ff fbd1 	bl	800178c <LCD_SendCommand>
			(*location)++;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	601a      	str	r2, [r3, #0]

		}
	}
	if (ADC_value > RIGHT_KEY_MAX  && *adc_point != 0) {
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <AdcSwitch+0x1e8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f640 32c2 	movw	r2, #3010	; 0xbc2
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	dd06      	ble.n	800200e <AdcSwitch+0x1da>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <AdcSwitch+0x1da>
		*adc_point = 0;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
	}
//**********************************************************************

}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000428 	.word	0x20000428
 800201c:	200003d0 	.word	0x200003d0
 8002020:	08009b34 	.word	0x08009b34
 8002024:	08009b90 	.word	0x08009b90

08002028 <Bicyclemelody>:

void Bicyclemelody() {
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800202e:	2100      	movs	r1, #0
 8002030:	486b      	ldr	r0, [pc, #428]	; (80021e0 <Bicyclemelody+0x1b8>)
 8002032:	f004 fa9d 	bl	8006570 <HAL_TIM_PWM_Start>
	for (int i = 0; i < bell_length; i++) {
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e029      	b.n	8002090 <Bicyclemelody+0x68>
		if (longClick == 0) {
 800203c:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <Bicyclemelody+0x1bc>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d122      	bne.n	800208a <Bicyclemelody+0x62>
			TIM2->ARR = bicycle[i];
 8002044:	4a68      	ldr	r2, [pc, #416]	; (80021e8 <Bicyclemelody+0x1c0>)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800204c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8002052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800205c:	4963      	ldr	r1, [pc, #396]	; (80021ec <Bicyclemelody+0x1c4>)
 800205e:	fba1 1303 	umull	r1, r3, r1, r3
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(interval[i]);
 8002066:	4a62      	ldr	r2, [pc, #392]	; (80021f0 <Bicyclemelody+0x1c8>)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 ffc2 	bl	8002ff8 <HAL_Delay>
			TIM2->CCR1 = 0;
 8002074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002078:	2200      	movs	r2, #0
 800207a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(mute[i]);
 800207c:	4a5d      	ldr	r2, [pc, #372]	; (80021f4 <Bicyclemelody+0x1cc>)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 ffb7 	bl	8002ff8 <HAL_Delay>
	for (int i = 0; i < bell_length; i++) {
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3301      	adds	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <Bicyclemelody+0x1d0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4293      	cmp	r3, r2
 800209a:	dbcf      	blt.n	800203c <Bicyclemelody+0x14>
		}
	}
	for (int i = 0; i < bell_length_2; i++) {
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	e029      	b.n	80020f6 <Bicyclemelody+0xce>
		if (longClick == 0) {
 80020a2:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <Bicyclemelody+0x1bc>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d122      	bne.n	80020f0 <Bicyclemelody+0xc8>
			TIM2->ARR = bicycle_2[i];
 80020aa:	4a54      	ldr	r2, [pc, #336]	; (80021fc <Bicyclemelody+0x1d4>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 80020b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c2:	494a      	ldr	r1, [pc, #296]	; (80021ec <Bicyclemelody+0x1c4>)
 80020c4:	fba1 1303 	umull	r1, r3, r1, r3
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(interval_2[i]);
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <Bicyclemelody+0x1d8>)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 ff8f 	bl	8002ff8 <HAL_Delay>
			TIM2->CCR1 = 0;
 80020da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020de:	2200      	movs	r2, #0
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(mute_2[i]);
 80020e2:	4a48      	ldr	r2, [pc, #288]	; (8002204 <Bicyclemelody+0x1dc>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 ff84 	bl	8002ff8 <HAL_Delay>
	for (int i = 0; i < bell_length_2; i++) {
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4b44      	ldr	r3, [pc, #272]	; (8002208 <Bicyclemelody+0x1e0>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4293      	cmp	r3, r2
 8002100:	dbcf      	blt.n	80020a2 <Bicyclemelody+0x7a>
		}
	}
	for (int i = 0; i < bell_length_3; i++) {
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	e029      	b.n	800215c <Bicyclemelody+0x134>
		if (longClick == 0) {
 8002108:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <Bicyclemelody+0x1bc>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d122      	bne.n	8002156 <Bicyclemelody+0x12e>
			TIM2->ARR = bicycle_3[i];
 8002110:	4a3e      	ldr	r2, [pc, #248]	; (800220c <Bicyclemelody+0x1e4>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800211c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 800211e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002128:	4930      	ldr	r1, [pc, #192]	; (80021ec <Bicyclemelody+0x1c4>)
 800212a:	fba1 1303 	umull	r1, r3, r1, r3
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(interval_3[i]);
 8002132:	4a37      	ldr	r2, [pc, #220]	; (8002210 <Bicyclemelody+0x1e8>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 ff5c 	bl	8002ff8 <HAL_Delay>
			TIM2->CCR1 = 0;
 8002140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002144:	2200      	movs	r2, #0
 8002146:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(mute_3[i]);
 8002148:	4a32      	ldr	r2, [pc, #200]	; (8002214 <Bicyclemelody+0x1ec>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 ff51 	bl	8002ff8 <HAL_Delay>
	for (int i = 0; i < bell_length_3; i++) {
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3301      	adds	r3, #1
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <Bicyclemelody+0x1f0>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4293      	cmp	r3, r2
 8002166:	dbcf      	blt.n	8002108 <Bicyclemelody+0xe0>
		}
	}
	for (int i = 0; i < bell_length_4; i++) {
 8002168:	2300      	movs	r3, #0
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	e029      	b.n	80021c2 <Bicyclemelody+0x19a>
		if (longClick == 0) {
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <Bicyclemelody+0x1bc>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d122      	bne.n	80021bc <Bicyclemelody+0x194>
			TIM2->ARR = bicycle_4[i];
 8002176:	4a29      	ldr	r2, [pc, #164]	; (800221c <Bicyclemelody+0x1f4>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800217e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8002184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800218e:	4917      	ldr	r1, [pc, #92]	; (80021ec <Bicyclemelody+0x1c4>)
 8002190:	fba1 1303 	umull	r1, r3, r1, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(interval_4[i]);
 8002198:	4a21      	ldr	r2, [pc, #132]	; (8002220 <Bicyclemelody+0x1f8>)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 ff29 	bl	8002ff8 <HAL_Delay>
			TIM2->CCR1 = 0;
 80021a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021aa:	2200      	movs	r2, #0
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(mute_4[i]);
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <Bicyclemelody+0x1fc>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 ff1e 	bl	8002ff8 <HAL_Delay>
	for (int i = 0; i < bell_length_4; i++) {
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	3301      	adds	r3, #1
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <Bicyclemelody+0x200>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4293      	cmp	r3, r2
 80021cc:	dbcf      	blt.n	800216e <Bicyclemelody+0x146>
		}
	}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80021ce:	2100      	movs	r1, #0
 80021d0:	4803      	ldr	r0, [pc, #12]	; (80021e0 <Bicyclemelody+0x1b8>)
 80021d2:	f004 fa95 	bl	8006700 <HAL_TIM_PWM_Stop>
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000480 	.word	0x20000480
 80021e4:	200003cc 	.word	0x200003cc
 80021e8:	20000018 	.word	0x20000018
 80021ec:	1b4e81b5 	.word	0x1b4e81b5
 80021f0:	20000034 	.word	0x20000034
 80021f4:	20000050 	.word	0x20000050
 80021f8:	2000016c 	.word	0x2000016c
 80021fc:	2000006c 	.word	0x2000006c
 8002200:	20000088 	.word	0x20000088
 8002204:	200000a4 	.word	0x200000a4
 8002208:	2000016d 	.word	0x2000016d
 800220c:	200000c0 	.word	0x200000c0
 8002210:	200000dc 	.word	0x200000dc
 8002214:	200000f8 	.word	0x200000f8
 8002218:	2000016e 	.word	0x2000016e
 800221c:	20000118 	.word	0x20000118
 8002220:	20000134 	.word	0x20000134
 8002224:	20000150 	.word	0x20000150
 8002228:	2000016f 	.word	0x2000016f

0800222c <underworld>:

void underworld() {
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002232:	2100      	movs	r1, #0
 8002234:	485a      	ldr	r0, [pc, #360]	; (80023a0 <underworld+0x174>)
 8002236:	f004 f99b 	bl	8006570 <HAL_TIM_PWM_Start>
	if (longClick == 0) {
 800223a:	4b5a      	ldr	r3, [pc, #360]	; (80023a4 <underworld+0x178>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d125      	bne.n	800228e <underworld+0x62>
		for (int i = 0; i < 10; i++) {
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	e01f      	b.n	8002288 <underworld+0x5c>
			TIM2->ARR = underworld_melody[i];
 8002248:	4a57      	ldr	r2, [pc, #348]	; (80023a8 <underworld+0x17c>)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8002256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002260:	4952      	ldr	r1, [pc, #328]	; (80023ac <underworld+0x180>)
 8002262:	fba1 1303 	umull	r1, r3, r1, r3
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(1500 / underworld_tempo[i]);
 800226a:	4a51      	ldr	r2, [pc, #324]	; (80023b0 <underworld+0x184>)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002272:	461a      	mov	r2, r3
 8002274:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002278:	fb93 f3f2 	sdiv	r3, r3, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f000 febb 	bl	8002ff8 <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3301      	adds	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b09      	cmp	r3, #9
 800228c:	dddc      	ble.n	8002248 <underworld+0x1c>
		}
	}
	if (longClick == 0) {
 800228e:	4b45      	ldr	r3, [pc, #276]	; (80023a4 <underworld+0x178>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d125      	bne.n	80022e2 <underworld+0xb6>
		for (int i = 10; i < 20; i++) {
 8002296:	230a      	movs	r3, #10
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	e01f      	b.n	80022dc <underworld+0xb0>
			TIM2->ARR = underworld_melody[i];
 800229c:	4a42      	ldr	r2, [pc, #264]	; (80023a8 <underworld+0x17c>)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80022a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 80022aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b4:	493d      	ldr	r1, [pc, #244]	; (80023ac <underworld+0x180>)
 80022b6:	fba1 1303 	umull	r1, r3, r1, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(1500 / underworld_tempo[i]);
 80022be:	4a3c      	ldr	r2, [pc, #240]	; (80023b0 <underworld+0x184>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80022cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fe91 	bl	8002ff8 <HAL_Delay>
		for (int i = 10; i < 20; i++) {
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	3301      	adds	r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b13      	cmp	r3, #19
 80022e0:	dddc      	ble.n	800229c <underworld+0x70>
		}
	}
	if (longClick == 0) {
 80022e2:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <underworld+0x178>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d125      	bne.n	8002336 <underworld+0x10a>
		for (int i = 20; i < 30; i++) {
 80022ea:	2314      	movs	r3, #20
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	e01f      	b.n	8002330 <underworld+0x104>
			TIM2->ARR = underworld_melody[i];
 80022f0:	4a2d      	ldr	r2, [pc, #180]	; (80023a8 <underworld+0x17c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80022f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 80022fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002308:	4928      	ldr	r1, [pc, #160]	; (80023ac <underworld+0x180>)
 800230a:	fba1 1303 	umull	r1, r3, r1, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(1500 / underworld_tempo[i]);
 8002312:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <underworld+0x184>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800231a:	461a      	mov	r2, r3
 800231c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002320:	fb93 f3f2 	sdiv	r3, r3, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fe67 	bl	8002ff8 <HAL_Delay>
		for (int i = 20; i < 30; i++) {
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3301      	adds	r3, #1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b1d      	cmp	r3, #29
 8002334:	dddc      	ble.n	80022f0 <underworld+0xc4>
		}
	}
	if (longClick == 0) {
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <underworld+0x178>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d128      	bne.n	8002390 <underworld+0x164>
		for (int i = 30; i < underworld_length; i++) {
 800233e:	231e      	movs	r3, #30
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	e01f      	b.n	8002384 <underworld+0x158>
			TIM2->ARR = underworld_melody[i];
 8002344:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <underworld+0x17c>)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800234c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8002352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800235c:	4913      	ldr	r1, [pc, #76]	; (80023ac <underworld+0x180>)
 800235e:	fba1 1303 	umull	r1, r3, r1, r3
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(1500 / underworld_tempo[i]);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <underworld+0x184>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800236e:	461a      	mov	r2, r3
 8002370:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002374:	fb93 f3f2 	sdiv	r3, r3, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fe3d 	bl	8002ff8 <HAL_Delay>
		for (int i = 30; i < underworld_length; i++) {
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <underworld+0x188>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	4293      	cmp	r3, r2
 800238e:	dbd9      	blt.n	8002344 <underworld+0x118>
		}
	}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002390:	2100      	movs	r1, #0
 8002392:	4803      	ldr	r0, [pc, #12]	; (80023a0 <underworld+0x174>)
 8002394:	f004 f9b4 	bl	8006700 <HAL_TIM_PWM_Stop>
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000480 	.word	0x20000480
 80023a4:	200003cc 	.word	0x200003cc
 80023a8:	20000170 	.word	0x20000170
 80023ac:	1b4e81b5 	.word	0x1b4e81b5
 80023b0:	200001e0 	.word	0x200001e0
 80023b4:	20000250 	.word	0x20000250

080023b8 <GetSector>:

//********************************************************** flash

static uint32_t GetSector(uint32_t Address) {
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]

	if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a82      	ldr	r2, [pc, #520]	; (80025d0 <GetSector+0x218>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d206      	bcs.n	80023da <GetSector+0x22>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d2:	d302      	bcc.n	80023da <GetSector+0x22>
		sector = FLASH_SECTOR_0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e0f3      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a7d      	ldr	r2, [pc, #500]	; (80025d4 <GetSector+0x21c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d206      	bcs.n	80023f0 <GetSector+0x38>
			&& (Address >= ADDR_FLASH_SECTOR_1)) {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a7a      	ldr	r2, [pc, #488]	; (80025d0 <GetSector+0x218>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d302      	bcc.n	80023f0 <GetSector+0x38>
		sector = FLASH_SECTOR_1;
 80023ea:	2301      	movs	r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e0e8      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_3)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a79      	ldr	r2, [pc, #484]	; (80025d8 <GetSector+0x220>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d206      	bcs.n	8002406 <GetSector+0x4e>
			&& (Address >= ADDR_FLASH_SECTOR_2)) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a76      	ldr	r2, [pc, #472]	; (80025d4 <GetSector+0x21c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d302      	bcc.n	8002406 <GetSector+0x4e>
		sector = FLASH_SECTOR_2;
 8002400:	2302      	movs	r3, #2
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e0dd      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_4)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a74      	ldr	r2, [pc, #464]	; (80025dc <GetSector+0x224>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d806      	bhi.n	800241c <GetSector+0x64>
			&& (Address >= ADDR_FLASH_SECTOR_3)) {
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a71      	ldr	r2, [pc, #452]	; (80025d8 <GetSector+0x220>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d302      	bcc.n	800241c <GetSector+0x64>
		sector = FLASH_SECTOR_3;
 8002416:	2303      	movs	r3, #3
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e0d2      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_5)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a70      	ldr	r2, [pc, #448]	; (80025e0 <GetSector+0x228>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d806      	bhi.n	8002432 <GetSector+0x7a>
			&& (Address >= ADDR_FLASH_SECTOR_4)) {
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a6d      	ldr	r2, [pc, #436]	; (80025dc <GetSector+0x224>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d902      	bls.n	8002432 <GetSector+0x7a>
		sector = FLASH_SECTOR_4;
 800242c:	2304      	movs	r3, #4
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e0c7      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_6)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a6b      	ldr	r2, [pc, #428]	; (80025e4 <GetSector+0x22c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d806      	bhi.n	8002448 <GetSector+0x90>
			&& (Address >= ADDR_FLASH_SECTOR_5)) {
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a68      	ldr	r2, [pc, #416]	; (80025e0 <GetSector+0x228>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d902      	bls.n	8002448 <GetSector+0x90>
		sector = FLASH_SECTOR_5;
 8002442:	2305      	movs	r3, #5
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e0bc      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_7)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a67      	ldr	r2, [pc, #412]	; (80025e8 <GetSector+0x230>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d806      	bhi.n	800245e <GetSector+0xa6>
			&& (Address >= ADDR_FLASH_SECTOR_6)) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a64      	ldr	r2, [pc, #400]	; (80025e4 <GetSector+0x22c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d902      	bls.n	800245e <GetSector+0xa6>
		sector = FLASH_SECTOR_6;
 8002458:	2306      	movs	r3, #6
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e0b1      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_8)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a62      	ldr	r2, [pc, #392]	; (80025ec <GetSector+0x234>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d806      	bhi.n	8002474 <GetSector+0xbc>
			&& (Address >= ADDR_FLASH_SECTOR_7)) {
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a5f      	ldr	r2, [pc, #380]	; (80025e8 <GetSector+0x230>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d902      	bls.n	8002474 <GetSector+0xbc>
		sector = FLASH_SECTOR_7;
 800246e:	2307      	movs	r3, #7
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e0a6      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_9)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a5e      	ldr	r2, [pc, #376]	; (80025f0 <GetSector+0x238>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d806      	bhi.n	800248a <GetSector+0xd2>
			&& (Address >= ADDR_FLASH_SECTOR_8)) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a5b      	ldr	r2, [pc, #364]	; (80025ec <GetSector+0x234>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d902      	bls.n	800248a <GetSector+0xd2>
		sector = FLASH_SECTOR_8;
 8002484:	2308      	movs	r3, #8
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e09b      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_10)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a59      	ldr	r2, [pc, #356]	; (80025f4 <GetSector+0x23c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d806      	bhi.n	80024a0 <GetSector+0xe8>
			&& (Address >= ADDR_FLASH_SECTOR_9)) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a56      	ldr	r2, [pc, #344]	; (80025f0 <GetSector+0x238>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d902      	bls.n	80024a0 <GetSector+0xe8>
		sector = FLASH_SECTOR_9;
 800249a:	2309      	movs	r3, #9
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	e090      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_11)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a55      	ldr	r2, [pc, #340]	; (80025f8 <GetSector+0x240>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d806      	bhi.n	80024b6 <GetSector+0xfe>
			&& (Address >= ADDR_FLASH_SECTOR_10)) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a52      	ldr	r2, [pc, #328]	; (80025f4 <GetSector+0x23c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d902      	bls.n	80024b6 <GetSector+0xfe>
		sector = FLASH_SECTOR_10;
 80024b0:	230a      	movs	r3, #10
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	e085      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_12)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80024bc:	d206      	bcs.n	80024cc <GetSector+0x114>
			&& (Address >= ADDR_FLASH_SECTOR_11)) {
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4d      	ldr	r2, [pc, #308]	; (80025f8 <GetSector+0x240>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d902      	bls.n	80024cc <GetSector+0x114>
		sector = FLASH_SECTOR_11;
 80024c6:	230b      	movs	r3, #11
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	e07a      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_13)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a4b      	ldr	r2, [pc, #300]	; (80025fc <GetSector+0x244>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d206      	bcs.n	80024e2 <GetSector+0x12a>
			&& (Address >= ADDR_FLASH_SECTOR_12)) {
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80024da:	d302      	bcc.n	80024e2 <GetSector+0x12a>
		sector = FLASH_SECTOR_12;
 80024dc:	230c      	movs	r3, #12
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	e06f      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_14)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a46      	ldr	r2, [pc, #280]	; (8002600 <GetSector+0x248>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d206      	bcs.n	80024f8 <GetSector+0x140>
			&& (Address >= ADDR_FLASH_SECTOR_13)) {
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a43      	ldr	r2, [pc, #268]	; (80025fc <GetSector+0x244>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d302      	bcc.n	80024f8 <GetSector+0x140>
		sector = FLASH_SECTOR_13;
 80024f2:	230d      	movs	r3, #13
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	e064      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_15)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a42      	ldr	r2, [pc, #264]	; (8002604 <GetSector+0x24c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d206      	bcs.n	800250e <GetSector+0x156>
			&& (Address >= ADDR_FLASH_SECTOR_14)) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3f      	ldr	r2, [pc, #252]	; (8002600 <GetSector+0x248>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d302      	bcc.n	800250e <GetSector+0x156>
		sector = FLASH_SECTOR_14;
 8002508:	230e      	movs	r3, #14
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e059      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_16)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a3d      	ldr	r2, [pc, #244]	; (8002608 <GetSector+0x250>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d806      	bhi.n	8002524 <GetSector+0x16c>
			&& (Address >= ADDR_FLASH_SECTOR_15)) {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <GetSector+0x24c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d302      	bcc.n	8002524 <GetSector+0x16c>
		sector = FLASH_SECTOR_15;
 800251e:	230f      	movs	r3, #15
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e04e      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_17)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a39      	ldr	r2, [pc, #228]	; (800260c <GetSector+0x254>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d806      	bhi.n	800253a <GetSector+0x182>
			&& (Address >= ADDR_FLASH_SECTOR_16)) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a36      	ldr	r2, [pc, #216]	; (8002608 <GetSector+0x250>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d902      	bls.n	800253a <GetSector+0x182>
		sector = FLASH_SECTOR_16;
 8002534:	2310      	movs	r3, #16
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e043      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_18)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a34      	ldr	r2, [pc, #208]	; (8002610 <GetSector+0x258>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d806      	bhi.n	8002550 <GetSector+0x198>
			&& (Address >= ADDR_FLASH_SECTOR_17)) {
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a31      	ldr	r2, [pc, #196]	; (800260c <GetSector+0x254>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d902      	bls.n	8002550 <GetSector+0x198>
		sector = FLASH_SECTOR_17;
 800254a:	2311      	movs	r3, #17
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e038      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_19)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a30      	ldr	r2, [pc, #192]	; (8002614 <GetSector+0x25c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d806      	bhi.n	8002566 <GetSector+0x1ae>
			&& (Address >= ADDR_FLASH_SECTOR_18)) {
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a2d      	ldr	r2, [pc, #180]	; (8002610 <GetSector+0x258>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d902      	bls.n	8002566 <GetSector+0x1ae>
		sector = FLASH_SECTOR_18;
 8002560:	2312      	movs	r3, #18
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e02d      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_20)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a2b      	ldr	r2, [pc, #172]	; (8002618 <GetSector+0x260>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d806      	bhi.n	800257c <GetSector+0x1c4>
			&& (Address >= ADDR_FLASH_SECTOR_19)) {
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a28      	ldr	r2, [pc, #160]	; (8002614 <GetSector+0x25c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d902      	bls.n	800257c <GetSector+0x1c4>
		sector = FLASH_SECTOR_19;
 8002576:	2313      	movs	r3, #19
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e022      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_21)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <GetSector+0x264>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d806      	bhi.n	8002592 <GetSector+0x1da>
			&& (Address >= ADDR_FLASH_SECTOR_20)) {
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a24      	ldr	r2, [pc, #144]	; (8002618 <GetSector+0x260>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d902      	bls.n	8002592 <GetSector+0x1da>
		sector = FLASH_SECTOR_20;
 800258c:	2314      	movs	r3, #20
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e017      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_22)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a22      	ldr	r2, [pc, #136]	; (8002620 <GetSector+0x268>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d806      	bhi.n	80025a8 <GetSector+0x1f0>
			&& (Address >= ADDR_FLASH_SECTOR_21)) {
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a1f      	ldr	r2, [pc, #124]	; (800261c <GetSector+0x264>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d902      	bls.n	80025a8 <GetSector+0x1f0>
		sector = FLASH_SECTOR_21;
 80025a2:	2315      	movs	r3, #21
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e00c      	b.n	80025c2 <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_23)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a1e      	ldr	r2, [pc, #120]	; (8002624 <GetSector+0x26c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d806      	bhi.n	80025be <GetSector+0x206>
			&& (Address >= ADDR_FLASH_SECTOR_22)) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <GetSector+0x268>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d902      	bls.n	80025be <GetSector+0x206>
		sector = FLASH_SECTOR_22;
 80025b8:	2316      	movs	r3, #22
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e001      	b.n	80025c2 <GetSector+0x20a>
	} else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
	{
		sector = FLASH_SECTOR_23;
 80025be:	2317      	movs	r3, #23
 80025c0:	60fb      	str	r3, [r7, #12]
	}
	return sector;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	08004000 	.word	0x08004000
 80025d4:	08008000 	.word	0x08008000
 80025d8:	0800c000 	.word	0x0800c000
 80025dc:	0800ffff 	.word	0x0800ffff
 80025e0:	0801ffff 	.word	0x0801ffff
 80025e4:	0803ffff 	.word	0x0803ffff
 80025e8:	0805ffff 	.word	0x0805ffff
 80025ec:	0807ffff 	.word	0x0807ffff
 80025f0:	0809ffff 	.word	0x0809ffff
 80025f4:	080bffff 	.word	0x080bffff
 80025f8:	080dffff 	.word	0x080dffff
 80025fc:	08104000 	.word	0x08104000
 8002600:	08108000 	.word	0x08108000
 8002604:	0810c000 	.word	0x0810c000
 8002608:	0810ffff 	.word	0x0810ffff
 800260c:	0811ffff 	.word	0x0811ffff
 8002610:	0813ffff 	.word	0x0813ffff
 8002614:	0815ffff 	.word	0x0815ffff
 8002618:	0817ffff 	.word	0x0817ffff
 800261c:	0819ffff 	.word	0x0819ffff
 8002620:	081bffff 	.word	0x081bffff
 8002624:	081dffff 	.word	0x081dffff

08002628 <PlayToAlarm>:

void PlayToAlarm(){
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	if(melody_number == 1)
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <PlayToAlarm+0x24>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <PlayToAlarm+0x12>
		Bicyclemelody();
 8002634:	f7ff fcf8 	bl	8002028 <Bicyclemelody>
	else if(melody_number == 2)
		underworld();
}
 8002638:	e005      	b.n	8002646 <PlayToAlarm+0x1e>
	else if(melody_number == 2)
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <PlayToAlarm+0x24>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d101      	bne.n	8002646 <PlayToAlarm+0x1e>
		underworld();
 8002642:	f7ff fdf3 	bl	800222c <underworld>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000434 	.word	0x20000434

08002650 <SetUpflash>:
void SetUpflash() {
 8002650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0

	flashTime.alarmFormat = at.f;
 8002658:	4b31      	ldr	r3, [pc, #196]	; (8002720 <SetUpflash+0xd0>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	4a31      	ldr	r2, [pc, #196]	; (8002724 <SetUpflash+0xd4>)
 800265e:	71d3      	strb	r3, [r2, #7]
	flashTime.alarmHour = at.h;
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <SetUpflash+0xd0>)
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <SetUpflash+0xd4>)
 8002666:	7213      	strb	r3, [r2, #8]
	flashTime.alarmMinutes = at.m;
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <SetUpflash+0xd0>)
 800266a:	789b      	ldrb	r3, [r3, #2]
 800266c:	4a2d      	ldr	r2, [pc, #180]	; (8002724 <SetUpflash+0xd4>)
 800266e:	7253      	strb	r3, [r2, #9]
	flashTime.alarmSeconds = at.s;
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <SetUpflash+0xd0>)
 8002672:	78db      	ldrb	r3, [r3, #3]
 8002674:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <SetUpflash+0xd4>)
 8002676:	7293      	strb	r3, [r2, #10]

	HAL_FLASH_Unlock();
 8002678:	f001 fa5e 	bl	8003b38 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800267c:	492a      	ldr	r1, [pc, #168]	; (8002728 <SetUpflash+0xd8>)
 800267e:	482b      	ldr	r0, [pc, #172]	; (800272c <SetUpflash+0xdc>)
 8002680:	f001 fbcc 	bl	8003e1c <HAL_FLASHEx_Erase>

	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100014),
			flashTime.alarmFormat);
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <SetUpflash+0xd4>)
 8002686:	79db      	ldrb	r3, [r3, #7]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100014),
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2200      	movs	r2, #0
 800268c:	461c      	mov	r4, r3
 800268e:	4615      	mov	r5, r2
 8002690:	4622      	mov	r2, r4
 8002692:	462b      	mov	r3, r5
 8002694:	4926      	ldr	r1, [pc, #152]	; (8002730 <SetUpflash+0xe0>)
 8002696:	2002      	movs	r0, #2
 8002698:	f001 f9fa 	bl	8003a90 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100018),
			flashTime.alarmHour);
 800269c:	4b21      	ldr	r3, [pc, #132]	; (8002724 <SetUpflash+0xd4>)
 800269e:	7a1b      	ldrb	r3, [r3, #8]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100018),
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	4698      	mov	r8, r3
 80026a6:	4691      	mov	r9, r2
 80026a8:	4642      	mov	r2, r8
 80026aa:	464b      	mov	r3, r9
 80026ac:	4921      	ldr	r1, [pc, #132]	; (8002734 <SetUpflash+0xe4>)
 80026ae:	2002      	movs	r0, #2
 80026b0:	f001 f9ee 	bl	8003a90 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x0810001C),
			flashTime.alarmMinutes);
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <SetUpflash+0xd4>)
 80026b6:	7a5b      	ldrb	r3, [r3, #9]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x0810001C),
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2200      	movs	r2, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	617a      	str	r2, [r7, #20]
 80026c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026c4:	491c      	ldr	r1, [pc, #112]	; (8002738 <SetUpflash+0xe8>)
 80026c6:	2002      	movs	r0, #2
 80026c8:	f001 f9e2 	bl	8003a90 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100020),
			flashTime.alarmSeconds);
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <SetUpflash+0xd4>)
 80026ce:	7a9b      	ldrb	r3, [r3, #10]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100020),
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2200      	movs	r2, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	60fa      	str	r2, [r7, #12]
 80026d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026dc:	4917      	ldr	r1, [pc, #92]	; (800273c <SetUpflash+0xec>)
 80026de:	2002      	movs	r0, #2
 80026e0:	f001 f9d6 	bl	8003a90 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100024),
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <SetUpflash+0xf0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	17da      	asrs	r2, r3, #31
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026f2:	4914      	ldr	r1, [pc, #80]	; (8002744 <SetUpflash+0xf4>)
 80026f4:	2002      	movs	r0, #2
 80026f6:	f001 f9cb 	bl	8003a90 <HAL_FLASH_Program>
			alarmMode );

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100028),
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <SetUpflash+0xf8>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2200      	movs	r2, #0
 8002702:	469a      	mov	sl, r3
 8002704:	4693      	mov	fp, r2
 8002706:	4652      	mov	r2, sl
 8002708:	465b      	mov	r3, fp
 800270a:	4910      	ldr	r1, [pc, #64]	; (800274c <SetUpflash+0xfc>)
 800270c:	2002      	movs	r0, #2
 800270e:	f001 f9bf 	bl	8003a90 <HAL_FLASH_Program>
			melody_number );

	HAL_FLASH_Lock();
 8002712:	f001 fa33 	bl	8003b7c <HAL_FLASH_Lock>

}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002720:	20000430 	.word	0x20000430
 8002724:	2000037c 	.word	0x2000037c
 8002728:	20000458 	.word	0x20000458
 800272c:	20000438 	.word	0x20000438
 8002730:	08100014 	.word	0x08100014
 8002734:	08100018 	.word	0x08100018
 8002738:	0810001c 	.word	0x0810001c
 800273c:	08100020 	.word	0x08100020
 8002740:	20000000 	.word	0x20000000
 8002744:	08100024 	.word	0x08100024
 8002748:	20000434 	.word	0x20000434
 800274c:	08100028 	.word	0x08100028

08002750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
}
 8002756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002758:	e7fe      	b.n	8002758 <Error_Handler+0x8>
	...

0800275c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002770:	2300      	movs	r3, #0
 8002772:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <MX_RTC_Init+0xb0>)
 8002776:	4a26      	ldr	r2, [pc, #152]	; (8002810 <MX_RTC_Init+0xb4>)
 8002778:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <MX_RTC_Init+0xb0>)
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <MX_RTC_Init+0xb0>)
 8002782:	227f      	movs	r2, #127	; 0x7f
 8002784:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002786:	4b21      	ldr	r3, [pc, #132]	; (800280c <MX_RTC_Init+0xb0>)
 8002788:	22ff      	movs	r2, #255	; 0xff
 800278a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800278c:	4b1f      	ldr	r3, [pc, #124]	; (800280c <MX_RTC_Init+0xb0>)
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <MX_RTC_Init+0xb0>)
 8002794:	2200      	movs	r2, #0
 8002796:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002798:	4b1c      	ldr	r3, [pc, #112]	; (800280c <MX_RTC_Init+0xb0>)
 800279a:	2200      	movs	r2, #0
 800279c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800279e:	481b      	ldr	r0, [pc, #108]	; (800280c <MX_RTC_Init+0xb0>)
 80027a0:	f003 face 	bl	8005d40 <HAL_RTC_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80027aa:	f7ff ffd1 	bl	8002750 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80027ba:	2300      	movs	r3, #0
 80027bc:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	2200      	movs	r2, #0
 80027ca:	4619      	mov	r1, r3
 80027cc:	480f      	ldr	r0, [pc, #60]	; (800280c <MX_RTC_Init+0xb0>)
 80027ce:	f003 fb2d 	bl	8005e2c <HAL_RTC_SetTime>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_RTC_Init+0x80>
  {
    Error_Handler();
 80027d8:	f7ff ffba 	bl	8002750 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80027dc:	2301      	movs	r3, #1
 80027de:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80027e0:	2301      	movs	r3, #1
 80027e2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80027e4:	2301      	movs	r3, #1
 80027e6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80027ec:	463b      	mov	r3, r7
 80027ee:	2200      	movs	r2, #0
 80027f0:	4619      	mov	r1, r3
 80027f2:	4806      	ldr	r0, [pc, #24]	; (800280c <MX_RTC_Init+0xb0>)
 80027f4:	f003 fc12 	bl	800601c <HAL_RTC_SetDate>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80027fe:	f7ff ffa7 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	2000045c 	.word	0x2000045c
 8002810:	40002800 	.word	0x40002800

08002814 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08e      	sub	sp, #56	; 0x38
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800281c:	f107 0308 	add.w	r3, r7, #8
 8002820:	2230      	movs	r2, #48	; 0x30
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f005 fed7 	bl	80085d8 <memset>
  if(rtcHandle->Instance==RTC)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <HAL_RTC_MspInit+0x4c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d111      	bne.n	8002858 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002834:	2320      	movs	r3, #32
 8002836:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	4618      	mov	r0, r3
 8002844:	f003 f8bc 	bl	80059c0 <HAL_RCCEx_PeriphCLKConfig>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800284e:	f7ff ff7f 	bl	8002750 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <HAL_RTC_MspInit+0x50>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002858:	bf00      	nop
 800285a:	3738      	adds	r7, #56	; 0x38
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40002800 	.word	0x40002800
 8002864:	42470e3c 	.word	0x42470e3c

08002868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_MspInit+0x4c>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <HAL_MspInit+0x4c>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287c:	6453      	str	r3, [r2, #68]	; 0x44
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_MspInit+0x4c>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_MspInit+0x4c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <HAL_MspInit+0x4c>)
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002898:	6413      	str	r3, [r2, #64]	; 0x40
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_MspInit+0x4c>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800

080028b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <NMI_Handler+0x4>

080028be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c2:	e7fe      	b.n	80028c2 <HardFault_Handler+0x4>

080028c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <MemManage_Handler+0x4>

080028ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <BusFault_Handler+0x4>

080028d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <UsageFault_Handler+0x4>

080028d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002904:	f000 fb58 	bl	8002fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}

0800290c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <TIM3_IRQHandler+0x10>)
 8002912:	f003 ff65 	bl	80067e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200004c8 	.word	0x200004c8

08002920 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <USART3_IRQHandler+0x10>)
 8002926:	f004 fec5 	bl	80076b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000554 	.word	0x20000554

08002934 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002938:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800293c:	f001 fd8c 	bl	8004458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}

08002944 <_read>:
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e00a      	b.n	800296c <_read+0x28>
 8002956:	f3af 8000 	nop.w
 800295a:	4601      	mov	r1, r0
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	60ba      	str	r2, [r7, #8]
 8002962:	b2ca      	uxtb	r2, r1
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbf0      	blt.n	8002956 <_read+0x12>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_write>:
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e009      	b.n	80029a4 <_write+0x26>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	60ba      	str	r2, [r7, #8]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f3af 8000 	nop.w
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dbf1      	blt.n	8002990 <_write+0x12>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_close>:
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <_fstat>:
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	2300      	movs	r3, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_isatty>:
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	2301      	movs	r3, #1
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_lseek>:
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	2300      	movs	r3, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <_sbrk>:
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <_sbrk+0x5c>)
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <_sbrk+0x60>)
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <_sbrk+0x22>
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <_sbrk+0x64>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <_sbrk+0x68>)
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d207      	bcs.n	8002a60 <_sbrk+0x40>
 8002a50:	f005 fd98 	bl	8008584 <__errno>
 8002a54:	4603      	mov	r3, r0
 8002a56:	220c      	movs	r2, #12
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e009      	b.n	8002a74 <_sbrk+0x54>
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <_sbrk+0x64>)
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20030000 	.word	0x20030000
 8002a80:	00000400 	.word	0x00000400
 8002a84:	2000047c 	.word	0x2000047c
 8002a88:	200005d0 	.word	0x200005d0

08002a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <SystemInit+0x20>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <SystemInit+0x20>)
 8002a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08e      	sub	sp, #56	; 0x38
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac4:	f107 0320 	add.w	r3, r7, #32
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
 8002adc:	615a      	str	r2, [r3, #20]
 8002ade:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002aea:	22b3      	movs	r2, #179	; 0xb3
 8002aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002aee:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002af0:	2210      	movs	r2, #16
 8002af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002af6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002afa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afc:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b08:	4823      	ldr	r0, [pc, #140]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b0a:	f003 fc17 	bl	800633c <HAL_TIM_Base_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002b14:	f7ff fe1c 	bl	8002750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b22:	4619      	mov	r1, r3
 8002b24:	481c      	ldr	r0, [pc, #112]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b26:	f004 f825 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002b30:	f7ff fe0e 	bl	8002750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b34:	4818      	ldr	r0, [pc, #96]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b36:	f003 fcc1 	bl	80064bc <HAL_TIM_PWM_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002b40:	f7ff fe06 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b4c:	f107 0320 	add.w	r3, r7, #32
 8002b50:	4619      	mov	r1, r3
 8002b52:	4811      	ldr	r0, [pc, #68]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b54:	f004 fc0e 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002b5e:	f7ff fdf7 	bl	8002750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b62:	2360      	movs	r3, #96	; 0x60
 8002b64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	2200      	movs	r2, #0
 8002b76:	4619      	mov	r1, r3
 8002b78:	4807      	ldr	r0, [pc, #28]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b7a:	f003 ff39 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002b84:	f7ff fde4 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b88:	4803      	ldr	r0, [pc, #12]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b8a:	f000 f891 	bl	8002cb0 <HAL_TIM_MspPostInit>

}
 8002b8e:	bf00      	nop
 8002b90:	3738      	adds	r7, #56	; 0x38
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000480 	.word	0x20000480

08002b9c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ba2:	f107 0308 	add.w	r3, r7, #8
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <MX_TIM3_Init+0x94>)
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <MX_TIM3_Init+0x98>)
 8002bbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <MX_TIM3_Init+0x94>)
 8002bc0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <MX_TIM3_Init+0x94>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 8002bcc:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <MX_TIM3_Init+0x94>)
 8002bce:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002bd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <MX_TIM3_Init+0x94>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <MX_TIM3_Init+0x94>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002be0:	4813      	ldr	r0, [pc, #76]	; (8002c30 <MX_TIM3_Init+0x94>)
 8002be2:	f003 fbab 	bl	800633c <HAL_TIM_Base_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002bec:	f7ff fdb0 	bl	8002750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	480c      	ldr	r0, [pc, #48]	; (8002c30 <MX_TIM3_Init+0x94>)
 8002bfe:	f003 ffb9 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002c08:	f7ff fda2 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c14:	463b      	mov	r3, r7
 8002c16:	4619      	mov	r1, r3
 8002c18:	4805      	ldr	r0, [pc, #20]	; (8002c30 <MX_TIM3_Init+0x94>)
 8002c1a:	f004 fbab 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002c24:	f7ff fd94 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200004c8 	.word	0x200004c8
 8002c34:	40000400 	.word	0x40000400

08002c38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_TIM_Base_MspInit+0x70>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <HAL_TIM_Base_MspInit+0x70>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <HAL_TIM_Base_MspInit+0x70>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c66:	e01a      	b.n	8002c9e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0f      	ldr	r2, [pc, #60]	; (8002cac <HAL_TIM_Base_MspInit+0x74>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d115      	bne.n	8002c9e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <HAL_TIM_Base_MspInit+0x70>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <HAL_TIM_Base_MspInit+0x70>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	6413      	str	r3, [r2, #64]	; 0x40
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_TIM_Base_MspInit+0x70>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	201d      	movs	r0, #29
 8002c94:	f000 fe33 	bl	80038fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c98:	201d      	movs	r0, #29
 8002c9a:	f000 fe4c 	bl	8003936 <HAL_NVIC_EnableIRQ>
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40000400 	.word	0x40000400

08002cb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 030c 	add.w	r3, r7, #12
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd0:	d11d      	bne.n	8002d0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_TIM_MspPostInit+0x68>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_TIM_MspPostInit+0x68>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_TIM_MspPostInit+0x68>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	4619      	mov	r1, r3
 8002d08:	4804      	ldr	r0, [pc, #16]	; (8002d1c <HAL_TIM_MspPostInit+0x6c>)
 8002d0a:	f001 f9c7 	bl	800409c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d0e:	bf00      	nop
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40020000 	.word	0x40020000

08002d20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <MX_USART2_UART_Init+0x50>)
 8002d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d46:	220c      	movs	r2, #12
 8002d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d58:	f004 fb9c 	bl	8007494 <HAL_UART_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d62:	f7ff fcf5 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000510 	.word	0x20000510
 8002d70:	40004400 	.word	0x40004400

08002d74 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <MX_USART3_UART_Init+0x50>)
 8002d7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002daa:	4805      	ldr	r0, [pc, #20]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002dac:	f004 fb72 	bl	8007494 <HAL_UART_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002db6:	f7ff fccb 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000554 	.word	0x20000554
 8002dc4:	40004800 	.word	0x40004800

08002dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08c      	sub	sp, #48	; 0x30
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 031c 	add.w	r3, r7, #28
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a32      	ldr	r2, [pc, #200]	; (8002eb0 <HAL_UART_MspInit+0xe8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d12c      	bne.n	8002e44 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a30      	ldr	r2, [pc, #192]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a29      	ldr	r2, [pc, #164]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e22:	2360      	movs	r3, #96	; 0x60
 8002e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e32:	2307      	movs	r3, #7
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e36:	f107 031c 	add.w	r3, r7, #28
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	481e      	ldr	r0, [pc, #120]	; (8002eb8 <HAL_UART_MspInit+0xf0>)
 8002e3e:	f001 f92d 	bl	800409c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e42:	e031      	b.n	8002ea8 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_UART_MspInit+0xf4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d12c      	bne.n	8002ea8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002e74:	f043 0308 	orr.w	r3, r3, #8
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_UART_MspInit+0xec>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e94:	2303      	movs	r3, #3
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e98:	2307      	movs	r3, #7
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <HAL_UART_MspInit+0xf0>)
 8002ea4:	f001 f8fa 	bl	800409c <HAL_GPIO_Init>
}
 8002ea8:	bf00      	nop
 8002eaa:	3730      	adds	r7, #48	; 0x30
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40004400 	.word	0x40004400
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020c00 	.word	0x40020c00
 8002ebc:	40004800 	.word	0x40004800

08002ec0 <Reset_Handler>:
 8002ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef8 <LoopFillZerobss+0x12>
 8002ec4:	480d      	ldr	r0, [pc, #52]	; (8002efc <LoopFillZerobss+0x16>)
 8002ec6:	490e      	ldr	r1, [pc, #56]	; (8002f00 <LoopFillZerobss+0x1a>)
 8002ec8:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <LoopFillZerobss+0x1e>)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e002      	b.n	8002ed4 <LoopCopyDataInit>

08002ece <CopyDataInit>:
 8002ece:	58d4      	ldr	r4, [r2, r3]
 8002ed0:	50c4      	str	r4, [r0, r3]
 8002ed2:	3304      	adds	r3, #4

08002ed4 <LoopCopyDataInit>:
 8002ed4:	18c4      	adds	r4, r0, r3
 8002ed6:	428c      	cmp	r4, r1
 8002ed8:	d3f9      	bcc.n	8002ece <CopyDataInit>
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <LoopFillZerobss+0x22>)
 8002edc:	4c0b      	ldr	r4, [pc, #44]	; (8002f0c <LoopFillZerobss+0x26>)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e001      	b.n	8002ee6 <LoopFillZerobss>

08002ee2 <FillZerobss>:
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	3204      	adds	r2, #4

08002ee6 <LoopFillZerobss>:
 8002ee6:	42a2      	cmp	r2, r4
 8002ee8:	d3fb      	bcc.n	8002ee2 <FillZerobss>
 8002eea:	f7ff fdcf 	bl	8002a8c <SystemInit>
 8002eee:	f005 fb4f 	bl	8008590 <__libc_init_array>
 8002ef2:	f7fd fce5 	bl	80008c0 <main>
 8002ef6:	4770      	bx	lr
 8002ef8:	20030000 	.word	0x20030000
 8002efc:	20000000 	.word	0x20000000
 8002f00:	200002c4 	.word	0x200002c4
 8002f04:	08009c58 	.word	0x08009c58
 8002f08:	200002c4 	.word	0x200002c4
 8002f0c:	200005cc 	.word	0x200005cc

08002f10 <ADC_IRQHandler>:
 8002f10:	e7fe      	b.n	8002f10 <ADC_IRQHandler>
	...

08002f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <HAL_Init+0x40>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <HAL_Init+0x40>)
 8002f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <HAL_Init+0x40>)
 8002f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <HAL_Init+0x40>)
 8002f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f3c:	2003      	movs	r0, #3
 8002f3e:	f000 fcd3 	bl	80038e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f42:	200f      	movs	r0, #15
 8002f44:	f000 f808 	bl	8002f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f48:	f7ff fc8e 	bl	8002868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023c00 	.word	0x40023c00

08002f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_InitTick+0x54>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_InitTick+0x58>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fceb 	bl	8003952 <HAL_SYSTICK_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e00e      	b.n	8002fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b0f      	cmp	r3, #15
 8002f8a:	d80a      	bhi.n	8002fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	f000 fcb3 	bl	80038fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f98:	4a06      	ldr	r2, [pc, #24]	; (8002fb4 <HAL_InitTick+0x5c>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000254 	.word	0x20000254
 8002fb0:	2000025c 	.word	0x2000025c
 8002fb4:	20000258 	.word	0x20000258

08002fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_IncTick+0x20>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_IncTick+0x24>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <HAL_IncTick+0x24>)
 8002fca:	6013      	str	r3, [r2, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	2000025c 	.word	0x2000025c
 8002fdc:	20000598 	.word	0x20000598

08002fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_GetTick+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000598 	.word	0x20000598

08002ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7ff ffee 	bl	8002fe0 <HAL_GetTick>
 8003004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d005      	beq.n	800301e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_Delay+0x44>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800301e:	bf00      	nop
 8003020:	f7ff ffde 	bl	8002fe0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	429a      	cmp	r2, r3
 800302e:	d8f7      	bhi.n	8003020 <HAL_Delay+0x28>
  {
  }
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000025c 	.word	0x2000025c

08003040 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e033      	b.n	80030be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd faf2 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	d118      	bne.n	80030b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003086:	f023 0302 	bic.w	r3, r3, #2
 800308a:	f043 0202 	orr.w	r2, r3, #2
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fa5c 	bl	8003550 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
 80030ae:	e001      	b.n	80030b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_Start+0x1a>
 80030de:	2302      	movs	r3, #2
 80030e0:	e0b2      	b.n	8003248 <HAL_ADC_Start+0x180>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d018      	beq.n	800312a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003108:	4b52      	ldr	r3, [pc, #328]	; (8003254 <HAL_ADC_Start+0x18c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a52      	ldr	r2, [pc, #328]	; (8003258 <HAL_ADC_Start+0x190>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	0c9a      	lsrs	r2, r3, #18
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800311c:	e002      	b.n	8003124 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3b01      	subs	r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f9      	bne.n	800311e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d17a      	bne.n	800322e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003140:	f023 0301 	bic.w	r3, r3, #1
 8003144:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003162:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003176:	d106      	bne.n	8003186 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	f023 0206 	bic.w	r2, r3, #6
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	645a      	str	r2, [r3, #68]	; 0x44
 8003184:	e002      	b.n	800318c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003194:	4b31      	ldr	r3, [pc, #196]	; (800325c <HAL_ADC_Start+0x194>)
 8003196:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031a0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d12a      	bne.n	8003204 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2b      	ldr	r2, [pc, #172]	; (8003260 <HAL_ADC_Start+0x198>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d015      	beq.n	80031e4 <HAL_ADC_Start+0x11c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a29      	ldr	r2, [pc, #164]	; (8003264 <HAL_ADC_Start+0x19c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d105      	bne.n	80031ce <HAL_ADC_Start+0x106>
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <HAL_ADC_Start+0x194>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a25      	ldr	r2, [pc, #148]	; (8003268 <HAL_ADC_Start+0x1a0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d136      	bne.n	8003246 <HAL_ADC_Start+0x17e>
 80031d8:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_ADC_Start+0x194>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d130      	bne.n	8003246 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d129      	bne.n	8003246 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	e020      	b.n	8003246 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a15      	ldr	r2, [pc, #84]	; (8003260 <HAL_ADC_Start+0x198>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d11b      	bne.n	8003246 <HAL_ADC_Start+0x17e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d114      	bne.n	8003246 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	e00b      	b.n	8003246 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f043 0210 	orr.w	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	20000254 	.word	0x20000254
 8003258:	431bde83 	.word	0x431bde83
 800325c:	40012300 	.word	0x40012300
 8003260:	40012000 	.word	0x40012000
 8003264:	40012100 	.word	0x40012100
 8003268:	40012200 	.word	0x40012200

0800326c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_ADC_Stop+0x16>
 800327e:	2302      	movs	r3, #2
 8003280:	e021      	b.n	80032c6 <HAL_ADC_Stop+0x5a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d109      	bne.n	80032bc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1c>
 8003304:	2302      	movs	r3, #2
 8003306:	e113      	b.n	8003530 <HAL_ADC_ConfigChannel+0x244>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b09      	cmp	r3, #9
 8003316:	d925      	bls.n	8003364 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68d9      	ldr	r1, [r3, #12]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	3b1e      	subs	r3, #30
 800332e:	2207      	movs	r2, #7
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43da      	mvns	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	400a      	ands	r2, r1
 800333c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68d9      	ldr	r1, [r3, #12]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4618      	mov	r0, r3
 8003350:	4603      	mov	r3, r0
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4403      	add	r3, r0
 8003356:	3b1e      	subs	r3, #30
 8003358:	409a      	lsls	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	e022      	b.n	80033aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6919      	ldr	r1, [r3, #16]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	2207      	movs	r2, #7
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	400a      	ands	r2, r1
 8003386:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6919      	ldr	r1, [r3, #16]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	4618      	mov	r0, r3
 800339a:	4603      	mov	r3, r0
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4403      	add	r3, r0
 80033a0:	409a      	lsls	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d824      	bhi.n	80033fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	3b05      	subs	r3, #5
 80033c4:	221f      	movs	r2, #31
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	400a      	ands	r2, r1
 80033d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4618      	mov	r0, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	3b05      	subs	r3, #5
 80033ee:	fa00 f203 	lsl.w	r2, r0, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	635a      	str	r2, [r3, #52]	; 0x34
 80033fa:	e04c      	b.n	8003496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	d824      	bhi.n	800344e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	3b23      	subs	r3, #35	; 0x23
 8003416:	221f      	movs	r2, #31
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43da      	mvns	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	400a      	ands	r2, r1
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	4618      	mov	r0, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	3b23      	subs	r3, #35	; 0x23
 8003440:	fa00 f203 	lsl.w	r2, r0, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
 800344c:	e023      	b.n	8003496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	3b41      	subs	r3, #65	; 0x41
 8003460:	221f      	movs	r2, #31
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	400a      	ands	r2, r1
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	4618      	mov	r0, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	3b41      	subs	r3, #65	; 0x41
 800348a:	fa00 f203 	lsl.w	r2, r0, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003496:	4b29      	ldr	r3, [pc, #164]	; (800353c <HAL_ADC_ConfigChannel+0x250>)
 8003498:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a28      	ldr	r2, [pc, #160]	; (8003540 <HAL_ADC_ConfigChannel+0x254>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d10f      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x1d8>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b12      	cmp	r3, #18
 80034aa:	d10b      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <HAL_ADC_ConfigChannel+0x254>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d12b      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x23a>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1c      	ldr	r2, [pc, #112]	; (8003544 <HAL_ADC_ConfigChannel+0x258>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <HAL_ADC_ConfigChannel+0x1f4>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b11      	cmp	r3, #17
 80034de:	d122      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a11      	ldr	r2, [pc, #68]	; (8003544 <HAL_ADC_ConfigChannel+0x258>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d111      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_ADC_ConfigChannel+0x25c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a11      	ldr	r2, [pc, #68]	; (800354c <HAL_ADC_ConfigChannel+0x260>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	0c9a      	lsrs	r2, r3, #18
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003518:	e002      	b.n	8003520 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3b01      	subs	r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f9      	bne.n	800351a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40012300 	.word	0x40012300
 8003540:	40012000 	.word	0x40012000
 8003544:	10000012 	.word	0x10000012
 8003548:	20000254 	.word	0x20000254
 800354c:	431bde83 	.word	0x431bde83

08003550 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003558:	4b79      	ldr	r3, [pc, #484]	; (8003740 <ADC_Init+0x1f0>)
 800355a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	021a      	lsls	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6899      	ldr	r1, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	4a58      	ldr	r2, [pc, #352]	; (8003744 <ADC_Init+0x1f4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	e00f      	b.n	800364e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800363c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800364c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0202 	bic.w	r2, r2, #2
 800365c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7e1b      	ldrb	r3, [r3, #24]
 8003668:	005a      	lsls	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800369a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	3b01      	subs	r3, #1
 80036a8:	035a      	lsls	r2, r3, #13
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	e007      	b.n	80036c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	3b01      	subs	r3, #1
 80036e0:	051a      	lsls	r2, r3, #20
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6899      	ldr	r1, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003706:	025a      	lsls	r2, r3, #9
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6899      	ldr	r1, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	029a      	lsls	r2, r3, #10
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40012300 	.word	0x40012300
 8003744:	0f000001 	.word	0x0f000001

08003748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <__NVIC_SetPriorityGrouping+0x44>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003764:	4013      	ands	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377a:	4a04      	ldr	r2, [pc, #16]	; (800378c <__NVIC_SetPriorityGrouping+0x44>)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	60d3      	str	r3, [r2, #12]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	f003 0307 	and.w	r3, r3, #7
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	db0b      	blt.n	80037d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	f003 021f 	and.w	r2, r3, #31
 80037c4:	4907      	ldr	r1, [pc, #28]	; (80037e4 <__NVIC_EnableIRQ+0x38>)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2001      	movs	r0, #1
 80037ce:	fa00 f202 	lsl.w	r2, r0, r2
 80037d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000e100 	.word	0xe000e100

080037e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db0a      	blt.n	8003812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	490c      	ldr	r1, [pc, #48]	; (8003834 <__NVIC_SetPriority+0x4c>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	440b      	add	r3, r1
 800380c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003810:	e00a      	b.n	8003828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4908      	ldr	r1, [pc, #32]	; (8003838 <__NVIC_SetPriority+0x50>)
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3b04      	subs	r3, #4
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	440b      	add	r3, r1
 8003826:	761a      	strb	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000e100 	.word	0xe000e100
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f1c3 0307 	rsb	r3, r3, #7
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf28      	it	cs
 800385a:	2304      	movcs	r3, #4
 800385c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3304      	adds	r3, #4
 8003862:	2b06      	cmp	r3, #6
 8003864:	d902      	bls.n	800386c <NVIC_EncodePriority+0x30>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3b03      	subs	r3, #3
 800386a:	e000      	b.n	800386e <NVIC_EncodePriority+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	401a      	ands	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003884:	f04f 31ff 	mov.w	r1, #4294967295
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43d9      	mvns	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	4313      	orrs	r3, r2
         );
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	; 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b4:	d301      	bcc.n	80038ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00f      	b.n	80038da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ba:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <SysTick_Config+0x40>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c2:	210f      	movs	r1, #15
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	f7ff ff8e 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <SysTick_Config+0x40>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <SysTick_Config+0x40>)
 80038d4:	2207      	movs	r2, #7
 80038d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000e010 	.word	0xe000e010

080038e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff29 	bl	8003748 <__NVIC_SetPriorityGrouping>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003910:	f7ff ff3e 	bl	8003790 <__NVIC_GetPriorityGrouping>
 8003914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	6978      	ldr	r0, [r7, #20]
 800391c:	f7ff ff8e 	bl	800383c <NVIC_EncodePriority>
 8003920:	4602      	mov	r2, r0
 8003922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff5d 	bl	80037e8 <__NVIC_SetPriority>
}
 800392e:	bf00      	nop
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff31 	bl	80037ac <__NVIC_EnableIRQ>
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ffa2 	bl	80038a4 <SysTick_Config>
 8003960:	4603      	mov	r3, r0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003978:	f7ff fb32 	bl	8002fe0 <HAL_GetTick>
 800397c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d008      	beq.n	800399c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2280      	movs	r2, #128	; 0x80
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e052      	b.n	8003a42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0216 	bic.w	r2, r2, #22
 80039aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d103      	bne.n	80039cc <HAL_DMA_Abort+0x62>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0208 	bic.w	r2, r2, #8
 80039da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ec:	e013      	b.n	8003a16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ee:	f7ff faf7 	bl	8002fe0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b05      	cmp	r3, #5
 80039fa:	d90c      	bls.n	8003a16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2203      	movs	r2, #3
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e015      	b.n	8003a42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e4      	bne.n	80039ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	223f      	movs	r2, #63	; 0x3f
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d004      	beq.n	8003a68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e00c      	b.n	8003a82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <HAL_FLASH_Program+0xa0>)
 8003aa4:	7e1b      	ldrb	r3, [r3, #24]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_FLASH_Program+0x1e>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e03b      	b.n	8003b26 <HAL_FLASH_Program+0x96>
 8003aae:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <HAL_FLASH_Program+0xa0>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ab4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ab8:	f000 f870 	bl	8003b9c <FLASH_WaitForLastOperation>
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d12b      	bne.n	8003b1e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003acc:	783b      	ldrb	r3, [r7, #0]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	68b8      	ldr	r0, [r7, #8]
 8003ad2:	f000 f91b 	bl	8003d0c <FLASH_Program_Byte>
 8003ad6:	e016      	b.n	8003b06 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d105      	bne.n	8003aea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003ade:	883b      	ldrh	r3, [r7, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	68b8      	ldr	r0, [r7, #8]
 8003ae4:	f000 f8ee 	bl	8003cc4 <FLASH_Program_HalfWord>
 8003ae8:	e00d      	b.n	8003b06 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d105      	bne.n	8003afc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4619      	mov	r1, r3
 8003af4:	68b8      	ldr	r0, [r7, #8]
 8003af6:	f000 f8c3 	bl	8003c80 <FLASH_Program_Word>
 8003afa:	e004      	b.n	8003b06 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b00:	68b8      	ldr	r0, [r7, #8]
 8003b02:	f000 f88b 	bl	8003c1c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b0a:	f000 f847 	bl	8003b9c <FLASH_WaitForLastOperation>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003b12:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <HAL_FLASH_Program+0xa4>)
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	4a07      	ldr	r2, [pc, #28]	; (8003b34 <HAL_FLASH_Program+0xa4>)
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <HAL_FLASH_Program+0xa0>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	2000059c 	.word	0x2000059c
 8003b34:	40023c00 	.word	0x40023c00

08003b38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_FLASH_Unlock+0x38>)
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	da0b      	bge.n	8003b62 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_FLASH_Unlock+0x38>)
 8003b4c:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_FLASH_Unlock+0x3c>)
 8003b4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_FLASH_Unlock+0x38>)
 8003b52:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <HAL_FLASH_Unlock+0x40>)
 8003b54:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_FLASH_Unlock+0x38>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	da01      	bge.n	8003b62 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003b62:	79fb      	ldrb	r3, [r7, #7]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40023c00 	.word	0x40023c00
 8003b74:	45670123 	.word	0x45670123
 8003b78:	cdef89ab 	.word	0xcdef89ab

08003b7c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_FLASH_Lock+0x1c>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	4a04      	ldr	r2, [pc, #16]	; (8003b98 <HAL_FLASH_Lock+0x1c>)
 8003b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b8a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40023c00 	.word	0x40023c00

08003b9c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <FLASH_WaitForLastOperation+0x78>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003bae:	f7ff fa17 	bl	8002fe0 <HAL_GetTick>
 8003bb2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003bb4:	e010      	b.n	8003bd8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d00c      	beq.n	8003bd8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <FLASH_WaitForLastOperation+0x38>
 8003bc4:	f7ff fa0c 	bl	8002fe0 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d201      	bcs.n	8003bd8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e019      	b.n	8003c0c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <FLASH_WaitForLastOperation+0x7c>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e8      	bne.n	8003bb6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <FLASH_WaitForLastOperation+0x7c>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <FLASH_WaitForLastOperation+0x7c>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <FLASH_WaitForLastOperation+0x7c>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003c02:	f000 f8a5 	bl	8003d50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
  
}  
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	2000059c 	.word	0x2000059c
 8003c18:	40023c00 	.word	0x40023c00

08003c1c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <FLASH_Program_DoubleWord+0x60>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <FLASH_Program_DoubleWord+0x60>)
 8003c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <FLASH_Program_DoubleWord+0x60>)
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	4a10      	ldr	r2, [pc, #64]	; (8003c7c <FLASH_Program_DoubleWord+0x60>)
 8003c3a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003c3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <FLASH_Program_DoubleWord+0x60>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <FLASH_Program_DoubleWord+0x60>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003c52:	f3bf 8f6f 	isb	sy
}
 8003c56:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	000a      	movs	r2, r1
 8003c66:	2300      	movs	r3, #0
 8003c68:	68f9      	ldr	r1, [r7, #12]
 8003c6a:	3104      	adds	r1, #4
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40023c00 	.word	0x40023c00

08003c80 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <FLASH_Program_Word+0x40>)
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <FLASH_Program_Word+0x40>)
 8003c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003c96:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <FLASH_Program_Word+0x40>)
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <FLASH_Program_Word+0x40>)
 8003c9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <FLASH_Program_Word+0x40>)
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	4a06      	ldr	r2, [pc, #24]	; (8003cc0 <FLASH_Program_Word+0x40>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	601a      	str	r2, [r3, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40023c00 	.word	0x40023c00

08003cc4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <FLASH_Program_HalfWord+0x44>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <FLASH_Program_HalfWord+0x44>)
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <FLASH_Program_HalfWord+0x44>)
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <FLASH_Program_HalfWord+0x44>)
 8003ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003ce8:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <FLASH_Program_HalfWord+0x44>)
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	4a06      	ldr	r2, [pc, #24]	; (8003d08 <FLASH_Program_HalfWord+0x44>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	887a      	ldrh	r2, [r7, #2]
 8003cf8:	801a      	strh	r2, [r3, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40023c00 	.word	0x40023c00

08003d0c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <FLASH_Program_Byte+0x40>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <FLASH_Program_Byte+0x40>)
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <FLASH_Program_Byte+0x40>)
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <FLASH_Program_Byte+0x40>)
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d2c:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <FLASH_Program_Byte+0x40>)
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	4a06      	ldr	r2, [pc, #24]	; (8003d4c <FLASH_Program_Byte+0x40>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	701a      	strb	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40023c00 	.word	0x40023c00

08003d50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003d54:	4b2f      	ldr	r3, [pc, #188]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003d60:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f043 0310 	orr.w	r3, r3, #16
 8003d68:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003d6a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003d6e:	2210      	movs	r2, #16
 8003d70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003d72:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003d7e:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f043 0308 	orr.w	r3, r3, #8
 8003d86:	4a24      	ldr	r2, [pc, #144]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003d88:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003d90:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f043 0304 	orr.w	r3, r3, #4
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003da6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003dba:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003dc4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003dc6:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003dc8:	2280      	movs	r2, #128	; 0x80
 8003dca:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	4a0d      	ldr	r2, [pc, #52]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003de2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dea:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003df8:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f043 0320 	orr.w	r3, r3, #32
 8003e00:	4a05      	ldr	r2, [pc, #20]	; (8003e18 <FLASH_SetErrorCode+0xc8>)
 8003e02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <FLASH_SetErrorCode+0xc4>)
 8003e06:	2202      	movs	r2, #2
 8003e08:	60da      	str	r2, [r3, #12]
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40023c00 	.word	0x40023c00
 8003e18:	2000059c 	.word	0x2000059c

08003e1c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e2e:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <HAL_FLASHEx_Erase+0xdc>)
 8003e30:	7e1b      	ldrb	r3, [r3, #24]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_FLASHEx_Erase+0x1e>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e05a      	b.n	8003ef0 <HAL_FLASHEx_Erase+0xd4>
 8003e3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <HAL_FLASHEx_Erase+0xdc>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e44:	f7ff feaa 	bl	8003b9c <FLASH_WaitForLastOperation>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d14a      	bne.n	8003ee8 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
 8003e58:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d117      	bne.n	8003e92 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f000 f846 	bl	8003f00 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e78:	f7ff fe90 	bl	8003b9c <FLASH_WaitForLastOperation>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003e80:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_FLASHEx_Erase+0xe0>)
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <HAL_FLASHEx_Erase+0xe0>)
 8003e86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e8a:	f023 0304 	bic.w	r3, r3, #4
 8003e8e:	6113      	str	r3, [r2, #16]
 8003e90:	e028      	b.n	8003ee4 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	e01c      	b.n	8003ed4 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	68b8      	ldr	r0, [r7, #8]
 8003ea4:	f000 f866 	bl	8003f74 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ea8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eac:	f7ff fe76 	bl	8003b9c <FLASH_WaitForLastOperation>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <HAL_FLASHEx_Erase+0xe0>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4a10      	ldr	r2, [pc, #64]	; (8003efc <HAL_FLASHEx_Erase+0xe0>)
 8003eba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003ebe:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	601a      	str	r2, [r3, #0]
          break;
 8003ecc:	e00a      	b.n	8003ee4 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4413      	add	r3, r2
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d3da      	bcc.n	8003e9a <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003ee4:	f000 f894 	bl	8004010 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <HAL_FLASHEx_Erase+0xdc>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	761a      	strb	r2, [r3, #24]

  return status;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	2000059c 	.word	0x2000059c
 8003efc:	40023c00 	.word	0x40023c00

08003f00 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	6039      	str	r1, [r7, #0]
 8003f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f0c:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <FLASH_MassErase+0x70>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <FLASH_MassErase+0x70>)
 8003f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f16:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d108      	bne.n	8003f30 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003f1e:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <FLASH_MassErase+0x70>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <FLASH_MassErase+0x70>)
 8003f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	6113      	str	r3, [r2, #16]
 8003f2e:	e00f      	b.n	8003f50 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d106      	bne.n	8003f44 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <FLASH_MassErase+0x70>)
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	4a0d      	ldr	r2, [pc, #52]	; (8003f70 <FLASH_MassErase+0x70>)
 8003f3c:	f043 0304 	orr.w	r3, r3, #4
 8003f40:	6113      	str	r3, [r2, #16]
 8003f42:	e005      	b.n	8003f50 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <FLASH_MassErase+0x70>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <FLASH_MassErase+0x70>)
 8003f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <FLASH_MassErase+0x70>)
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <FLASH_MassErase+0x70>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6113      	str	r3, [r2, #16]
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40023c00 	.word	0x40023c00

08003f74 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e010      	b.n	8003fb2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d103      	bne.n	8003f9e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	e009      	b.n	8003fb2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d103      	bne.n	8003fac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e002      	b.n	8003fb2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003fac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b0b      	cmp	r3, #11
 8003fb6:	d902      	bls.n	8003fbe <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <FLASH_Erase_Sector+0x98>)
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	4a12      	ldr	r2, [pc, #72]	; (800400c <FLASH_Erase_Sector+0x98>)
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <FLASH_Erase_Sector+0x98>)
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	490f      	ldr	r1, [pc, #60]	; (800400c <FLASH_Erase_Sector+0x98>)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	; (800400c <FLASH_Erase_Sector+0x98>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	4a0c      	ldr	r2, [pc, #48]	; (800400c <FLASH_Erase_Sector+0x98>)
 8003fdc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003fe0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <FLASH_Erase_Sector+0x98>)
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4313      	orrs	r3, r2
 8003fec:	4a07      	ldr	r2, [pc, #28]	; (800400c <FLASH_Erase_Sector+0x98>)
 8003fee:	f043 0302 	orr.w	r3, r3, #2
 8003ff2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <FLASH_Erase_Sector+0x98>)
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <FLASH_Erase_Sector+0x98>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	6113      	str	r3, [r2, #16]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40023c00 	.word	0x40023c00

08004010 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004014:	4b20      	ldr	r3, [pc, #128]	; (8004098 <FLASH_FlushCaches+0x88>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401c:	2b00      	cmp	r3, #0
 800401e:	d017      	beq.n	8004050 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004020:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <FLASH_FlushCaches+0x88>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <FLASH_FlushCaches+0x88>)
 8004026:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800402a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800402c:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <FLASH_FlushCaches+0x88>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <FLASH_FlushCaches+0x88>)
 8004032:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b17      	ldr	r3, [pc, #92]	; (8004098 <FLASH_FlushCaches+0x88>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a16      	ldr	r2, [pc, #88]	; (8004098 <FLASH_FlushCaches+0x88>)
 800403e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004042:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004044:	4b14      	ldr	r3, [pc, #80]	; (8004098 <FLASH_FlushCaches+0x88>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a13      	ldr	r2, [pc, #76]	; (8004098 <FLASH_FlushCaches+0x88>)
 800404a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800404e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <FLASH_FlushCaches+0x88>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004058:	2b00      	cmp	r3, #0
 800405a:	d017      	beq.n	800408c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800405c:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <FLASH_FlushCaches+0x88>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <FLASH_FlushCaches+0x88>)
 8004062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004066:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <FLASH_FlushCaches+0x88>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <FLASH_FlushCaches+0x88>)
 800406e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4b08      	ldr	r3, [pc, #32]	; (8004098 <FLASH_FlushCaches+0x88>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a07      	ldr	r2, [pc, #28]	; (8004098 <FLASH_FlushCaches+0x88>)
 800407a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800407e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <FLASH_FlushCaches+0x88>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a04      	ldr	r2, [pc, #16]	; (8004098 <FLASH_FlushCaches+0x88>)
 8004086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800408a:	6013      	str	r3, [r2, #0]
  }
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40023c00 	.word	0x40023c00

0800409c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800409c:	b480      	push	{r7}
 800409e:	b089      	sub	sp, #36	; 0x24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	e177      	b.n	80043a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040b8:	2201      	movs	r2, #1
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	f040 8166 	bne.w	80043a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d005      	beq.n	80040ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d130      	bne.n	8004150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	2203      	movs	r2, #3
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004124:	2201      	movs	r2, #1
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 0201 	and.w	r2, r3, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b03      	cmp	r3, #3
 800415a:	d017      	beq.n	800418c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	2203      	movs	r2, #3
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d123      	bne.n	80041e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	08da      	lsrs	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3208      	adds	r2, #8
 80041a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	220f      	movs	r2, #15
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	08da      	lsrs	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3208      	adds	r2, #8
 80041da:	69b9      	ldr	r1, [r7, #24]
 80041dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 0203 	and.w	r2, r3, #3
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80c0 	beq.w	80043a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	4b66      	ldr	r3, [pc, #408]	; (80043c0 <HAL_GPIO_Init+0x324>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	4a65      	ldr	r2, [pc, #404]	; (80043c0 <HAL_GPIO_Init+0x324>)
 800422c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004230:	6453      	str	r3, [r2, #68]	; 0x44
 8004232:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_GPIO_Init+0x324>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800423e:	4a61      	ldr	r2, [pc, #388]	; (80043c4 <HAL_GPIO_Init+0x328>)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	3302      	adds	r3, #2
 8004246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	220f      	movs	r2, #15
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_GPIO_Init+0x32c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d037      	beq.n	80042da <HAL_GPIO_Init+0x23e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a57      	ldr	r2, [pc, #348]	; (80043cc <HAL_GPIO_Init+0x330>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d031      	beq.n	80042d6 <HAL_GPIO_Init+0x23a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a56      	ldr	r2, [pc, #344]	; (80043d0 <HAL_GPIO_Init+0x334>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d02b      	beq.n	80042d2 <HAL_GPIO_Init+0x236>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a55      	ldr	r2, [pc, #340]	; (80043d4 <HAL_GPIO_Init+0x338>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d025      	beq.n	80042ce <HAL_GPIO_Init+0x232>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a54      	ldr	r2, [pc, #336]	; (80043d8 <HAL_GPIO_Init+0x33c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01f      	beq.n	80042ca <HAL_GPIO_Init+0x22e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a53      	ldr	r2, [pc, #332]	; (80043dc <HAL_GPIO_Init+0x340>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d019      	beq.n	80042c6 <HAL_GPIO_Init+0x22a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a52      	ldr	r2, [pc, #328]	; (80043e0 <HAL_GPIO_Init+0x344>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_GPIO_Init+0x226>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a51      	ldr	r2, [pc, #324]	; (80043e4 <HAL_GPIO_Init+0x348>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00d      	beq.n	80042be <HAL_GPIO_Init+0x222>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a50      	ldr	r2, [pc, #320]	; (80043e8 <HAL_GPIO_Init+0x34c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <HAL_GPIO_Init+0x21e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4f      	ldr	r2, [pc, #316]	; (80043ec <HAL_GPIO_Init+0x350>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d101      	bne.n	80042b6 <HAL_GPIO_Init+0x21a>
 80042b2:	2309      	movs	r3, #9
 80042b4:	e012      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042b6:	230a      	movs	r3, #10
 80042b8:	e010      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042ba:	2308      	movs	r3, #8
 80042bc:	e00e      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042be:	2307      	movs	r3, #7
 80042c0:	e00c      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042c2:	2306      	movs	r3, #6
 80042c4:	e00a      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042c6:	2305      	movs	r3, #5
 80042c8:	e008      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042ca:	2304      	movs	r3, #4
 80042cc:	e006      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042ce:	2303      	movs	r3, #3
 80042d0:	e004      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e002      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042da:	2300      	movs	r3, #0
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	f002 0203 	and.w	r2, r2, #3
 80042e2:	0092      	lsls	r2, r2, #2
 80042e4:	4093      	lsls	r3, r2
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ec:	4935      	ldr	r1, [pc, #212]	; (80043c4 <HAL_GPIO_Init+0x328>)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	3302      	adds	r3, #2
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042fa:	4b3d      	ldr	r3, [pc, #244]	; (80043f0 <HAL_GPIO_Init+0x354>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800431e:	4a34      	ldr	r2, [pc, #208]	; (80043f0 <HAL_GPIO_Init+0x354>)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004324:	4b32      	ldr	r3, [pc, #200]	; (80043f0 <HAL_GPIO_Init+0x354>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004348:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <HAL_GPIO_Init+0x354>)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <HAL_GPIO_Init+0x354>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004372:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <HAL_GPIO_Init+0x354>)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_GPIO_Init+0x354>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <HAL_GPIO_Init+0x354>)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3301      	adds	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b0f      	cmp	r3, #15
 80043ac:	f67f ae84 	bls.w	80040b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3724      	adds	r7, #36	; 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40013800 	.word	0x40013800
 80043c8:	40020000 	.word	0x40020000
 80043cc:	40020400 	.word	0x40020400
 80043d0:	40020800 	.word	0x40020800
 80043d4:	40020c00 	.word	0x40020c00
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40021400 	.word	0x40021400
 80043e0:	40021800 	.word	0x40021800
 80043e4:	40021c00 	.word	0x40021c00
 80043e8:	40022000 	.word	0x40022000
 80043ec:	40022400 	.word	0x40022400
 80043f0:	40013c00 	.word	0x40013c00

080043f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	887b      	ldrh	r3, [r7, #2]
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
 8004410:	e001      	b.n	8004416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	807b      	strh	r3, [r7, #2]
 8004430:	4613      	mov	r3, r2
 8004432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004434:	787b      	ldrb	r3, [r7, #1]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004440:	e003      	b.n	800444a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004442:	887b      	ldrh	r3, [r7, #2]
 8004444:	041a      	lsls	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	619a      	str	r2, [r3, #24]
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	4013      	ands	r3, r2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fc ffea 	bl	8001450 <HAL_GPIO_EXTI_Callback>
  }
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40013c00 	.word	0x40013c00

08004488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e12b      	b.n	80046f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc f9be 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044ec:	f001 fa40 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 80044f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4a81      	ldr	r2, [pc, #516]	; (80046fc <HAL_I2C_Init+0x274>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d807      	bhi.n	800450c <HAL_I2C_Init+0x84>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a80      	ldr	r2, [pc, #512]	; (8004700 <HAL_I2C_Init+0x278>)
 8004500:	4293      	cmp	r3, r2
 8004502:	bf94      	ite	ls
 8004504:	2301      	movls	r3, #1
 8004506:	2300      	movhi	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e006      	b.n	800451a <HAL_I2C_Init+0x92>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a7d      	ldr	r2, [pc, #500]	; (8004704 <HAL_I2C_Init+0x27c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	bf94      	ite	ls
 8004514:	2301      	movls	r3, #1
 8004516:	2300      	movhi	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0e7      	b.n	80046f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a78      	ldr	r2, [pc, #480]	; (8004708 <HAL_I2C_Init+0x280>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	0c9b      	lsrs	r3, r3, #18
 800452c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a6a      	ldr	r2, [pc, #424]	; (80046fc <HAL_I2C_Init+0x274>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d802      	bhi.n	800455c <HAL_I2C_Init+0xd4>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3301      	adds	r3, #1
 800455a:	e009      	b.n	8004570 <HAL_I2C_Init+0xe8>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	4a69      	ldr	r2, [pc, #420]	; (800470c <HAL_I2C_Init+0x284>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	3301      	adds	r3, #1
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	430b      	orrs	r3, r1
 8004576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004582:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	495c      	ldr	r1, [pc, #368]	; (80046fc <HAL_I2C_Init+0x274>)
 800458c:	428b      	cmp	r3, r1
 800458e:	d819      	bhi.n	80045c4 <HAL_I2C_Init+0x13c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1e59      	subs	r1, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	fbb1 f3f3 	udiv	r3, r1, r3
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045a4:	400b      	ands	r3, r1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_I2C_Init+0x138>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1e59      	subs	r1, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045be:	e051      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 80045c0:	2304      	movs	r3, #4
 80045c2:	e04f      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d111      	bne.n	80045f0 <HAL_I2C_Init+0x168>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1e58      	subs	r0, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	440b      	add	r3, r1
 80045da:	fbb0 f3f3 	udiv	r3, r0, r3
 80045de:	3301      	adds	r3, #1
 80045e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e012      	b.n	8004616 <HAL_I2C_Init+0x18e>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e58      	subs	r0, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	0099      	lsls	r1, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	fbb0 f3f3 	udiv	r3, r0, r3
 8004606:	3301      	adds	r3, #1
 8004608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_I2C_Init+0x196>
 800461a:	2301      	movs	r3, #1
 800461c:	e022      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10e      	bne.n	8004644 <HAL_I2C_Init+0x1bc>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1e58      	subs	r0, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	460b      	mov	r3, r1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	440b      	add	r3, r1
 8004634:	fbb0 f3f3 	udiv	r3, r0, r3
 8004638:	3301      	adds	r3, #1
 800463a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004642:	e00f      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1e58      	subs	r0, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	0099      	lsls	r1, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	fbb0 f3f3 	udiv	r3, r0, r3
 800465a:	3301      	adds	r3, #1
 800465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	6809      	ldr	r1, [r1, #0]
 8004668:	4313      	orrs	r3, r2
 800466a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6911      	ldr	r1, [r2, #16]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68d2      	ldr	r2, [r2, #12]
 800469e:	4311      	orrs	r1, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	000186a0 	.word	0x000186a0
 8004700:	001e847f 	.word	0x001e847f
 8004704:	003d08ff 	.word	0x003d08ff
 8004708:	431bde83 	.word	0x431bde83
 800470c:	10624dd3 	.word	0x10624dd3

08004710 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	461a      	mov	r2, r3
 800471c:	460b      	mov	r3, r1
 800471e:	817b      	strh	r3, [r7, #10]
 8004720:	4613      	mov	r3, r2
 8004722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004724:	f7fe fc5c 	bl	8002fe0 <HAL_GetTick>
 8004728:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b20      	cmp	r3, #32
 8004734:	f040 80e0 	bne.w	80048f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	2319      	movs	r3, #25
 800473e:	2201      	movs	r2, #1
 8004740:	4970      	ldr	r1, [pc, #448]	; (8004904 <HAL_I2C_Master_Transmit+0x1f4>)
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fa92 	bl	8004c6c <I2C_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800474e:	2302      	movs	r3, #2
 8004750:	e0d3      	b.n	80048fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_I2C_Master_Transmit+0x50>
 800475c:	2302      	movs	r3, #2
 800475e:	e0cc      	b.n	80048fa <HAL_I2C_Master_Transmit+0x1ea>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b01      	cmp	r3, #1
 8004774:	d007      	beq.n	8004786 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2221      	movs	r2, #33	; 0x21
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2210      	movs	r2, #16
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	893a      	ldrh	r2, [r7, #8]
 80047b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a50      	ldr	r2, [pc, #320]	; (8004908 <HAL_I2C_Master_Transmit+0x1f8>)
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047c8:	8979      	ldrh	r1, [r7, #10]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6a3a      	ldr	r2, [r7, #32]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f9ca 	bl	8004b68 <I2C_MasterRequestWrite>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e08d      	b.n	80048fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047f4:	e066      	b.n	80048c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	6a39      	ldr	r1, [r7, #32]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fb0c 	bl	8004e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2b04      	cmp	r3, #4
 800480c:	d107      	bne.n	800481e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e06b      	b.n	80048fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	781a      	ldrb	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d11b      	bne.n	8004898 <HAL_I2C_Master_Transmit+0x188>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	2b00      	cmp	r3, #0
 8004866:	d017      	beq.n	8004898 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	6a39      	ldr	r1, [r7, #32]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fafc 	bl	8004e9a <I2C_WaitOnBTFFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d107      	bne.n	80048c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e01a      	b.n	80048fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d194      	bne.n	80047f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e000      	b.n	80048fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	00100002 	.word	0x00100002
 8004908:	ffff0000 	.word	0xffff0000

0800490c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	460b      	mov	r3, r1
 800491a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800491c:	f7fe fb60 	bl	8002fe0 <HAL_GetTick>
 8004920:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b20      	cmp	r3, #32
 8004930:	f040 8111 	bne.w	8004b56 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	2319      	movs	r3, #25
 800493a:	2201      	movs	r2, #1
 800493c:	4988      	ldr	r1, [pc, #544]	; (8004b60 <HAL_I2C_IsDeviceReady+0x254>)
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f994 	bl	8004c6c <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800494a:	2302      	movs	r3, #2
 800494c:	e104      	b.n	8004b58 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_I2C_IsDeviceReady+0x50>
 8004958:	2302      	movs	r3, #2
 800495a:	e0fd      	b.n	8004b58 <HAL_I2C_IsDeviceReady+0x24c>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d007      	beq.n	8004982 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004990:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2224      	movs	r2, #36	; 0x24
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a70      	ldr	r2, [pc, #448]	; (8004b64 <HAL_I2C_IsDeviceReady+0x258>)
 80049a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2200      	movs	r2, #0
 80049be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f952 	bl	8004c6c <I2C_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00d      	beq.n	80049ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049dc:	d103      	bne.n	80049e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e0b6      	b.n	8004b58 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ea:	897b      	ldrh	r3, [r7, #10]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80049fa:	f7fe faf1 	bl	8002fe0 <HAL_GetTick>
 80049fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a24:	bf0c      	ite	eq
 8004a26:	2301      	moveq	r3, #1
 8004a28:	2300      	movne	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a2e:	e025      	b.n	8004a7c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a30:	f7fe fad6 	bl	8002fe0 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <HAL_I2C_IsDeviceReady+0x13a>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d103      	bne.n	8004a4e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	22a0      	movs	r2, #160	; 0xa0
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	bf0c      	ite	eq
 8004a74:	2301      	moveq	r3, #1
 8004a76:	2300      	movne	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2ba0      	cmp	r3, #160	; 0xa0
 8004a86:	d005      	beq.n	8004a94 <HAL_I2C_IsDeviceReady+0x188>
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <HAL_I2C_IsDeviceReady+0x188>
 8004a8e:	7dbb      	ldrb	r3, [r7, #22]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0cd      	beq.n	8004a30 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d129      	bne.n	8004afe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2319      	movs	r3, #25
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	4921      	ldr	r1, [pc, #132]	; (8004b60 <HAL_I2C_IsDeviceReady+0x254>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f8c6 	bl	8004c6c <I2C_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e036      	b.n	8004b58 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e02c      	b.n	8004b58 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b16:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	2319      	movs	r3, #25
 8004b1e:	2201      	movs	r2, #1
 8004b20:	490f      	ldr	r1, [pc, #60]	; (8004b60 <HAL_I2C_IsDeviceReady+0x254>)
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f8a2 	bl	8004c6c <I2C_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e012      	b.n	8004b58 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3301      	adds	r3, #1
 8004b36:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	f4ff af32 	bcc.w	80049a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b56:	2302      	movs	r3, #2
  }
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	00100002 	.word	0x00100002
 8004b64:	ffff0000 	.word	0xffff0000

08004b68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	460b      	mov	r3, r1
 8004b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d006      	beq.n	8004b92 <I2C_MasterRequestWrite+0x2a>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d003      	beq.n	8004b92 <I2C_MasterRequestWrite+0x2a>
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b90:	d108      	bne.n	8004ba4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e00b      	b.n	8004bbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	2b12      	cmp	r3, #18
 8004baa:	d107      	bne.n	8004bbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f84f 	bl	8004c6c <I2C_WaitOnFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00d      	beq.n	8004bf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be2:	d103      	bne.n	8004bec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e035      	b.n	8004c5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf8:	d108      	bne.n	8004c0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bfa:	897b      	ldrh	r3, [r7, #10]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c08:	611a      	str	r2, [r3, #16]
 8004c0a:	e01b      	b.n	8004c44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c0c:	897b      	ldrh	r3, [r7, #10]
 8004c0e:	11db      	asrs	r3, r3, #7
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f003 0306 	and.w	r3, r3, #6
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f063 030f 	orn	r3, r3, #15
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	490e      	ldr	r1, [pc, #56]	; (8004c64 <I2C_MasterRequestWrite+0xfc>)
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f875 	bl	8004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e010      	b.n	8004c5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c3a:	897b      	ldrh	r3, [r7, #10]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	4907      	ldr	r1, [pc, #28]	; (8004c68 <I2C_MasterRequestWrite+0x100>)
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f865 	bl	8004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	00010008 	.word	0x00010008
 8004c68:	00010002 	.word	0x00010002

08004c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c7c:	e025      	b.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d021      	beq.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c86:	f7fe f9ab 	bl	8002fe0 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d302      	bcc.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d116      	bne.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f043 0220 	orr.w	r2, r3, #32
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e023      	b.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d10d      	bne.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2301      	moveq	r3, #1
 8004ce8:	2300      	movne	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	461a      	mov	r2, r3
 8004cee:	e00c      	b.n	8004d0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	43da      	mvns	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d0b6      	beq.n	8004c7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d28:	e051      	b.n	8004dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d38:	d123      	bne.n	8004d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f043 0204 	orr.w	r2, r3, #4
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e046      	b.n	8004e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d021      	beq.n	8004dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8a:	f7fe f929 	bl	8002fe0 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d302      	bcc.n	8004da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d116      	bne.n	8004dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e020      	b.n	8004e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	0c1b      	lsrs	r3, r3, #16
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d10c      	bne.n	8004df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	43da      	mvns	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	e00b      	b.n	8004e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	43da      	mvns	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf14      	ite	ne
 8004e04:	2301      	movne	r3, #1
 8004e06:	2300      	moveq	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d18d      	bne.n	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e24:	e02d      	b.n	8004e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f878 	bl	8004f1c <I2C_IsAcknowledgeFailed>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e02d      	b.n	8004e92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d021      	beq.n	8004e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3e:	f7fe f8cf 	bl	8002fe0 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d302      	bcc.n	8004e54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d116      	bne.n	8004e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e007      	b.n	8004e92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8c:	2b80      	cmp	r3, #128	; 0x80
 8004e8e:	d1ca      	bne.n	8004e26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ea6:	e02d      	b.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f837 	bl	8004f1c <I2C_IsAcknowledgeFailed>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e02d      	b.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d021      	beq.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec0:	f7fe f88e 	bl	8002fe0 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d116      	bne.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	f043 0220 	orr.w	r2, r3, #32
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e007      	b.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d1ca      	bne.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f32:	d11b      	bne.n	8004f6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f043 0204 	orr.w	r2, r3, #4
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d129      	bne.n	8004fe4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	; 0x24
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0210 	bic.w	r2, r2, #16
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e000      	b.n	8004fe6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
  }
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b20      	cmp	r3, #32
 800500a:	d12a      	bne.n	8005062 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	; 0x24
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800502c:	89fb      	ldrh	r3, [r7, #14]
 800502e:	f023 030f 	bic.w	r3, r3, #15
 8005032:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	b29a      	uxth	r2, r3
 8005038:	89fb      	ldrh	r3, [r7, #14]
 800503a:	4313      	orrs	r3, r2
 800503c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	89fa      	ldrh	r2, [r7, #14]
 8005044:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e000      	b.n	8005064 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
  }
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	2300      	movs	r3, #0
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	4b20      	ldr	r3, [pc, #128]	; (8005100 <HAL_PWREx_EnableOverDrive+0x90>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <HAL_PWREx_EnableOverDrive+0x90>)
 8005084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005088:	6413      	str	r3, [r2, #64]	; 0x40
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <HAL_PWREx_EnableOverDrive+0x90>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005096:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <HAL_PWREx_EnableOverDrive+0x94>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800509c:	f7fd ffa0 	bl	8002fe0 <HAL_GetTick>
 80050a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050a2:	e009      	b.n	80050b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050a4:	f7fd ff9c 	bl	8002fe0 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b2:	d901      	bls.n	80050b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e01f      	b.n	80050f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050b8:	4b13      	ldr	r3, [pc, #76]	; (8005108 <HAL_PWREx_EnableOverDrive+0x98>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c4:	d1ee      	bne.n	80050a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <HAL_PWREx_EnableOverDrive+0x9c>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050cc:	f7fd ff88 	bl	8002fe0 <HAL_GetTick>
 80050d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050d2:	e009      	b.n	80050e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050d4:	f7fd ff84 	bl	8002fe0 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e2:	d901      	bls.n	80050e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e007      	b.n	80050f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <HAL_PWREx_EnableOverDrive+0x98>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f4:	d1ee      	bne.n	80050d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40023800 	.word	0x40023800
 8005104:	420e0040 	.word	0x420e0040
 8005108:	40007000 	.word	0x40007000
 800510c:	420e0044 	.word	0x420e0044

08005110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e267      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d075      	beq.n	800521a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800512e:	4b88      	ldr	r3, [pc, #544]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b04      	cmp	r3, #4
 8005138:	d00c      	beq.n	8005154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800513a:	4b85      	ldr	r3, [pc, #532]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005142:	2b08      	cmp	r3, #8
 8005144:	d112      	bne.n	800516c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005146:	4b82      	ldr	r3, [pc, #520]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005152:	d10b      	bne.n	800516c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005154:	4b7e      	ldr	r3, [pc, #504]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05b      	beq.n	8005218 <HAL_RCC_OscConfig+0x108>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d157      	bne.n	8005218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e242      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005174:	d106      	bne.n	8005184 <HAL_RCC_OscConfig+0x74>
 8005176:	4b76      	ldr	r3, [pc, #472]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a75      	ldr	r2, [pc, #468]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e01d      	b.n	80051c0 <HAL_RCC_OscConfig+0xb0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800518c:	d10c      	bne.n	80051a8 <HAL_RCC_OscConfig+0x98>
 800518e:	4b70      	ldr	r3, [pc, #448]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a6f      	ldr	r2, [pc, #444]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	4b6d      	ldr	r3, [pc, #436]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a6c      	ldr	r2, [pc, #432]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e00b      	b.n	80051c0 <HAL_RCC_OscConfig+0xb0>
 80051a8:	4b69      	ldr	r3, [pc, #420]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a68      	ldr	r2, [pc, #416]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4b66      	ldr	r3, [pc, #408]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a65      	ldr	r2, [pc, #404]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d013      	beq.n	80051f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7fd ff0a 	bl	8002fe0 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d0:	f7fd ff06 	bl	8002fe0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	; 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e207      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	4b5b      	ldr	r3, [pc, #364]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0xc0>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fd fef6 	bl	8002fe0 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051f8:	f7fd fef2 	bl	8002fe0 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	; 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e1f3      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520a:	4b51      	ldr	r3, [pc, #324]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0xe8>
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d063      	beq.n	80052ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005226:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800523a:	2b08      	cmp	r3, #8
 800523c:	d11c      	bne.n	8005278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800523e:	4b44      	ldr	r3, [pc, #272]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d116      	bne.n	8005278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524a:	4b41      	ldr	r3, [pc, #260]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_RCC_OscConfig+0x152>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d001      	beq.n	8005262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e1c7      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005262:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4937      	ldr	r1, [pc, #220]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005272:	4313      	orrs	r3, r2
 8005274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005276:	e03a      	b.n	80052ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d020      	beq.n	80052c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005280:	4b34      	ldr	r3, [pc, #208]	; (8005354 <HAL_RCC_OscConfig+0x244>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fd feab 	bl	8002fe0 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800528e:	f7fd fea7 	bl	8002fe0 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e1a8      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a0:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ac:	4b28      	ldr	r3, [pc, #160]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4925      	ldr	r1, [pc, #148]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]
 80052c0:	e015      	b.n	80052ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052c2:	4b24      	ldr	r3, [pc, #144]	; (8005354 <HAL_RCC_OscConfig+0x244>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fd fe8a 	bl	8002fe0 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052d0:	f7fd fe86 	bl	8002fe0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e187      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052e2:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d036      	beq.n	8005368 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005302:	4b15      	ldr	r3, [pc, #84]	; (8005358 <HAL_RCC_OscConfig+0x248>)
 8005304:	2201      	movs	r2, #1
 8005306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005308:	f7fd fe6a 	bl	8002fe0 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005310:	f7fd fe66 	bl	8002fe0 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e167      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x200>
 800532e:	e01b      	b.n	8005368 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <HAL_RCC_OscConfig+0x248>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005336:	f7fd fe53 	bl	8002fe0 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800533c:	e00e      	b.n	800535c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800533e:	f7fd fe4f 	bl	8002fe0 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d907      	bls.n	800535c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e150      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
 8005350:	40023800 	.word	0x40023800
 8005354:	42470000 	.word	0x42470000
 8005358:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800535c:	4b88      	ldr	r3, [pc, #544]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800535e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1ea      	bne.n	800533e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8097 	beq.w	80054a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537a:	4b81      	ldr	r3, [pc, #516]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	4a7c      	ldr	r2, [pc, #496]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6413      	str	r3, [r2, #64]	; 0x40
 8005396:	4b7a      	ldr	r3, [pc, #488]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a2:	2301      	movs	r3, #1
 80053a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a6:	4b77      	ldr	r3, [pc, #476]	; (8005584 <HAL_RCC_OscConfig+0x474>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d118      	bne.n	80053e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053b2:	4b74      	ldr	r3, [pc, #464]	; (8005584 <HAL_RCC_OscConfig+0x474>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a73      	ldr	r2, [pc, #460]	; (8005584 <HAL_RCC_OscConfig+0x474>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053be:	f7fd fe0f 	bl	8002fe0 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c6:	f7fd fe0b 	bl	8002fe0 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e10c      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d8:	4b6a      	ldr	r3, [pc, #424]	; (8005584 <HAL_RCC_OscConfig+0x474>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d106      	bne.n	80053fa <HAL_RCC_OscConfig+0x2ea>
 80053ec:	4b64      	ldr	r3, [pc, #400]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	4a63      	ldr	r2, [pc, #396]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	6713      	str	r3, [r2, #112]	; 0x70
 80053f8:	e01c      	b.n	8005434 <HAL_RCC_OscConfig+0x324>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b05      	cmp	r3, #5
 8005400:	d10c      	bne.n	800541c <HAL_RCC_OscConfig+0x30c>
 8005402:	4b5f      	ldr	r3, [pc, #380]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	4a5e      	ldr	r2, [pc, #376]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005408:	f043 0304 	orr.w	r3, r3, #4
 800540c:	6713      	str	r3, [r2, #112]	; 0x70
 800540e:	4b5c      	ldr	r3, [pc, #368]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a5b      	ldr	r2, [pc, #364]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	6713      	str	r3, [r2, #112]	; 0x70
 800541a:	e00b      	b.n	8005434 <HAL_RCC_OscConfig+0x324>
 800541c:	4b58      	ldr	r3, [pc, #352]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	4a57      	ldr	r2, [pc, #348]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	6713      	str	r3, [r2, #112]	; 0x70
 8005428:	4b55      	ldr	r3, [pc, #340]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	4a54      	ldr	r2, [pc, #336]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800542e:	f023 0304 	bic.w	r3, r3, #4
 8005432:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d015      	beq.n	8005468 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543c:	f7fd fdd0 	bl	8002fe0 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005442:	e00a      	b.n	800545a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005444:	f7fd fdcc 	bl	8002fe0 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0cb      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545a:	4b49      	ldr	r3, [pc, #292]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0ee      	beq.n	8005444 <HAL_RCC_OscConfig+0x334>
 8005466:	e014      	b.n	8005492 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005468:	f7fd fdba 	bl	8002fe0 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800546e:	e00a      	b.n	8005486 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005470:	f7fd fdb6 	bl	8002fe0 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0b5      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005486:	4b3e      	ldr	r3, [pc, #248]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1ee      	bne.n	8005470 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d105      	bne.n	80054a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005498:	4b39      	ldr	r3, [pc, #228]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	4a38      	ldr	r2, [pc, #224]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800549e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80a1 	beq.w	80055f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ae:	4b34      	ldr	r3, [pc, #208]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d05c      	beq.n	8005574 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d141      	bne.n	8005546 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b31      	ldr	r3, [pc, #196]	; (8005588 <HAL_RCC_OscConfig+0x478>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fd fd8a 	bl	8002fe0 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fd fd86 	bl	8002fe0 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e087      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	4b27      	ldr	r3, [pc, #156]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	3b01      	subs	r3, #1
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	491b      	ldr	r1, [pc, #108]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005514:	4313      	orrs	r3, r2
 8005516:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005518:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <HAL_RCC_OscConfig+0x478>)
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551e:	f7fd fd5f 	bl	8002fe0 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005526:	f7fd fd5b 	bl	8002fe0 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e05c      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x416>
 8005544:	e054      	b.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <HAL_RCC_OscConfig+0x478>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7fd fd48 	bl	8002fe0 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005554:	f7fd fd44 	bl	8002fe0 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e045      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x444>
 8005572:	e03d      	b.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e038      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
 8005580:	40023800 	.word	0x40023800
 8005584:	40007000 	.word	0x40007000
 8005588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <HAL_RCC_OscConfig+0x4ec>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d028      	beq.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d121      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d11a      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055bc:	4013      	ands	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d111      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	3b01      	subs	r3, #1
 80055d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d107      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800

08005600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0cc      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005614:	4b68      	ldr	r3, [pc, #416]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d90c      	bls.n	800563c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005622:	4b65      	ldr	r3, [pc, #404]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b63      	ldr	r3, [pc, #396]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0b8      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005654:	4b59      	ldr	r3, [pc, #356]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4a58      	ldr	r2, [pc, #352]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800565e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800566c:	4b53      	ldr	r3, [pc, #332]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4a52      	ldr	r2, [pc, #328]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005678:	4b50      	ldr	r3, [pc, #320]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	494d      	ldr	r1, [pc, #308]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d044      	beq.n	8005720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569e:	4b47      	ldr	r3, [pc, #284]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d119      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e07f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d003      	beq.n	80056be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d107      	bne.n	80056ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056be:	4b3f      	ldr	r3, [pc, #252]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e06f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ce:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e067      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056de:	4b37      	ldr	r3, [pc, #220]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f023 0203 	bic.w	r2, r3, #3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4934      	ldr	r1, [pc, #208]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056f0:	f7fd fc76 	bl	8002fe0 <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f6:	e00a      	b.n	800570e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f8:	f7fd fc72 	bl	8002fe0 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	; 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e04f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570e:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 020c 	and.w	r2, r3, #12
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	429a      	cmp	r2, r3
 800571e:	d1eb      	bne.n	80056f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005720:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d20c      	bcs.n	8005748 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572e:	4b22      	ldr	r3, [pc, #136]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e032      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005754:	4b19      	ldr	r3, [pc, #100]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4916      	ldr	r1, [pc, #88]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005772:	4b12      	ldr	r3, [pc, #72]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	490e      	ldr	r1, [pc, #56]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005786:	f000 f821 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 800578a:	4602      	mov	r2, r0
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	490a      	ldr	r1, [pc, #40]	; (80057c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005798:	5ccb      	ldrb	r3, [r1, r3]
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	4a09      	ldr	r2, [pc, #36]	; (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 80057a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fd fbd6 	bl	8002f58 <HAL_InitTick>

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40023c00 	.word	0x40023c00
 80057bc:	40023800 	.word	0x40023800
 80057c0:	08009b98 	.word	0x08009b98
 80057c4:	20000254 	.word	0x20000254
 80057c8:	20000258 	.word	0x20000258

080057cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d0:	b090      	sub	sp, #64	; 0x40
 80057d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
 80057d8:	2300      	movs	r3, #0
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057dc:	2300      	movs	r3, #0
 80057de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057e4:	4b59      	ldr	r3, [pc, #356]	; (800594c <HAL_RCC_GetSysClockFreq+0x180>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d00d      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x40>
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	f200 80a1 	bhi.w	8005938 <HAL_RCC_GetSysClockFreq+0x16c>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_RCC_GetSysClockFreq+0x34>
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d003      	beq.n	8005806 <HAL_RCC_GetSysClockFreq+0x3a>
 80057fe:	e09b      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005800:	4b53      	ldr	r3, [pc, #332]	; (8005950 <HAL_RCC_GetSysClockFreq+0x184>)
 8005802:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005804:	e09b      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005806:	4b53      	ldr	r3, [pc, #332]	; (8005954 <HAL_RCC_GetSysClockFreq+0x188>)
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800580a:	e098      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800580c:	4b4f      	ldr	r3, [pc, #316]	; (800594c <HAL_RCC_GetSysClockFreq+0x180>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005816:	4b4d      	ldr	r3, [pc, #308]	; (800594c <HAL_RCC_GetSysClockFreq+0x180>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d028      	beq.n	8005874 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005822:	4b4a      	ldr	r3, [pc, #296]	; (800594c <HAL_RCC_GetSysClockFreq+0x180>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	099b      	lsrs	r3, r3, #6
 8005828:	2200      	movs	r2, #0
 800582a:	623b      	str	r3, [r7, #32]
 800582c:	627a      	str	r2, [r7, #36]	; 0x24
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005834:	2100      	movs	r1, #0
 8005836:	4b47      	ldr	r3, [pc, #284]	; (8005954 <HAL_RCC_GetSysClockFreq+0x188>)
 8005838:	fb03 f201 	mul.w	r2, r3, r1
 800583c:	2300      	movs	r3, #0
 800583e:	fb00 f303 	mul.w	r3, r0, r3
 8005842:	4413      	add	r3, r2
 8005844:	4a43      	ldr	r2, [pc, #268]	; (8005954 <HAL_RCC_GetSysClockFreq+0x188>)
 8005846:	fba0 1202 	umull	r1, r2, r0, r2
 800584a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800584c:	460a      	mov	r2, r1
 800584e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005852:	4413      	add	r3, r2
 8005854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	2200      	movs	r2, #0
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	61fa      	str	r2, [r7, #28]
 800585e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005862:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005866:	f7fa fd1b 	bl	80002a0 <__aeabi_uldivmod>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4613      	mov	r3, r2
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005872:	e053      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005874:	4b35      	ldr	r3, [pc, #212]	; (800594c <HAL_RCC_GetSysClockFreq+0x180>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	099b      	lsrs	r3, r3, #6
 800587a:	2200      	movs	r2, #0
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	617a      	str	r2, [r7, #20]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005886:	f04f 0b00 	mov.w	fp, #0
 800588a:	4652      	mov	r2, sl
 800588c:	465b      	mov	r3, fp
 800588e:	f04f 0000 	mov.w	r0, #0
 8005892:	f04f 0100 	mov.w	r1, #0
 8005896:	0159      	lsls	r1, r3, #5
 8005898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800589c:	0150      	lsls	r0, r2, #5
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	ebb2 080a 	subs.w	r8, r2, sl
 80058a6:	eb63 090b 	sbc.w	r9, r3, fp
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80058b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80058ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80058be:	ebb2 0408 	subs.w	r4, r2, r8
 80058c2:	eb63 0509 	sbc.w	r5, r3, r9
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	00eb      	lsls	r3, r5, #3
 80058d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d4:	00e2      	lsls	r2, r4, #3
 80058d6:	4614      	mov	r4, r2
 80058d8:	461d      	mov	r5, r3
 80058da:	eb14 030a 	adds.w	r3, r4, sl
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	eb45 030b 	adc.w	r3, r5, fp
 80058e4:	607b      	str	r3, [r7, #4]
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058f2:	4629      	mov	r1, r5
 80058f4:	028b      	lsls	r3, r1, #10
 80058f6:	4621      	mov	r1, r4
 80058f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058fc:	4621      	mov	r1, r4
 80058fe:	028a      	lsls	r2, r1, #10
 8005900:	4610      	mov	r0, r2
 8005902:	4619      	mov	r1, r3
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	2200      	movs	r2, #0
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	60fa      	str	r2, [r7, #12]
 800590c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005910:	f7fa fcc6 	bl	80002a0 <__aeabi_uldivmod>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4613      	mov	r3, r2
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <HAL_RCC_GetSysClockFreq+0x180>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	0c1b      	lsrs	r3, r3, #16
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	3301      	adds	r3, #1
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800592c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005936:	e002      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_RCC_GetSysClockFreq+0x184>)
 800593a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800593c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005940:	4618      	mov	r0, r3
 8005942:	3740      	adds	r7, #64	; 0x40
 8005944:	46bd      	mov	sp, r7
 8005946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800594a:	bf00      	nop
 800594c:	40023800 	.word	0x40023800
 8005950:	00f42400 	.word	0x00f42400
 8005954:	017d7840 	.word	0x017d7840

08005958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <HAL_RCC_GetHCLKFreq+0x14>)
 800595e:	681b      	ldr	r3, [r3, #0]
}
 8005960:	4618      	mov	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000254 	.word	0x20000254

08005970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005974:	f7ff fff0 	bl	8005958 <HAL_RCC_GetHCLKFreq>
 8005978:	4602      	mov	r2, r0
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	0a9b      	lsrs	r3, r3, #10
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	4903      	ldr	r1, [pc, #12]	; (8005994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005986:	5ccb      	ldrb	r3, [r1, r3]
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800598c:	4618      	mov	r0, r3
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40023800 	.word	0x40023800
 8005994:	08009ba8 	.word	0x08009ba8

08005998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800599c:	f7ff ffdc 	bl	8005958 <HAL_RCC_GetHCLKFreq>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	0b5b      	lsrs	r3, r3, #13
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	4903      	ldr	r1, [pc, #12]	; (80059bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ae:	5ccb      	ldrb	r3, [r1, r3]
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40023800 	.word	0x40023800
 80059bc:	08009ba8 	.word	0x08009ba8

080059c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10b      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d075      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059f4:	4b91      	ldr	r3, [pc, #580]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059fa:	f7fd faf1 	bl	8002fe0 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a00:	e008      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a02:	f7fd faed 	bl	8002fe0 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e189      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a14:	4b8a      	ldr	r3, [pc, #552]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f0      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d009      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	019a      	lsls	r2, r3, #6
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	071b      	lsls	r3, r3, #28
 8005a38:	4981      	ldr	r1, [pc, #516]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01f      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a4c:	4b7c      	ldr	r3, [pc, #496]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a52:	0f1b      	lsrs	r3, r3, #28
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	019a      	lsls	r2, r3, #6
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	061b      	lsls	r3, r3, #24
 8005a66:	431a      	orrs	r2, r3
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	071b      	lsls	r3, r3, #28
 8005a6c:	4974      	ldr	r1, [pc, #464]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a74:	4b72      	ldr	r3, [pc, #456]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a7a:	f023 021f 	bic.w	r2, r3, #31
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	496e      	ldr	r1, [pc, #440]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00d      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	019a      	lsls	r2, r3, #6
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	061b      	lsls	r3, r3, #24
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	071b      	lsls	r3, r3, #28
 8005aac:	4964      	ldr	r1, [pc, #400]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ab4:	4b61      	ldr	r3, [pc, #388]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005aba:	f7fd fa91 	bl	8002fe0 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ac2:	f7fd fa8d 	bl	8002fe0 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e129      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ad4:	4b5a      	ldr	r3, [pc, #360]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d105      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d079      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005af8:	4b52      	ldr	r3, [pc, #328]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005afe:	f7fd fa6f 	bl	8002fe0 <HAL_GetTick>
 8005b02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b04:	e008      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005b06:	f7fd fa6b 	bl	8002fe0 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e107      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b18:	4b49      	ldr	r3, [pc, #292]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b24:	d0ef      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d020      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b32:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	0f1b      	lsrs	r3, r3, #28
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	019a      	lsls	r2, r3, #6
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	061b      	lsls	r3, r3, #24
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	071b      	lsls	r3, r3, #28
 8005b52:	493b      	ldr	r1, [pc, #236]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b5a:	4b39      	ldr	r3, [pc, #228]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	4934      	ldr	r1, [pc, #208]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01e      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b80:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	0e1b      	lsrs	r3, r3, #24
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	019a      	lsls	r2, r3, #6
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	061b      	lsls	r3, r3, #24
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	071b      	lsls	r3, r3, #28
 8005ba0:	4927      	ldr	r1, [pc, #156]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ba8:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	4922      	ldr	r1, [pc, #136]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bbe:	4b21      	ldr	r3, [pc, #132]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bc4:	f7fd fa0c 	bl	8002fe0 <HAL_GetTick>
 8005bc8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005bcc:	f7fd fa08 	bl	8002fe0 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e0a4      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bde:	4b18      	ldr	r3, [pc, #96]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bea:	d1ef      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 808b 	beq.w	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	4a0f      	ldr	r2, [pc, #60]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c08:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c22:	f7fd f9dd 	bl	8002fe0 <HAL_GetTick>
 8005c26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c28:	e010      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c2a:	f7fd f9d9 	bl	8002fe0 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d909      	bls.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e075      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005c3c:	42470068 	.word	0x42470068
 8005c40:	40023800 	.word	0x40023800
 8005c44:	42470070 	.word	0x42470070
 8005c48:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c4c:	4b38      	ldr	r3, [pc, #224]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0e8      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c58:	4b36      	ldr	r3, [pc, #216]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02f      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d028      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c76:	4b2f      	ldr	r3, [pc, #188]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c80:	4b2d      	ldr	r3, [pc, #180]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c86:	4b2c      	ldr	r3, [pc, #176]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c8c:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c92:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d114      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c9e:	f7fd f99f 	bl	8002fe0 <HAL_GetTick>
 8005ca2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca4:	e00a      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca6:	f7fd f99b 	bl	8002fe0 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e035      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cbc:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0ee      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd4:	d10d      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005cd6:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	4912      	ldr	r1, [pc, #72]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	608b      	str	r3, [r1, #8]
 8005cf0:	e005      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005cf2:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	4a0f      	ldr	r2, [pc, #60]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cf8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cfc:	6093      	str	r3, [r2, #8]
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d0a:	490a      	ldr	r1, [pc, #40]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005d24:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40007000 	.word	0x40007000
 8005d34:	40023800 	.word	0x40023800
 8005d38:	42470e40 	.word	0x42470e40
 8005d3c:	424711e0 	.word	0x424711e0

08005d40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e066      	b.n	8005e24 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	7f5b      	ldrb	r3, [r3, #29]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fc fd54 	bl	8002814 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	22ca      	movs	r2, #202	; 0xca
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2253      	movs	r2, #83	; 0x53
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa45 	bl	8006212 <RTC_EnterInitMode>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d12c      	bne.n	8005dec <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6899      	ldr	r1, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	68d2      	ldr	r2, [r2, #12]
 8005dcc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6919      	ldr	r1, [r3, #16]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	041a      	lsls	r2, r3, #16
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa4c 	bl	8006280 <RTC_ExitInitMode>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d113      	bne.n	8005e1a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	22ff      	movs	r2, #255	; 0xff
 8005e20:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	7f1b      	ldrb	r3, [r3, #28]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_RTC_SetTime+0x1c>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e087      	b.n	8005f58 <HAL_RTC_SetTime+0x12c>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2202      	movs	r2, #2
 8005e52:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d126      	bne.n	8005ea8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fa29 	bl	80062ca <RTC_ByteToBcd2>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fa22 	bl	80062ca <RTC_ByteToBcd2>
 8005e86:	4603      	mov	r3, r0
 8005e88:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e8a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	789b      	ldrb	r3, [r3, #2]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fa1a 	bl	80062ca <RTC_ByteToBcd2>
 8005e96:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e98:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	78db      	ldrb	r3, [r3, #3]
 8005ea0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e018      	b.n	8005eda <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ec8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ece:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	78db      	ldrb	r3, [r3, #3]
 8005ed4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	22ca      	movs	r2, #202	; 0xca
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2253      	movs	r2, #83	; 0x53
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f991 	bl	8006212 <RTC_EnterInitMode>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d120      	bne.n	8005f3c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f08:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6899      	ldr	r1, [r3, #8]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f9a4 	bl	8006280 <RTC_ExitInitMode>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005f3c:	7cfb      	ldrb	r3, [r7, #19]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	22ff      	movs	r2, #255	; 0xff
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	771a      	strb	r2, [r3, #28]

  return status;
 8005f56:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd90      	pop	{r4, r7, pc}

08005f60 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	0c1b      	lsrs	r3, r3, #16
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	0a1b      	lsrs	r3, r3, #8
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	0d9b      	lsrs	r3, r3, #22
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d11a      	bne.n	8006012 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 f98f 	bl	8006304 <RTC_Bcd2ToByte>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f986 	bl	8006304 <RTC_Bcd2ToByte>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	789b      	ldrb	r3, [r3, #2]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f97d 	bl	8006304 <RTC_Bcd2ToByte>
 800600a:	4603      	mov	r3, r0
 800600c:	461a      	mov	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	7f1b      	ldrb	r3, [r3, #28]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_RTC_SetDate+0x1c>
 8006034:	2302      	movs	r3, #2
 8006036:	e071      	b.n	800611c <HAL_RTC_SetDate+0x100>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2202      	movs	r2, #2
 8006042:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10e      	bne.n	8006068 <HAL_RTC_SetDate+0x4c>
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	785b      	ldrb	r3, [r3, #1]
 800605a:	f023 0310 	bic.w	r3, r3, #16
 800605e:	b2db      	uxtb	r3, r3
 8006060:	330a      	adds	r3, #10
 8006062:	b2da      	uxtb	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d11c      	bne.n	80060a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	78db      	ldrb	r3, [r3, #3]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f929 	bl	80062ca <RTC_ByteToBcd2>
 8006078:	4603      	mov	r3, r0
 800607a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 f922 	bl	80062ca <RTC_ByteToBcd2>
 8006086:	4603      	mov	r3, r0
 8006088:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800608a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	789b      	ldrb	r3, [r3, #2]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 f91a 	bl	80062ca <RTC_ByteToBcd2>
 8006096:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006098:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	e00e      	b.n	80060c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	78db      	ldrb	r3, [r3, #3]
 80060ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060b4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	22ca      	movs	r2, #202	; 0xca
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2253      	movs	r2, #83	; 0x53
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 f89b 	bl	8006212 <RTC_EnterInitMode>
 80060dc:	4603      	mov	r3, r0
 80060de:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80060e0:	7cfb      	ldrb	r3, [r7, #19]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10c      	bne.n	8006100 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f8c2 	bl	8006280 <RTC_ExitInitMode>
 80060fc:	4603      	mov	r3, r0
 80060fe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006100:	7cfb      	ldrb	r3, [r7, #19]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	22ff      	movs	r2, #255	; 0xff
 8006112:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	771a      	strb	r2, [r3, #28]

  return status;
 800611a:	7cfb      	ldrb	r3, [r7, #19]
}
 800611c:	4618      	mov	r0, r3
 800611e:	371c      	adds	r7, #28
 8006120:	46bd      	mov	sp, r7
 8006122:	bd90      	pop	{r4, r7, pc}

08006124 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800613e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006142:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	0c1b      	lsrs	r3, r3, #16
 8006148:	b2da      	uxtb	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	0a1b      	lsrs	r3, r3, #8
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	b2da      	uxtb	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006166:	b2da      	uxtb	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	0b5b      	lsrs	r3, r3, #13
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	b2da      	uxtb	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d11a      	bne.n	80061b8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	78db      	ldrb	r3, [r3, #3]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 f8bc 	bl	8006304 <RTC_Bcd2ToByte>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	4618      	mov	r0, r3
 800619a:	f000 f8b3 	bl	8006304 <RTC_Bcd2ToByte>
 800619e:	4603      	mov	r3, r0
 80061a0:	461a      	mov	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	789b      	ldrb	r3, [r3, #2]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f8aa 	bl	8006304 <RTC_Bcd2ToByte>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061dc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061de:	f7fc feff 	bl	8002fe0 <HAL_GetTick>
 80061e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061e4:	e009      	b.n	80061fa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061e6:	f7fc fefb 	bl	8002fe0 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061f4:	d901      	bls.n	80061fa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e007      	b.n	800620a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0ee      	beq.n	80061e6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d122      	bne.n	8006276 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800623e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006240:	f7fc fece 	bl	8002fe0 <HAL_GetTick>
 8006244:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006246:	e00c      	b.n	8006262 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006248:	f7fc feca 	bl	8002fe0 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006256:	d904      	bls.n	8006262 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2204      	movs	r2, #4
 800625c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <RTC_EnterInitMode+0x64>
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d1e8      	bne.n	8006248 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006276:	7bfb      	ldrb	r3, [r7, #15]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800629a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff ff89 	bl	80061c2 <HAL_RTC_WaitForSynchro>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2204      	movs	r2, #4
 80062ba:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	4603      	mov	r3, r0
 80062d2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80062d8:	e005      	b.n	80062e6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	3301      	adds	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	3b0a      	subs	r3, #10
 80062e4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	2b09      	cmp	r3, #9
 80062ea:	d8f6      	bhi.n	80062da <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	b2db      	uxtb	r3, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	b2db      	uxtb	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	0092      	lsls	r2, r2, #2
 800631c:	4413      	add	r3, r2
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	b2da      	uxtb	r2, r3
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	4413      	add	r3, r2
 800632e:	b2db      	uxtb	r3, r3
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e041      	b.n	80063d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fc fc68 	bl	8002c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f000 fcea 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d001      	beq.n	80063f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e04e      	b.n	8006492 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a23      	ldr	r2, [pc, #140]	; (80064a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d022      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641e:	d01d      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d018      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1e      	ldr	r2, [pc, #120]	; (80064a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <HAL_TIM_Base_Start_IT+0xd0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00e      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d009      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a19      	ldr	r2, [pc, #100]	; (80064b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d111      	bne.n	8006480 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b06      	cmp	r3, #6
 800646c:	d010      	beq.n	8006490 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647e:	e007      	b.n	8006490 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40010000 	.word	0x40010000
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800
 80064ac:	40000c00 	.word	0x40000c00
 80064b0:	40010400 	.word	0x40010400
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40001800 	.word	0x40001800

080064bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e041      	b.n	8006552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f839 	bl	800655a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f000 fc2a 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
	...

08006570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <HAL_TIM_PWM_Start+0x24>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	e022      	b.n	80065da <HAL_TIM_PWM_Start+0x6a>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b04      	cmp	r3, #4
 8006598:	d109      	bne.n	80065ae <HAL_TIM_PWM_Start+0x3e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	bf14      	ite	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	2300      	moveq	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	e015      	b.n	80065da <HAL_TIM_PWM_Start+0x6a>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d109      	bne.n	80065c8 <HAL_TIM_PWM_Start+0x58>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e008      	b.n	80065da <HAL_TIM_PWM_Start+0x6a>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e07c      	b.n	80066dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <HAL_TIM_PWM_Start+0x82>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f0:	e013      	b.n	800661a <HAL_TIM_PWM_Start+0xaa>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d104      	bne.n	8006602 <HAL_TIM_PWM_Start+0x92>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006600:	e00b      	b.n	800661a <HAL_TIM_PWM_Start+0xaa>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d104      	bne.n	8006612 <HAL_TIM_PWM_Start+0xa2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006610:	e003      	b.n	800661a <HAL_TIM_PWM_Start+0xaa>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2201      	movs	r2, #1
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fe80 	bl	8007328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a2d      	ldr	r2, [pc, #180]	; (80066e4 <HAL_TIM_PWM_Start+0x174>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_TIM_PWM_Start+0xcc>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a2c      	ldr	r2, [pc, #176]	; (80066e8 <HAL_TIM_PWM_Start+0x178>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d101      	bne.n	8006640 <HAL_TIM_PWM_Start+0xd0>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <HAL_TIM_PWM_Start+0xd2>
 8006640:	2300      	movs	r3, #0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d007      	beq.n	8006656 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a22      	ldr	r2, [pc, #136]	; (80066e4 <HAL_TIM_PWM_Start+0x174>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d022      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006668:	d01d      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1f      	ldr	r2, [pc, #124]	; (80066ec <HAL_TIM_PWM_Start+0x17c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d018      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1d      	ldr	r2, [pc, #116]	; (80066f0 <HAL_TIM_PWM_Start+0x180>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1c      	ldr	r2, [pc, #112]	; (80066f4 <HAL_TIM_PWM_Start+0x184>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00e      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <HAL_TIM_PWM_Start+0x178>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d009      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <HAL_TIM_PWM_Start+0x188>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a16      	ldr	r2, [pc, #88]	; (80066fc <HAL_TIM_PWM_Start+0x18c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d111      	bne.n	80066ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	d010      	beq.n	80066da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c8:	e007      	b.n	80066da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0201 	orr.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	40000c00 	.word	0x40000c00
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40001800 	.word	0x40001800

08006700 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2200      	movs	r2, #0
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fe08 	bl	8007328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2e      	ldr	r2, [pc, #184]	; (80067d8 <HAL_TIM_PWM_Stop+0xd8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_TIM_PWM_Stop+0x2c>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <HAL_TIM_PWM_Stop+0xdc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d101      	bne.n	8006730 <HAL_TIM_PWM_Stop+0x30>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <HAL_TIM_PWM_Stop+0x32>
 8006730:	2300      	movs	r3, #0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d017      	beq.n	8006766 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006740:	4013      	ands	r3, r2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10f      	bne.n	8006766 <HAL_TIM_PWM_Stop+0x66>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6a1a      	ldr	r2, [r3, #32]
 800674c:	f240 4344 	movw	r3, #1092	; 0x444
 8006750:	4013      	ands	r3, r2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d107      	bne.n	8006766 <HAL_TIM_PWM_Stop+0x66>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006764:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6a1a      	ldr	r2, [r3, #32]
 800676c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006770:	4013      	ands	r3, r2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10f      	bne.n	8006796 <HAL_TIM_PWM_Stop+0x96>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	f240 4344 	movw	r3, #1092	; 0x444
 8006780:	4013      	ands	r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d107      	bne.n	8006796 <HAL_TIM_PWM_Stop+0x96>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <HAL_TIM_PWM_Stop+0xa6>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067a4:	e013      	b.n	80067ce <HAL_TIM_PWM_Stop+0xce>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d104      	bne.n	80067b6 <HAL_TIM_PWM_Stop+0xb6>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067b4:	e00b      	b.n	80067ce <HAL_TIM_PWM_Stop+0xce>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d104      	bne.n	80067c6 <HAL_TIM_PWM_Stop+0xc6>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c4:	e003      	b.n	80067ce <HAL_TIM_PWM_Stop+0xce>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40010400 	.word	0x40010400

080067e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d122      	bne.n	800683c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b02      	cmp	r3, #2
 8006802:	d11b      	bne.n	800683c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0202 	mvn.w	r2, #2
 800680c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa77 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006828:	e005      	b.n	8006836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa69 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fa7a 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b04      	cmp	r3, #4
 8006848:	d122      	bne.n	8006890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b04      	cmp	r3, #4
 8006856:	d11b      	bne.n	8006890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f06f 0204 	mvn.w	r2, #4
 8006860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa4d 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 800687c:	e005      	b.n	800688a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa3f 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fa50 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b08      	cmp	r3, #8
 800689c:	d122      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d11b      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0208 	mvn.w	r2, #8
 80068b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2204      	movs	r2, #4
 80068ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa23 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 80068d0:	e005      	b.n	80068de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa15 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fa26 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0310 	and.w	r3, r3, #16
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	d122      	bne.n	8006938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d11b      	bne.n	8006938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0210 	mvn.w	r2, #16
 8006908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2208      	movs	r2, #8
 800690e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f9f9 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006924:	e005      	b.n	8006932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f9eb 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f9fc 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b01      	cmp	r3, #1
 8006944:	d10e      	bne.n	8006964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b01      	cmp	r3, #1
 8006952:	d107      	bne.n	8006964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0201 	mvn.w	r2, #1
 800695c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fa fdee 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696e:	2b80      	cmp	r3, #128	; 0x80
 8006970:	d10e      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697c:	2b80      	cmp	r3, #128	; 0x80
 800697e:	d107      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fd78 	bl	8007480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d10e      	bne.n	80069bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d107      	bne.n	80069bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f9c1 	bl	8006d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d10e      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d107      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0220 	mvn.w	r2, #32
 80069e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fd42 	bl	800746c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e0ae      	b.n	8006b6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b0c      	cmp	r3, #12
 8006a1a:	f200 809f 	bhi.w	8006b5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a59 	.word	0x08006a59
 8006a28:	08006b5d 	.word	0x08006b5d
 8006a2c:	08006b5d 	.word	0x08006b5d
 8006a30:	08006b5d 	.word	0x08006b5d
 8006a34:	08006a99 	.word	0x08006a99
 8006a38:	08006b5d 	.word	0x08006b5d
 8006a3c:	08006b5d 	.word	0x08006b5d
 8006a40:	08006b5d 	.word	0x08006b5d
 8006a44:	08006adb 	.word	0x08006adb
 8006a48:	08006b5d 	.word	0x08006b5d
 8006a4c:	08006b5d 	.word	0x08006b5d
 8006a50:	08006b5d 	.word	0x08006b5d
 8006a54:	08006b1b 	.word	0x08006b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fa18 	bl	8006e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0208 	orr.w	r2, r2, #8
 8006a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0204 	bic.w	r2, r2, #4
 8006a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6999      	ldr	r1, [r3, #24]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	691a      	ldr	r2, [r3, #16]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	619a      	str	r2, [r3, #24]
      break;
 8006a96:	e064      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fa68 	bl	8006f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6999      	ldr	r1, [r3, #24]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	021a      	lsls	r2, r3, #8
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	619a      	str	r2, [r3, #24]
      break;
 8006ad8:	e043      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fabd 	bl	8007060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0208 	orr.w	r2, r2, #8
 8006af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0204 	bic.w	r2, r2, #4
 8006b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69d9      	ldr	r1, [r3, #28]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	61da      	str	r2, [r3, #28]
      break;
 8006b18:	e023      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fb11 	bl	8007148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69d9      	ldr	r1, [r3, #28]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	021a      	lsls	r2, r3, #8
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	61da      	str	r2, [r3, #28]
      break;
 8006b5a:	e002      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIM_ConfigClockSource+0x1c>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e0b4      	b.n	8006cfa <HAL_TIM_ConfigClockSource+0x186>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc8:	d03e      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0xd4>
 8006bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bce:	f200 8087 	bhi.w	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd6:	f000 8086 	beq.w	8006ce6 <HAL_TIM_ConfigClockSource+0x172>
 8006bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bde:	d87f      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b70      	cmp	r3, #112	; 0x70
 8006be2:	d01a      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0xa6>
 8006be4:	2b70      	cmp	r3, #112	; 0x70
 8006be6:	d87b      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b60      	cmp	r3, #96	; 0x60
 8006bea:	d050      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x11a>
 8006bec:	2b60      	cmp	r3, #96	; 0x60
 8006bee:	d877      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b50      	cmp	r3, #80	; 0x50
 8006bf2:	d03c      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0xfa>
 8006bf4:	2b50      	cmp	r3, #80	; 0x50
 8006bf6:	d873      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d058      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x13a>
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	d86f      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	d064      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d86b      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d060      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d867      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d05c      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d05a      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c18:	e062      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6899      	ldr	r1, [r3, #8]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f000 fb5d 	bl	80072e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	609a      	str	r2, [r3, #8]
      break;
 8006c46:	e04f      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	6899      	ldr	r1, [r3, #8]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f000 fb46 	bl	80072e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c6a:	609a      	str	r2, [r3, #8]
      break;
 8006c6c:	e03c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 faba 	bl	80071f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2150      	movs	r1, #80	; 0x50
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fb13 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e02c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f000 fad9 	bl	8007252 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2160      	movs	r1, #96	; 0x60
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fb03 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006cac:	e01c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6859      	ldr	r1, [r3, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f000 fa9a 	bl	80071f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2140      	movs	r1, #64	; 0x40
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 faf3 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006ccc:	e00c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f000 faea 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006cde:	e003      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce4:	e000      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d013      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d00f      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a3c      	ldr	r2, [pc, #240]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3b      	ldr	r2, [pc, #236]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a3a      	ldr	r2, [pc, #232]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2f      	ldr	r2, [pc, #188]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d02b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d027      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d023      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2b      	ldr	r2, [pc, #172]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2a      	ldr	r2, [pc, #168]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a29      	ldr	r2, [pc, #164]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d017      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a28      	ldr	r2, [pc, #160]	; (8006e7c <TIM_Base_SetConfig+0x128>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a27      	ldr	r2, [pc, #156]	; (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a26      	ldr	r2, [pc, #152]	; (8006e84 <TIM_Base_SetConfig+0x130>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a25      	ldr	r2, [pc, #148]	; (8006e88 <TIM_Base_SetConfig+0x134>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a24      	ldr	r2, [pc, #144]	; (8006e8c <TIM_Base_SetConfig+0x138>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <TIM_Base_SetConfig+0x13c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_Base_SetConfig+0xf8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800
 8006e88:	40001800 	.word	0x40001800
 8006e8c:	40001c00 	.word	0x40001c00
 8006e90:	40002000 	.word	0x40002000

08006e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f023 0302 	bic.w	r3, r3, #2
 8006edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <TIM_OC1_SetConfig+0xd8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_OC1_SetConfig+0x64>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <TIM_OC1_SetConfig+0xdc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d10c      	bne.n	8006f12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f023 0308 	bic.w	r3, r3, #8
 8006efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 0304 	bic.w	r3, r3, #4
 8006f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <TIM_OC1_SetConfig+0xd8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC1_SetConfig+0x8e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a14      	ldr	r2, [pc, #80]	; (8006f70 <TIM_OC1_SetConfig+0xdc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d111      	bne.n	8006f46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40010400 	.word	0x40010400

08006f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 0210 	bic.w	r2, r3, #16
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f023 0320 	bic.w	r3, r3, #32
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a22      	ldr	r2, [pc, #136]	; (8007058 <TIM_OC2_SetConfig+0xe4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_OC2_SetConfig+0x68>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a21      	ldr	r2, [pc, #132]	; (800705c <TIM_OC2_SetConfig+0xe8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d10d      	bne.n	8006ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a17      	ldr	r2, [pc, #92]	; (8007058 <TIM_OC2_SetConfig+0xe4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC2_SetConfig+0x94>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a16      	ldr	r2, [pc, #88]	; (800705c <TIM_OC2_SetConfig+0xe8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d113      	bne.n	8007030 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40010000 	.word	0x40010000
 800705c:	40010400 	.word	0x40010400

08007060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a21      	ldr	r2, [pc, #132]	; (8007140 <TIM_OC3_SetConfig+0xe0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d003      	beq.n	80070c6 <TIM_OC3_SetConfig+0x66>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a20      	ldr	r2, [pc, #128]	; (8007144 <TIM_OC3_SetConfig+0xe4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d10d      	bne.n	80070e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a16      	ldr	r2, [pc, #88]	; (8007140 <TIM_OC3_SetConfig+0xe0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_OC3_SetConfig+0x92>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a15      	ldr	r2, [pc, #84]	; (8007144 <TIM_OC3_SetConfig+0xe4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d113      	bne.n	800711a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	621a      	str	r2, [r3, #32]
}
 8007134:	bf00      	nop
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40010000 	.word	0x40010000
 8007144:	40010400 	.word	0x40010400

08007148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	031b      	lsls	r3, r3, #12
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a12      	ldr	r2, [pc, #72]	; (80071ec <TIM_OC4_SetConfig+0xa4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_OC4_SetConfig+0x68>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <TIM_OC4_SetConfig+0xa8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d109      	bne.n	80071c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	019b      	lsls	r3, r3, #6
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40010400 	.word	0x40010400

080071f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0201 	bic.w	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800721e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 030a 	bic.w	r3, r3, #10
 8007230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0210 	bic.w	r2, r3, #16
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800727c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	031b      	lsls	r3, r3, #12
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800728e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f043 0307 	orr.w	r3, r3, #7
 80072d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	609a      	str	r2, [r3, #8]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	431a      	orrs	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	609a      	str	r2, [r3, #8]
}
 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2201      	movs	r2, #1
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	43db      	mvns	r3, r3
 800734a:	401a      	ands	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1a      	ldr	r2, [r3, #32]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	fa01 f303 	lsl.w	r3, r1, r3
 8007360:	431a      	orrs	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	621a      	str	r2, [r3, #32]
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
	...

08007374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007388:	2302      	movs	r3, #2
 800738a:	e05a      	b.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a21      	ldr	r2, [pc, #132]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d022      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d8:	d01d      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a1d      	ldr	r2, [pc, #116]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d018      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a1b      	ldr	r2, [pc, #108]	; (8007458 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d013      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a1a      	ldr	r2, [pc, #104]	; (800745c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00e      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a18      	ldr	r2, [pc, #96]	; (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d009      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a17      	ldr	r2, [pc, #92]	; (8007464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d004      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a15      	ldr	r2, [pc, #84]	; (8007468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d10c      	bne.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800741c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	4313      	orrs	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40010000 	.word	0x40010000
 8007454:	40000400 	.word	0x40000400
 8007458:	40000800 	.word	0x40000800
 800745c:	40000c00 	.word	0x40000c00
 8007460:	40010400 	.word	0x40010400
 8007464:	40014000 	.word	0x40014000
 8007468:	40001800 	.word	0x40001800

0800746c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e03f      	b.n	8007526 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d106      	bne.n	80074c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fb fc84 	bl	8002dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2224      	movs	r2, #36	; 0x24
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fddf 	bl	800809c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695a      	ldr	r2, [r3, #20]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800750c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2220      	movs	r2, #32
 8007520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b08a      	sub	sp, #40	; 0x28
 8007532:	af02      	add	r7, sp, #8
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	603b      	str	r3, [r7, #0]
 800753a:	4613      	mov	r3, r2
 800753c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b20      	cmp	r3, #32
 800754c:	d17c      	bne.n	8007648 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <HAL_UART_Transmit+0x2c>
 8007554:	88fb      	ldrh	r3, [r7, #6]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e075      	b.n	800764a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_UART_Transmit+0x3e>
 8007568:	2302      	movs	r3, #2
 800756a:	e06e      	b.n	800764a <HAL_UART_Transmit+0x11c>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2221      	movs	r2, #33	; 0x21
 800757e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007582:	f7fb fd2d 	bl	8002fe0 <HAL_GetTick>
 8007586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759c:	d108      	bne.n	80075b0 <HAL_UART_Transmit+0x82>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	e003      	b.n	80075b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80075c0:	e02a      	b.n	8007618 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2200      	movs	r2, #0
 80075ca:	2180      	movs	r1, #128	; 0x80
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fb1f 	bl	8007c10 <UART_WaitOnFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e036      	b.n	800764a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10b      	bne.n	80075fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	3302      	adds	r3, #2
 80075f6:	61bb      	str	r3, [r7, #24]
 80075f8:	e007      	b.n	800760a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	3301      	adds	r3, #1
 8007608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1cf      	bne.n	80075c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2200      	movs	r2, #0
 800762a:	2140      	movs	r1, #64	; 0x40
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 faef 	bl	8007c10 <UART_WaitOnFlagUntilTimeout>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e006      	b.n	800764a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2220      	movs	r2, #32
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	e000      	b.n	800764a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007648:	2302      	movs	r3, #2
  }
}
 800764a:	4618      	mov	r0, r3
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	4613      	mov	r3, r2
 800765e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b20      	cmp	r3, #32
 800766a:	d11d      	bne.n	80076a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <HAL_UART_Receive_IT+0x26>
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e016      	b.n	80076aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <HAL_UART_Receive_IT+0x38>
 8007686:	2302      	movs	r3, #2
 8007688:	e00f      	b.n	80076aa <HAL_UART_Receive_IT+0x58>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007698:	88fb      	ldrh	r3, [r7, #6]
 800769a:	461a      	mov	r2, r3
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fb24 	bl	8007cec <UART_Start_Receive_IT>
 80076a4:	4603      	mov	r3, r0
 80076a6:	e000      	b.n	80076aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80076a8:	2302      	movs	r3, #2
  }
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b0ba      	sub	sp, #232	; 0xe8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80076da:	2300      	movs	r3, #0
 80076dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80076f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10f      	bne.n	800771a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	d009      	beq.n	800771a <HAL_UART_IRQHandler+0x66>
 8007706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fc07 	bl	8007f26 <UART_Receive_IT>
      return;
 8007718:	e256      	b.n	8007bc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800771a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 80de 	beq.w	80078e0 <HAL_UART_IRQHandler+0x22c>
 8007724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	d106      	bne.n	800773e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007734:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 80d1 	beq.w	80078e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00b      	beq.n	8007762 <HAL_UART_IRQHandler+0xae>
 800774a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007752:	2b00      	cmp	r3, #0
 8007754:	d005      	beq.n	8007762 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	f043 0201 	orr.w	r2, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00b      	beq.n	8007786 <HAL_UART_IRQHandler+0xd2>
 800776e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	f043 0202 	orr.w	r2, r3, #2
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <HAL_UART_IRQHandler+0xf6>
 8007792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d005      	beq.n	80077aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	f043 0204 	orr.w	r2, r3, #4
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d011      	beq.n	80077da <HAL_UART_IRQHandler+0x126>
 80077b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d105      	bne.n	80077ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d005      	beq.n	80077da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f043 0208 	orr.w	r2, r3, #8
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 81ed 	beq.w	8007bbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <HAL_UART_IRQHandler+0x14e>
 80077f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fb92 	bl	8007f26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	bf0c      	ite	eq
 8007810:	2301      	moveq	r3, #1
 8007812:	2300      	movne	r3, #0
 8007814:	b2db      	uxtb	r3, r3
 8007816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d103      	bne.n	800782e <HAL_UART_IRQHandler+0x17a>
 8007826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d04f      	beq.n	80078ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa9a 	bl	8007d68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	d141      	bne.n	80078c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3314      	adds	r3, #20
 8007848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800785c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3314      	adds	r3, #20
 800786a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800786e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800787a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1d9      	bne.n	8007842 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	2b00      	cmp	r3, #0
 8007894:	d013      	beq.n	80078be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	4a7d      	ldr	r2, [pc, #500]	; (8007a90 <HAL_UART_IRQHandler+0x3dc>)
 800789c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fc f8d1 	bl	8003a4a <HAL_DMA_Abort_IT>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d016      	beq.n	80078dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	e00e      	b.n	80078dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f990 	bl	8007be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c4:	e00a      	b.n	80078dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f98c 	bl	8007be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078cc:	e006      	b.n	80078dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f988 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80078da:	e170      	b.n	8007bbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078dc:	bf00      	nop
    return;
 80078de:	e16e      	b.n	8007bbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	f040 814a 	bne.w	8007b7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ee:	f003 0310 	and.w	r3, r3, #16
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 8143 	beq.w	8007b7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 813c 	beq.w	8007b7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007906:	2300      	movs	r3, #0
 8007908:	60bb      	str	r3, [r7, #8]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60bb      	str	r3, [r7, #8]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	60bb      	str	r3, [r7, #8]
 800791a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007926:	2b40      	cmp	r3, #64	; 0x40
 8007928:	f040 80b4 	bne.w	8007a94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007938:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8140 	beq.w	8007bc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800794a:	429a      	cmp	r2, r3
 800794c:	f080 8139 	bcs.w	8007bc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007956:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007962:	f000 8088 	beq.w	8007a76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	330c      	adds	r3, #12
 800796c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800797c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007984:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007992:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800799e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1d9      	bne.n	8007966 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3314      	adds	r3, #20
 80079b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079c4:	f023 0301 	bic.w	r3, r3, #1
 80079c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3314      	adds	r3, #20
 80079d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e1      	bne.n	80079b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3314      	adds	r3, #20
 80079f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3314      	adds	r3, #20
 8007a0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e3      	bne.n	80079ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	330c      	adds	r3, #12
 8007a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a46:	f023 0310 	bic.w	r3, r3, #16
 8007a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	330c      	adds	r3, #12
 8007a54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a58:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e3      	bne.n	8007a34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fb ff7a 	bl	800396a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f8b6 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a8c:	e099      	b.n	8007bc2 <HAL_UART_IRQHandler+0x50e>
 8007a8e:	bf00      	nop
 8007a90:	08007e2f 	.word	0x08007e2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 808b 	beq.w	8007bc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 8086 	beq.w	8007bc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007acc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ade:	647a      	str	r2, [r7, #68]	; 0x44
 8007ae0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e3      	bne.n	8007aba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3314      	adds	r3, #20
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	623b      	str	r3, [r7, #32]
   return(result);
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	f023 0301 	bic.w	r3, r3, #1
 8007b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3314      	adds	r3, #20
 8007b12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b16:	633a      	str	r2, [r7, #48]	; 0x30
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e3      	bne.n	8007af2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	e853 3f00 	ldrex	r3, [r3]
 8007b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0310 	bic.w	r3, r3, #16
 8007b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	330c      	adds	r3, #12
 8007b58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b5c:	61fa      	str	r2, [r7, #28]
 8007b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	69b9      	ldr	r1, [r7, #24]
 8007b62:	69fa      	ldr	r2, [r7, #28]
 8007b64:	e841 2300 	strex	r3, r2, [r1]
 8007b68:	617b      	str	r3, [r7, #20]
   return(result);
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e3      	bne.n	8007b38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f83e 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b7c:	e023      	b.n	8007bc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d009      	beq.n	8007b9e <HAL_UART_IRQHandler+0x4ea>
 8007b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f95d 	bl	8007e56 <UART_Transmit_IT>
    return;
 8007b9c:	e014      	b.n	8007bc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00e      	beq.n	8007bc8 <HAL_UART_IRQHandler+0x514>
 8007baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d008      	beq.n	8007bc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f99d 	bl	8007ef6 <UART_EndTransmit_IT>
    return;
 8007bbc:	e004      	b.n	8007bc8 <HAL_UART_IRQHandler+0x514>
    return;
 8007bbe:	bf00      	nop
 8007bc0:	e002      	b.n	8007bc8 <HAL_UART_IRQHandler+0x514>
      return;
 8007bc2:	bf00      	nop
 8007bc4:	e000      	b.n	8007bc8 <HAL_UART_IRQHandler+0x514>
      return;
 8007bc6:	bf00      	nop
  }
}
 8007bc8:	37e8      	adds	r7, #232	; 0xe8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop

08007bd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b090      	sub	sp, #64	; 0x40
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	603b      	str	r3, [r7, #0]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c20:	e050      	b.n	8007cc4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c28:	d04c      	beq.n	8007cc4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d007      	beq.n	8007c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c30:	f7fb f9d6 	bl	8002fe0 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d241      	bcs.n	8007cc4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	330c      	adds	r3, #12
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c60:	637a      	str	r2, [r7, #52]	; 0x34
 8007c62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e5      	bne.n	8007c40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3314      	adds	r3, #20
 8007c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	613b      	str	r3, [r7, #16]
   return(result);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3314      	adds	r3, #20
 8007c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c94:	623a      	str	r2, [r7, #32]
 8007c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	69f9      	ldr	r1, [r7, #28]
 8007c9a:	6a3a      	ldr	r2, [r7, #32]
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e5      	bne.n	8007c74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e00f      	b.n	8007ce4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	bf0c      	ite	eq
 8007cd4:	2301      	moveq	r3, #1
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	461a      	mov	r2, r3
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d09f      	beq.n	8007c22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3740      	adds	r7, #64	; 0x40
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	88fa      	ldrh	r2, [r7, #6]
 8007d04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	88fa      	ldrh	r2, [r7, #6]
 8007d0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2222      	movs	r2, #34	; 0x22
 8007d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d38:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695a      	ldr	r2, [r3, #20]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0201 	orr.w	r2, r2, #1
 8007d48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0220 	orr.w	r2, r2, #32
 8007d58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b095      	sub	sp, #84	; 0x54
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	330c      	adds	r3, #12
 8007d76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d90:	643a      	str	r2, [r7, #64]	; 0x40
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e5      	bne.n	8007d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3314      	adds	r3, #20
 8007daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3314      	adds	r3, #20
 8007dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e5      	bne.n	8007da4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d119      	bne.n	8007e14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	330c      	adds	r3, #12
 8007de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f023 0310 	bic.w	r3, r3, #16
 8007df6:	647b      	str	r3, [r7, #68]	; 0x44
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e00:	61ba      	str	r2, [r7, #24]
 8007e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	6979      	ldr	r1, [r7, #20]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	e841 2300 	strex	r3, r2, [r1]
 8007e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e5      	bne.n	8007de0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e22:	bf00      	nop
 8007e24:	3754      	adds	r7, #84	; 0x54
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff fecb 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b21      	cmp	r3, #33	; 0x21
 8007e68:	d13e      	bne.n	8007ee8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e72:	d114      	bne.n	8007e9e <UART_Transmit_IT+0x48>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d110      	bne.n	8007e9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	1c9a      	adds	r2, r3, #2
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	621a      	str	r2, [r3, #32]
 8007e9c:	e008      	b.n	8007eb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	1c59      	adds	r1, r3, #1
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6211      	str	r1, [r2, #32]
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10f      	bne.n	8007ee4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ed2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ee2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	e000      	b.n	8007eea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ee8:	2302      	movs	r3, #2
  }
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7ff fe5a 	bl	8007bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b08c      	sub	sp, #48	; 0x30
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b22      	cmp	r3, #34	; 0x22
 8007f38:	f040 80ab 	bne.w	8008092 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f44:	d117      	bne.n	8007f76 <UART_Receive_IT+0x50>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d113      	bne.n	8007f76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	1c9a      	adds	r2, r3, #2
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	629a      	str	r2, [r3, #40]	; 0x28
 8007f74:	e026      	b.n	8007fc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f88:	d007      	beq.n	8007f9a <UART_Receive_IT+0x74>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <UART_Receive_IT+0x82>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e008      	b.n	8007fba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d15a      	bne.n	800808e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0220 	bic.w	r2, r2, #32
 8007fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	695a      	ldr	r2, [r3, #20]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0201 	bic.w	r2, r2, #1
 8008006:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2220      	movs	r2, #32
 800800c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008014:	2b01      	cmp	r3, #1
 8008016:	d135      	bne.n	8008084 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	330c      	adds	r3, #12
 8008024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	613b      	str	r3, [r7, #16]
   return(result);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f023 0310 	bic.w	r3, r3, #16
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	330c      	adds	r3, #12
 800803c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803e:	623a      	str	r2, [r7, #32]
 8008040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	69f9      	ldr	r1, [r7, #28]
 8008044:	6a3a      	ldr	r2, [r7, #32]
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	61bb      	str	r3, [r7, #24]
   return(result);
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e5      	bne.n	800801e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2b10      	cmp	r3, #16
 800805e:	d10a      	bne.n	8008076 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff fdbb 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
 8008082:	e002      	b.n	800808a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7f9 f981 	bl	800138c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	e002      	b.n	8008094 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	e000      	b.n	8008094 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008092:	2302      	movs	r3, #2
  }
}
 8008094:	4618      	mov	r0, r3
 8008096:	3730      	adds	r7, #48	; 0x30
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800809c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080a0:	b0c0      	sub	sp, #256	; 0x100
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b8:	68d9      	ldr	r1, [r3, #12]
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	ea40 0301 	orr.w	r3, r0, r1
 80080c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	431a      	orrs	r2, r3
 80080d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	431a      	orrs	r2, r3
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080f4:	f021 010c 	bic.w	r1, r1, #12
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008102:	430b      	orrs	r3, r1
 8008104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008116:	6999      	ldr	r1, [r3, #24]
 8008118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	ea40 0301 	orr.w	r3, r0, r1
 8008122:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4b8f      	ldr	r3, [pc, #572]	; (8008368 <UART_SetConfig+0x2cc>)
 800812c:	429a      	cmp	r2, r3
 800812e:	d005      	beq.n	800813c <UART_SetConfig+0xa0>
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b8d      	ldr	r3, [pc, #564]	; (800836c <UART_SetConfig+0x2d0>)
 8008138:	429a      	cmp	r2, r3
 800813a:	d104      	bne.n	8008146 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800813c:	f7fd fc2c 	bl	8005998 <HAL_RCC_GetPCLK2Freq>
 8008140:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008144:	e003      	b.n	800814e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008146:	f7fd fc13 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 800814a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800814e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008158:	f040 810c 	bne.w	8008374 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800815c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008160:	2200      	movs	r2, #0
 8008162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008166:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800816a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800816e:	4622      	mov	r2, r4
 8008170:	462b      	mov	r3, r5
 8008172:	1891      	adds	r1, r2, r2
 8008174:	65b9      	str	r1, [r7, #88]	; 0x58
 8008176:	415b      	adcs	r3, r3
 8008178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800817a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800817e:	4621      	mov	r1, r4
 8008180:	eb12 0801 	adds.w	r8, r2, r1
 8008184:	4629      	mov	r1, r5
 8008186:	eb43 0901 	adc.w	r9, r3, r1
 800818a:	f04f 0200 	mov.w	r2, #0
 800818e:	f04f 0300 	mov.w	r3, #0
 8008192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800819a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800819e:	4690      	mov	r8, r2
 80081a0:	4699      	mov	r9, r3
 80081a2:	4623      	mov	r3, r4
 80081a4:	eb18 0303 	adds.w	r3, r8, r3
 80081a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081ac:	462b      	mov	r3, r5
 80081ae:	eb49 0303 	adc.w	r3, r9, r3
 80081b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081ca:	460b      	mov	r3, r1
 80081cc:	18db      	adds	r3, r3, r3
 80081ce:	653b      	str	r3, [r7, #80]	; 0x50
 80081d0:	4613      	mov	r3, r2
 80081d2:	eb42 0303 	adc.w	r3, r2, r3
 80081d6:	657b      	str	r3, [r7, #84]	; 0x54
 80081d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081e0:	f7f8 f85e 	bl	80002a0 <__aeabi_uldivmod>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4b61      	ldr	r3, [pc, #388]	; (8008370 <UART_SetConfig+0x2d4>)
 80081ea:	fba3 2302 	umull	r2, r3, r3, r2
 80081ee:	095b      	lsrs	r3, r3, #5
 80081f0:	011c      	lsls	r4, r3, #4
 80081f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008200:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008204:	4642      	mov	r2, r8
 8008206:	464b      	mov	r3, r9
 8008208:	1891      	adds	r1, r2, r2
 800820a:	64b9      	str	r1, [r7, #72]	; 0x48
 800820c:	415b      	adcs	r3, r3
 800820e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008210:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008214:	4641      	mov	r1, r8
 8008216:	eb12 0a01 	adds.w	sl, r2, r1
 800821a:	4649      	mov	r1, r9
 800821c:	eb43 0b01 	adc.w	fp, r3, r1
 8008220:	f04f 0200 	mov.w	r2, #0
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800822c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008234:	4692      	mov	sl, r2
 8008236:	469b      	mov	fp, r3
 8008238:	4643      	mov	r3, r8
 800823a:	eb1a 0303 	adds.w	r3, sl, r3
 800823e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008242:	464b      	mov	r3, r9
 8008244:	eb4b 0303 	adc.w	r3, fp, r3
 8008248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008258:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800825c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008260:	460b      	mov	r3, r1
 8008262:	18db      	adds	r3, r3, r3
 8008264:	643b      	str	r3, [r7, #64]	; 0x40
 8008266:	4613      	mov	r3, r2
 8008268:	eb42 0303 	adc.w	r3, r2, r3
 800826c:	647b      	str	r3, [r7, #68]	; 0x44
 800826e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008272:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008276:	f7f8 f813 	bl	80002a0 <__aeabi_uldivmod>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4611      	mov	r1, r2
 8008280:	4b3b      	ldr	r3, [pc, #236]	; (8008370 <UART_SetConfig+0x2d4>)
 8008282:	fba3 2301 	umull	r2, r3, r3, r1
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	2264      	movs	r2, #100	; 0x64
 800828a:	fb02 f303 	mul.w	r3, r2, r3
 800828e:	1acb      	subs	r3, r1, r3
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008296:	4b36      	ldr	r3, [pc, #216]	; (8008370 <UART_SetConfig+0x2d4>)
 8008298:	fba3 2302 	umull	r2, r3, r3, r2
 800829c:	095b      	lsrs	r3, r3, #5
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082a4:	441c      	add	r4, r3
 80082a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	1891      	adds	r1, r2, r2
 80082be:	63b9      	str	r1, [r7, #56]	; 0x38
 80082c0:	415b      	adcs	r3, r3
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082c8:	4641      	mov	r1, r8
 80082ca:	1851      	adds	r1, r2, r1
 80082cc:	6339      	str	r1, [r7, #48]	; 0x30
 80082ce:	4649      	mov	r1, r9
 80082d0:	414b      	adcs	r3, r1
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082e0:	4659      	mov	r1, fp
 80082e2:	00cb      	lsls	r3, r1, #3
 80082e4:	4651      	mov	r1, sl
 80082e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082ea:	4651      	mov	r1, sl
 80082ec:	00ca      	lsls	r2, r1, #3
 80082ee:	4610      	mov	r0, r2
 80082f0:	4619      	mov	r1, r3
 80082f2:	4603      	mov	r3, r0
 80082f4:	4642      	mov	r2, r8
 80082f6:	189b      	adds	r3, r3, r2
 80082f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082fc:	464b      	mov	r3, r9
 80082fe:	460a      	mov	r2, r1
 8008300:	eb42 0303 	adc.w	r3, r2, r3
 8008304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008314:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800831c:	460b      	mov	r3, r1
 800831e:	18db      	adds	r3, r3, r3
 8008320:	62bb      	str	r3, [r7, #40]	; 0x28
 8008322:	4613      	mov	r3, r2
 8008324:	eb42 0303 	adc.w	r3, r2, r3
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800832a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800832e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008332:	f7f7 ffb5 	bl	80002a0 <__aeabi_uldivmod>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4b0d      	ldr	r3, [pc, #52]	; (8008370 <UART_SetConfig+0x2d4>)
 800833c:	fba3 1302 	umull	r1, r3, r3, r2
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	2164      	movs	r1, #100	; 0x64
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	3332      	adds	r3, #50	; 0x32
 800834e:	4a08      	ldr	r2, [pc, #32]	; (8008370 <UART_SetConfig+0x2d4>)
 8008350:	fba2 2303 	umull	r2, r3, r2, r3
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	f003 0207 	and.w	r2, r3, #7
 800835a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4422      	add	r2, r4
 8008362:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008364:	e105      	b.n	8008572 <UART_SetConfig+0x4d6>
 8008366:	bf00      	nop
 8008368:	40011000 	.word	0x40011000
 800836c:	40011400 	.word	0x40011400
 8008370:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008378:	2200      	movs	r2, #0
 800837a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800837e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008382:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008386:	4642      	mov	r2, r8
 8008388:	464b      	mov	r3, r9
 800838a:	1891      	adds	r1, r2, r2
 800838c:	6239      	str	r1, [r7, #32]
 800838e:	415b      	adcs	r3, r3
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
 8008392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008396:	4641      	mov	r1, r8
 8008398:	1854      	adds	r4, r2, r1
 800839a:	4649      	mov	r1, r9
 800839c:	eb43 0501 	adc.w	r5, r3, r1
 80083a0:	f04f 0200 	mov.w	r2, #0
 80083a4:	f04f 0300 	mov.w	r3, #0
 80083a8:	00eb      	lsls	r3, r5, #3
 80083aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ae:	00e2      	lsls	r2, r4, #3
 80083b0:	4614      	mov	r4, r2
 80083b2:	461d      	mov	r5, r3
 80083b4:	4643      	mov	r3, r8
 80083b6:	18e3      	adds	r3, r4, r3
 80083b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083bc:	464b      	mov	r3, r9
 80083be:	eb45 0303 	adc.w	r3, r5, r3
 80083c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083d6:	f04f 0200 	mov.w	r2, #0
 80083da:	f04f 0300 	mov.w	r3, #0
 80083de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083e2:	4629      	mov	r1, r5
 80083e4:	008b      	lsls	r3, r1, #2
 80083e6:	4621      	mov	r1, r4
 80083e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ec:	4621      	mov	r1, r4
 80083ee:	008a      	lsls	r2, r1, #2
 80083f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80083f4:	f7f7 ff54 	bl	80002a0 <__aeabi_uldivmod>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4b60      	ldr	r3, [pc, #384]	; (8008580 <UART_SetConfig+0x4e4>)
 80083fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	011c      	lsls	r4, r3, #4
 8008406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800840a:	2200      	movs	r2, #0
 800840c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008410:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008414:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008418:	4642      	mov	r2, r8
 800841a:	464b      	mov	r3, r9
 800841c:	1891      	adds	r1, r2, r2
 800841e:	61b9      	str	r1, [r7, #24]
 8008420:	415b      	adcs	r3, r3
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008428:	4641      	mov	r1, r8
 800842a:	1851      	adds	r1, r2, r1
 800842c:	6139      	str	r1, [r7, #16]
 800842e:	4649      	mov	r1, r9
 8008430:	414b      	adcs	r3, r1
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	f04f 0200 	mov.w	r2, #0
 8008438:	f04f 0300 	mov.w	r3, #0
 800843c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008440:	4659      	mov	r1, fp
 8008442:	00cb      	lsls	r3, r1, #3
 8008444:	4651      	mov	r1, sl
 8008446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800844a:	4651      	mov	r1, sl
 800844c:	00ca      	lsls	r2, r1, #3
 800844e:	4610      	mov	r0, r2
 8008450:	4619      	mov	r1, r3
 8008452:	4603      	mov	r3, r0
 8008454:	4642      	mov	r2, r8
 8008456:	189b      	adds	r3, r3, r2
 8008458:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800845c:	464b      	mov	r3, r9
 800845e:	460a      	mov	r2, r1
 8008460:	eb42 0303 	adc.w	r3, r2, r3
 8008464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	67bb      	str	r3, [r7, #120]	; 0x78
 8008472:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008474:	f04f 0200 	mov.w	r2, #0
 8008478:	f04f 0300 	mov.w	r3, #0
 800847c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008480:	4649      	mov	r1, r9
 8008482:	008b      	lsls	r3, r1, #2
 8008484:	4641      	mov	r1, r8
 8008486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800848a:	4641      	mov	r1, r8
 800848c:	008a      	lsls	r2, r1, #2
 800848e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008492:	f7f7 ff05 	bl	80002a0 <__aeabi_uldivmod>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4b39      	ldr	r3, [pc, #228]	; (8008580 <UART_SetConfig+0x4e4>)
 800849c:	fba3 1302 	umull	r1, r3, r3, r2
 80084a0:	095b      	lsrs	r3, r3, #5
 80084a2:	2164      	movs	r1, #100	; 0x64
 80084a4:	fb01 f303 	mul.w	r3, r1, r3
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	3332      	adds	r3, #50	; 0x32
 80084ae:	4a34      	ldr	r2, [pc, #208]	; (8008580 <UART_SetConfig+0x4e4>)
 80084b0:	fba2 2303 	umull	r2, r3, r2, r3
 80084b4:	095b      	lsrs	r3, r3, #5
 80084b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084ba:	441c      	add	r4, r3
 80084bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084c0:	2200      	movs	r2, #0
 80084c2:	673b      	str	r3, [r7, #112]	; 0x70
 80084c4:	677a      	str	r2, [r7, #116]	; 0x74
 80084c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084ca:	4642      	mov	r2, r8
 80084cc:	464b      	mov	r3, r9
 80084ce:	1891      	adds	r1, r2, r2
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	415b      	adcs	r3, r3
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084da:	4641      	mov	r1, r8
 80084dc:	1851      	adds	r1, r2, r1
 80084de:	6039      	str	r1, [r7, #0]
 80084e0:	4649      	mov	r1, r9
 80084e2:	414b      	adcs	r3, r1
 80084e4:	607b      	str	r3, [r7, #4]
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	f04f 0300 	mov.w	r3, #0
 80084ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084f2:	4659      	mov	r1, fp
 80084f4:	00cb      	lsls	r3, r1, #3
 80084f6:	4651      	mov	r1, sl
 80084f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084fc:	4651      	mov	r1, sl
 80084fe:	00ca      	lsls	r2, r1, #3
 8008500:	4610      	mov	r0, r2
 8008502:	4619      	mov	r1, r3
 8008504:	4603      	mov	r3, r0
 8008506:	4642      	mov	r2, r8
 8008508:	189b      	adds	r3, r3, r2
 800850a:	66bb      	str	r3, [r7, #104]	; 0x68
 800850c:	464b      	mov	r3, r9
 800850e:	460a      	mov	r2, r1
 8008510:	eb42 0303 	adc.w	r3, r2, r3
 8008514:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	663b      	str	r3, [r7, #96]	; 0x60
 8008520:	667a      	str	r2, [r7, #100]	; 0x64
 8008522:	f04f 0200 	mov.w	r2, #0
 8008526:	f04f 0300 	mov.w	r3, #0
 800852a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800852e:	4649      	mov	r1, r9
 8008530:	008b      	lsls	r3, r1, #2
 8008532:	4641      	mov	r1, r8
 8008534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008538:	4641      	mov	r1, r8
 800853a:	008a      	lsls	r2, r1, #2
 800853c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008540:	f7f7 feae 	bl	80002a0 <__aeabi_uldivmod>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <UART_SetConfig+0x4e4>)
 800854a:	fba3 1302 	umull	r1, r3, r3, r2
 800854e:	095b      	lsrs	r3, r3, #5
 8008550:	2164      	movs	r1, #100	; 0x64
 8008552:	fb01 f303 	mul.w	r3, r1, r3
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	3332      	adds	r3, #50	; 0x32
 800855c:	4a08      	ldr	r2, [pc, #32]	; (8008580 <UART_SetConfig+0x4e4>)
 800855e:	fba2 2303 	umull	r2, r3, r2, r3
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	f003 020f 	and.w	r2, r3, #15
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4422      	add	r2, r4
 8008570:	609a      	str	r2, [r3, #8]
}
 8008572:	bf00      	nop
 8008574:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008578:	46bd      	mov	sp, r7
 800857a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800857e:	bf00      	nop
 8008580:	51eb851f 	.word	0x51eb851f

08008584 <__errno>:
 8008584:	4b01      	ldr	r3, [pc, #4]	; (800858c <__errno+0x8>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	20000260 	.word	0x20000260

08008590 <__libc_init_array>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	4d0d      	ldr	r5, [pc, #52]	; (80085c8 <__libc_init_array+0x38>)
 8008594:	4c0d      	ldr	r4, [pc, #52]	; (80085cc <__libc_init_array+0x3c>)
 8008596:	1b64      	subs	r4, r4, r5
 8008598:	10a4      	asrs	r4, r4, #2
 800859a:	2600      	movs	r6, #0
 800859c:	42a6      	cmp	r6, r4
 800859e:	d109      	bne.n	80085b4 <__libc_init_array+0x24>
 80085a0:	4d0b      	ldr	r5, [pc, #44]	; (80085d0 <__libc_init_array+0x40>)
 80085a2:	4c0c      	ldr	r4, [pc, #48]	; (80085d4 <__libc_init_array+0x44>)
 80085a4:	f001 fa4a 	bl	8009a3c <_init>
 80085a8:	1b64      	subs	r4, r4, r5
 80085aa:	10a4      	asrs	r4, r4, #2
 80085ac:	2600      	movs	r6, #0
 80085ae:	42a6      	cmp	r6, r4
 80085b0:	d105      	bne.n	80085be <__libc_init_array+0x2e>
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b8:	4798      	blx	r3
 80085ba:	3601      	adds	r6, #1
 80085bc:	e7ee      	b.n	800859c <__libc_init_array+0xc>
 80085be:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c2:	4798      	blx	r3
 80085c4:	3601      	adds	r6, #1
 80085c6:	e7f2      	b.n	80085ae <__libc_init_array+0x1e>
 80085c8:	08009c50 	.word	0x08009c50
 80085cc:	08009c50 	.word	0x08009c50
 80085d0:	08009c50 	.word	0x08009c50
 80085d4:	08009c54 	.word	0x08009c54

080085d8 <memset>:
 80085d8:	4402      	add	r2, r0
 80085da:	4603      	mov	r3, r0
 80085dc:	4293      	cmp	r3, r2
 80085de:	d100      	bne.n	80085e2 <memset+0xa>
 80085e0:	4770      	bx	lr
 80085e2:	f803 1b01 	strb.w	r1, [r3], #1
 80085e6:	e7f9      	b.n	80085dc <memset+0x4>

080085e8 <iprintf>:
 80085e8:	b40f      	push	{r0, r1, r2, r3}
 80085ea:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <iprintf+0x2c>)
 80085ec:	b513      	push	{r0, r1, r4, lr}
 80085ee:	681c      	ldr	r4, [r3, #0]
 80085f0:	b124      	cbz	r4, 80085fc <iprintf+0x14>
 80085f2:	69a3      	ldr	r3, [r4, #24]
 80085f4:	b913      	cbnz	r3, 80085fc <iprintf+0x14>
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 fac8 	bl	8008b8c <__sinit>
 80085fc:	ab05      	add	r3, sp, #20
 80085fe:	9a04      	ldr	r2, [sp, #16]
 8008600:	68a1      	ldr	r1, [r4, #8]
 8008602:	9301      	str	r3, [sp, #4]
 8008604:	4620      	mov	r0, r4
 8008606:	f000 fe2d 	bl	8009264 <_vfiprintf_r>
 800860a:	b002      	add	sp, #8
 800860c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008610:	b004      	add	sp, #16
 8008612:	4770      	bx	lr
 8008614:	20000260 	.word	0x20000260

08008618 <_puts_r>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	460e      	mov	r6, r1
 800861c:	4605      	mov	r5, r0
 800861e:	b118      	cbz	r0, 8008628 <_puts_r+0x10>
 8008620:	6983      	ldr	r3, [r0, #24]
 8008622:	b90b      	cbnz	r3, 8008628 <_puts_r+0x10>
 8008624:	f000 fab2 	bl	8008b8c <__sinit>
 8008628:	69ab      	ldr	r3, [r5, #24]
 800862a:	68ac      	ldr	r4, [r5, #8]
 800862c:	b913      	cbnz	r3, 8008634 <_puts_r+0x1c>
 800862e:	4628      	mov	r0, r5
 8008630:	f000 faac 	bl	8008b8c <__sinit>
 8008634:	4b2c      	ldr	r3, [pc, #176]	; (80086e8 <_puts_r+0xd0>)
 8008636:	429c      	cmp	r4, r3
 8008638:	d120      	bne.n	800867c <_puts_r+0x64>
 800863a:	686c      	ldr	r4, [r5, #4]
 800863c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800863e:	07db      	lsls	r3, r3, #31
 8008640:	d405      	bmi.n	800864e <_puts_r+0x36>
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	0598      	lsls	r0, r3, #22
 8008646:	d402      	bmi.n	800864e <_puts_r+0x36>
 8008648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800864a:	f000 fb3d 	bl	8008cc8 <__retarget_lock_acquire_recursive>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	0719      	lsls	r1, r3, #28
 8008652:	d51d      	bpl.n	8008690 <_puts_r+0x78>
 8008654:	6923      	ldr	r3, [r4, #16]
 8008656:	b1db      	cbz	r3, 8008690 <_puts_r+0x78>
 8008658:	3e01      	subs	r6, #1
 800865a:	68a3      	ldr	r3, [r4, #8]
 800865c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008660:	3b01      	subs	r3, #1
 8008662:	60a3      	str	r3, [r4, #8]
 8008664:	bb39      	cbnz	r1, 80086b6 <_puts_r+0x9e>
 8008666:	2b00      	cmp	r3, #0
 8008668:	da38      	bge.n	80086dc <_puts_r+0xc4>
 800866a:	4622      	mov	r2, r4
 800866c:	210a      	movs	r1, #10
 800866e:	4628      	mov	r0, r5
 8008670:	f000 f8b2 	bl	80087d8 <__swbuf_r>
 8008674:	3001      	adds	r0, #1
 8008676:	d011      	beq.n	800869c <_puts_r+0x84>
 8008678:	250a      	movs	r5, #10
 800867a:	e011      	b.n	80086a0 <_puts_r+0x88>
 800867c:	4b1b      	ldr	r3, [pc, #108]	; (80086ec <_puts_r+0xd4>)
 800867e:	429c      	cmp	r4, r3
 8008680:	d101      	bne.n	8008686 <_puts_r+0x6e>
 8008682:	68ac      	ldr	r4, [r5, #8]
 8008684:	e7da      	b.n	800863c <_puts_r+0x24>
 8008686:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <_puts_r+0xd8>)
 8008688:	429c      	cmp	r4, r3
 800868a:	bf08      	it	eq
 800868c:	68ec      	ldreq	r4, [r5, #12]
 800868e:	e7d5      	b.n	800863c <_puts_r+0x24>
 8008690:	4621      	mov	r1, r4
 8008692:	4628      	mov	r0, r5
 8008694:	f000 f8f2 	bl	800887c <__swsetup_r>
 8008698:	2800      	cmp	r0, #0
 800869a:	d0dd      	beq.n	8008658 <_puts_r+0x40>
 800869c:	f04f 35ff 	mov.w	r5, #4294967295
 80086a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086a2:	07da      	lsls	r2, r3, #31
 80086a4:	d405      	bmi.n	80086b2 <_puts_r+0x9a>
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	059b      	lsls	r3, r3, #22
 80086aa:	d402      	bmi.n	80086b2 <_puts_r+0x9a>
 80086ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ae:	f000 fb0c 	bl	8008cca <__retarget_lock_release_recursive>
 80086b2:	4628      	mov	r0, r5
 80086b4:	bd70      	pop	{r4, r5, r6, pc}
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	da04      	bge.n	80086c4 <_puts_r+0xac>
 80086ba:	69a2      	ldr	r2, [r4, #24]
 80086bc:	429a      	cmp	r2, r3
 80086be:	dc06      	bgt.n	80086ce <_puts_r+0xb6>
 80086c0:	290a      	cmp	r1, #10
 80086c2:	d004      	beq.n	80086ce <_puts_r+0xb6>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	6022      	str	r2, [r4, #0]
 80086ca:	7019      	strb	r1, [r3, #0]
 80086cc:	e7c5      	b.n	800865a <_puts_r+0x42>
 80086ce:	4622      	mov	r2, r4
 80086d0:	4628      	mov	r0, r5
 80086d2:	f000 f881 	bl	80087d8 <__swbuf_r>
 80086d6:	3001      	adds	r0, #1
 80086d8:	d1bf      	bne.n	800865a <_puts_r+0x42>
 80086da:	e7df      	b.n	800869c <_puts_r+0x84>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	250a      	movs	r5, #10
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	6022      	str	r2, [r4, #0]
 80086e4:	701d      	strb	r5, [r3, #0]
 80086e6:	e7db      	b.n	80086a0 <_puts_r+0x88>
 80086e8:	08009bd4 	.word	0x08009bd4
 80086ec:	08009bf4 	.word	0x08009bf4
 80086f0:	08009bb4 	.word	0x08009bb4

080086f4 <puts>:
 80086f4:	4b02      	ldr	r3, [pc, #8]	; (8008700 <puts+0xc>)
 80086f6:	4601      	mov	r1, r0
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f7ff bf8d 	b.w	8008618 <_puts_r>
 80086fe:	bf00      	nop
 8008700:	20000260 	.word	0x20000260

08008704 <sniprintf>:
 8008704:	b40c      	push	{r2, r3}
 8008706:	b530      	push	{r4, r5, lr}
 8008708:	4b17      	ldr	r3, [pc, #92]	; (8008768 <sniprintf+0x64>)
 800870a:	1e0c      	subs	r4, r1, #0
 800870c:	681d      	ldr	r5, [r3, #0]
 800870e:	b09d      	sub	sp, #116	; 0x74
 8008710:	da08      	bge.n	8008724 <sniprintf+0x20>
 8008712:	238b      	movs	r3, #139	; 0x8b
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	f04f 30ff 	mov.w	r0, #4294967295
 800871a:	b01d      	add	sp, #116	; 0x74
 800871c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008720:	b002      	add	sp, #8
 8008722:	4770      	bx	lr
 8008724:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008728:	f8ad 3014 	strh.w	r3, [sp, #20]
 800872c:	bf14      	ite	ne
 800872e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008732:	4623      	moveq	r3, r4
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	9307      	str	r3, [sp, #28]
 8008738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800873c:	9002      	str	r0, [sp, #8]
 800873e:	9006      	str	r0, [sp, #24]
 8008740:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008744:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008746:	ab21      	add	r3, sp, #132	; 0x84
 8008748:	a902      	add	r1, sp, #8
 800874a:	4628      	mov	r0, r5
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	f000 fc5f 	bl	8009010 <_svfiprintf_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	bfbc      	itt	lt
 8008756:	238b      	movlt	r3, #139	; 0x8b
 8008758:	602b      	strlt	r3, [r5, #0]
 800875a:	2c00      	cmp	r4, #0
 800875c:	d0dd      	beq.n	800871a <sniprintf+0x16>
 800875e:	9b02      	ldr	r3, [sp, #8]
 8008760:	2200      	movs	r2, #0
 8008762:	701a      	strb	r2, [r3, #0]
 8008764:	e7d9      	b.n	800871a <sniprintf+0x16>
 8008766:	bf00      	nop
 8008768:	20000260 	.word	0x20000260

0800876c <siprintf>:
 800876c:	b40e      	push	{r1, r2, r3}
 800876e:	b500      	push	{lr}
 8008770:	b09c      	sub	sp, #112	; 0x70
 8008772:	ab1d      	add	r3, sp, #116	; 0x74
 8008774:	9002      	str	r0, [sp, #8]
 8008776:	9006      	str	r0, [sp, #24]
 8008778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800877c:	4809      	ldr	r0, [pc, #36]	; (80087a4 <siprintf+0x38>)
 800877e:	9107      	str	r1, [sp, #28]
 8008780:	9104      	str	r1, [sp, #16]
 8008782:	4909      	ldr	r1, [pc, #36]	; (80087a8 <siprintf+0x3c>)
 8008784:	f853 2b04 	ldr.w	r2, [r3], #4
 8008788:	9105      	str	r1, [sp, #20]
 800878a:	6800      	ldr	r0, [r0, #0]
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	a902      	add	r1, sp, #8
 8008790:	f000 fc3e 	bl	8009010 <_svfiprintf_r>
 8008794:	9b02      	ldr	r3, [sp, #8]
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	b01c      	add	sp, #112	; 0x70
 800879c:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a0:	b003      	add	sp, #12
 80087a2:	4770      	bx	lr
 80087a4:	20000260 	.word	0x20000260
 80087a8:	ffff0208 	.word	0xffff0208

080087ac <strstr>:
 80087ac:	780a      	ldrb	r2, [r1, #0]
 80087ae:	b570      	push	{r4, r5, r6, lr}
 80087b0:	b96a      	cbnz	r2, 80087ce <strstr+0x22>
 80087b2:	bd70      	pop	{r4, r5, r6, pc}
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d109      	bne.n	80087cc <strstr+0x20>
 80087b8:	460c      	mov	r4, r1
 80087ba:	4605      	mov	r5, r0
 80087bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0f6      	beq.n	80087b2 <strstr+0x6>
 80087c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80087c8:	429e      	cmp	r6, r3
 80087ca:	d0f7      	beq.n	80087bc <strstr+0x10>
 80087cc:	3001      	adds	r0, #1
 80087ce:	7803      	ldrb	r3, [r0, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1ef      	bne.n	80087b4 <strstr+0x8>
 80087d4:	4618      	mov	r0, r3
 80087d6:	e7ec      	b.n	80087b2 <strstr+0x6>

080087d8 <__swbuf_r>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	460e      	mov	r6, r1
 80087dc:	4614      	mov	r4, r2
 80087de:	4605      	mov	r5, r0
 80087e0:	b118      	cbz	r0, 80087ea <__swbuf_r+0x12>
 80087e2:	6983      	ldr	r3, [r0, #24]
 80087e4:	b90b      	cbnz	r3, 80087ea <__swbuf_r+0x12>
 80087e6:	f000 f9d1 	bl	8008b8c <__sinit>
 80087ea:	4b21      	ldr	r3, [pc, #132]	; (8008870 <__swbuf_r+0x98>)
 80087ec:	429c      	cmp	r4, r3
 80087ee:	d12b      	bne.n	8008848 <__swbuf_r+0x70>
 80087f0:	686c      	ldr	r4, [r5, #4]
 80087f2:	69a3      	ldr	r3, [r4, #24]
 80087f4:	60a3      	str	r3, [r4, #8]
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	071a      	lsls	r2, r3, #28
 80087fa:	d52f      	bpl.n	800885c <__swbuf_r+0x84>
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	b36b      	cbz	r3, 800885c <__swbuf_r+0x84>
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	6820      	ldr	r0, [r4, #0]
 8008804:	1ac0      	subs	r0, r0, r3
 8008806:	6963      	ldr	r3, [r4, #20]
 8008808:	b2f6      	uxtb	r6, r6
 800880a:	4283      	cmp	r3, r0
 800880c:	4637      	mov	r7, r6
 800880e:	dc04      	bgt.n	800881a <__swbuf_r+0x42>
 8008810:	4621      	mov	r1, r4
 8008812:	4628      	mov	r0, r5
 8008814:	f000 f926 	bl	8008a64 <_fflush_r>
 8008818:	bb30      	cbnz	r0, 8008868 <__swbuf_r+0x90>
 800881a:	68a3      	ldr	r3, [r4, #8]
 800881c:	3b01      	subs	r3, #1
 800881e:	60a3      	str	r3, [r4, #8]
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	6022      	str	r2, [r4, #0]
 8008826:	701e      	strb	r6, [r3, #0]
 8008828:	6963      	ldr	r3, [r4, #20]
 800882a:	3001      	adds	r0, #1
 800882c:	4283      	cmp	r3, r0
 800882e:	d004      	beq.n	800883a <__swbuf_r+0x62>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	07db      	lsls	r3, r3, #31
 8008834:	d506      	bpl.n	8008844 <__swbuf_r+0x6c>
 8008836:	2e0a      	cmp	r6, #10
 8008838:	d104      	bne.n	8008844 <__swbuf_r+0x6c>
 800883a:	4621      	mov	r1, r4
 800883c:	4628      	mov	r0, r5
 800883e:	f000 f911 	bl	8008a64 <_fflush_r>
 8008842:	b988      	cbnz	r0, 8008868 <__swbuf_r+0x90>
 8008844:	4638      	mov	r0, r7
 8008846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008848:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <__swbuf_r+0x9c>)
 800884a:	429c      	cmp	r4, r3
 800884c:	d101      	bne.n	8008852 <__swbuf_r+0x7a>
 800884e:	68ac      	ldr	r4, [r5, #8]
 8008850:	e7cf      	b.n	80087f2 <__swbuf_r+0x1a>
 8008852:	4b09      	ldr	r3, [pc, #36]	; (8008878 <__swbuf_r+0xa0>)
 8008854:	429c      	cmp	r4, r3
 8008856:	bf08      	it	eq
 8008858:	68ec      	ldreq	r4, [r5, #12]
 800885a:	e7ca      	b.n	80087f2 <__swbuf_r+0x1a>
 800885c:	4621      	mov	r1, r4
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f80c 	bl	800887c <__swsetup_r>
 8008864:	2800      	cmp	r0, #0
 8008866:	d0cb      	beq.n	8008800 <__swbuf_r+0x28>
 8008868:	f04f 37ff 	mov.w	r7, #4294967295
 800886c:	e7ea      	b.n	8008844 <__swbuf_r+0x6c>
 800886e:	bf00      	nop
 8008870:	08009bd4 	.word	0x08009bd4
 8008874:	08009bf4 	.word	0x08009bf4
 8008878:	08009bb4 	.word	0x08009bb4

0800887c <__swsetup_r>:
 800887c:	4b32      	ldr	r3, [pc, #200]	; (8008948 <__swsetup_r+0xcc>)
 800887e:	b570      	push	{r4, r5, r6, lr}
 8008880:	681d      	ldr	r5, [r3, #0]
 8008882:	4606      	mov	r6, r0
 8008884:	460c      	mov	r4, r1
 8008886:	b125      	cbz	r5, 8008892 <__swsetup_r+0x16>
 8008888:	69ab      	ldr	r3, [r5, #24]
 800888a:	b913      	cbnz	r3, 8008892 <__swsetup_r+0x16>
 800888c:	4628      	mov	r0, r5
 800888e:	f000 f97d 	bl	8008b8c <__sinit>
 8008892:	4b2e      	ldr	r3, [pc, #184]	; (800894c <__swsetup_r+0xd0>)
 8008894:	429c      	cmp	r4, r3
 8008896:	d10f      	bne.n	80088b8 <__swsetup_r+0x3c>
 8008898:	686c      	ldr	r4, [r5, #4]
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088a0:	0719      	lsls	r1, r3, #28
 80088a2:	d42c      	bmi.n	80088fe <__swsetup_r+0x82>
 80088a4:	06dd      	lsls	r5, r3, #27
 80088a6:	d411      	bmi.n	80088cc <__swsetup_r+0x50>
 80088a8:	2309      	movs	r3, #9
 80088aa:	6033      	str	r3, [r6, #0]
 80088ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	f04f 30ff 	mov.w	r0, #4294967295
 80088b6:	e03e      	b.n	8008936 <__swsetup_r+0xba>
 80088b8:	4b25      	ldr	r3, [pc, #148]	; (8008950 <__swsetup_r+0xd4>)
 80088ba:	429c      	cmp	r4, r3
 80088bc:	d101      	bne.n	80088c2 <__swsetup_r+0x46>
 80088be:	68ac      	ldr	r4, [r5, #8]
 80088c0:	e7eb      	b.n	800889a <__swsetup_r+0x1e>
 80088c2:	4b24      	ldr	r3, [pc, #144]	; (8008954 <__swsetup_r+0xd8>)
 80088c4:	429c      	cmp	r4, r3
 80088c6:	bf08      	it	eq
 80088c8:	68ec      	ldreq	r4, [r5, #12]
 80088ca:	e7e6      	b.n	800889a <__swsetup_r+0x1e>
 80088cc:	0758      	lsls	r0, r3, #29
 80088ce:	d512      	bpl.n	80088f6 <__swsetup_r+0x7a>
 80088d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088d2:	b141      	cbz	r1, 80088e6 <__swsetup_r+0x6a>
 80088d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088d8:	4299      	cmp	r1, r3
 80088da:	d002      	beq.n	80088e2 <__swsetup_r+0x66>
 80088dc:	4630      	mov	r0, r6
 80088de:	f000 fa5b 	bl	8008d98 <_free_r>
 80088e2:	2300      	movs	r3, #0
 80088e4:	6363      	str	r3, [r4, #52]	; 0x34
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	2300      	movs	r3, #0
 80088f0:	6063      	str	r3, [r4, #4]
 80088f2:	6923      	ldr	r3, [r4, #16]
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	f043 0308 	orr.w	r3, r3, #8
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	6923      	ldr	r3, [r4, #16]
 8008900:	b94b      	cbnz	r3, 8008916 <__swsetup_r+0x9a>
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800890c:	d003      	beq.n	8008916 <__swsetup_r+0x9a>
 800890e:	4621      	mov	r1, r4
 8008910:	4630      	mov	r0, r6
 8008912:	f000 fa01 	bl	8008d18 <__smakebuf_r>
 8008916:	89a0      	ldrh	r0, [r4, #12]
 8008918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800891c:	f010 0301 	ands.w	r3, r0, #1
 8008920:	d00a      	beq.n	8008938 <__swsetup_r+0xbc>
 8008922:	2300      	movs	r3, #0
 8008924:	60a3      	str	r3, [r4, #8]
 8008926:	6963      	ldr	r3, [r4, #20]
 8008928:	425b      	negs	r3, r3
 800892a:	61a3      	str	r3, [r4, #24]
 800892c:	6923      	ldr	r3, [r4, #16]
 800892e:	b943      	cbnz	r3, 8008942 <__swsetup_r+0xc6>
 8008930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008934:	d1ba      	bne.n	80088ac <__swsetup_r+0x30>
 8008936:	bd70      	pop	{r4, r5, r6, pc}
 8008938:	0781      	lsls	r1, r0, #30
 800893a:	bf58      	it	pl
 800893c:	6963      	ldrpl	r3, [r4, #20]
 800893e:	60a3      	str	r3, [r4, #8]
 8008940:	e7f4      	b.n	800892c <__swsetup_r+0xb0>
 8008942:	2000      	movs	r0, #0
 8008944:	e7f7      	b.n	8008936 <__swsetup_r+0xba>
 8008946:	bf00      	nop
 8008948:	20000260 	.word	0x20000260
 800894c:	08009bd4 	.word	0x08009bd4
 8008950:	08009bf4 	.word	0x08009bf4
 8008954:	08009bb4 	.word	0x08009bb4

08008958 <__sflush_r>:
 8008958:	898a      	ldrh	r2, [r1, #12]
 800895a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895e:	4605      	mov	r5, r0
 8008960:	0710      	lsls	r0, r2, #28
 8008962:	460c      	mov	r4, r1
 8008964:	d458      	bmi.n	8008a18 <__sflush_r+0xc0>
 8008966:	684b      	ldr	r3, [r1, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	dc05      	bgt.n	8008978 <__sflush_r+0x20>
 800896c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800896e:	2b00      	cmp	r3, #0
 8008970:	dc02      	bgt.n	8008978 <__sflush_r+0x20>
 8008972:	2000      	movs	r0, #0
 8008974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800897a:	2e00      	cmp	r6, #0
 800897c:	d0f9      	beq.n	8008972 <__sflush_r+0x1a>
 800897e:	2300      	movs	r3, #0
 8008980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008984:	682f      	ldr	r7, [r5, #0]
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	d032      	beq.n	80089f0 <__sflush_r+0x98>
 800898a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	075a      	lsls	r2, r3, #29
 8008990:	d505      	bpl.n	800899e <__sflush_r+0x46>
 8008992:	6863      	ldr	r3, [r4, #4]
 8008994:	1ac0      	subs	r0, r0, r3
 8008996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008998:	b10b      	cbz	r3, 800899e <__sflush_r+0x46>
 800899a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800899c:	1ac0      	subs	r0, r0, r3
 800899e:	2300      	movs	r3, #0
 80089a0:	4602      	mov	r2, r0
 80089a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089a4:	6a21      	ldr	r1, [r4, #32]
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b0      	blx	r6
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	d106      	bne.n	80089be <__sflush_r+0x66>
 80089b0:	6829      	ldr	r1, [r5, #0]
 80089b2:	291d      	cmp	r1, #29
 80089b4:	d82c      	bhi.n	8008a10 <__sflush_r+0xb8>
 80089b6:	4a2a      	ldr	r2, [pc, #168]	; (8008a60 <__sflush_r+0x108>)
 80089b8:	40ca      	lsrs	r2, r1
 80089ba:	07d6      	lsls	r6, r2, #31
 80089bc:	d528      	bpl.n	8008a10 <__sflush_r+0xb8>
 80089be:	2200      	movs	r2, #0
 80089c0:	6062      	str	r2, [r4, #4]
 80089c2:	04d9      	lsls	r1, r3, #19
 80089c4:	6922      	ldr	r2, [r4, #16]
 80089c6:	6022      	str	r2, [r4, #0]
 80089c8:	d504      	bpl.n	80089d4 <__sflush_r+0x7c>
 80089ca:	1c42      	adds	r2, r0, #1
 80089cc:	d101      	bne.n	80089d2 <__sflush_r+0x7a>
 80089ce:	682b      	ldr	r3, [r5, #0]
 80089d0:	b903      	cbnz	r3, 80089d4 <__sflush_r+0x7c>
 80089d2:	6560      	str	r0, [r4, #84]	; 0x54
 80089d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089d6:	602f      	str	r7, [r5, #0]
 80089d8:	2900      	cmp	r1, #0
 80089da:	d0ca      	beq.n	8008972 <__sflush_r+0x1a>
 80089dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089e0:	4299      	cmp	r1, r3
 80089e2:	d002      	beq.n	80089ea <__sflush_r+0x92>
 80089e4:	4628      	mov	r0, r5
 80089e6:	f000 f9d7 	bl	8008d98 <_free_r>
 80089ea:	2000      	movs	r0, #0
 80089ec:	6360      	str	r0, [r4, #52]	; 0x34
 80089ee:	e7c1      	b.n	8008974 <__sflush_r+0x1c>
 80089f0:	6a21      	ldr	r1, [r4, #32]
 80089f2:	2301      	movs	r3, #1
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b0      	blx	r6
 80089f8:	1c41      	adds	r1, r0, #1
 80089fa:	d1c7      	bne.n	800898c <__sflush_r+0x34>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d0c4      	beq.n	800898c <__sflush_r+0x34>
 8008a02:	2b1d      	cmp	r3, #29
 8008a04:	d001      	beq.n	8008a0a <__sflush_r+0xb2>
 8008a06:	2b16      	cmp	r3, #22
 8008a08:	d101      	bne.n	8008a0e <__sflush_r+0xb6>
 8008a0a:	602f      	str	r7, [r5, #0]
 8008a0c:	e7b1      	b.n	8008972 <__sflush_r+0x1a>
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	e7ad      	b.n	8008974 <__sflush_r+0x1c>
 8008a18:	690f      	ldr	r7, [r1, #16]
 8008a1a:	2f00      	cmp	r7, #0
 8008a1c:	d0a9      	beq.n	8008972 <__sflush_r+0x1a>
 8008a1e:	0793      	lsls	r3, r2, #30
 8008a20:	680e      	ldr	r6, [r1, #0]
 8008a22:	bf08      	it	eq
 8008a24:	694b      	ldreq	r3, [r1, #20]
 8008a26:	600f      	str	r7, [r1, #0]
 8008a28:	bf18      	it	ne
 8008a2a:	2300      	movne	r3, #0
 8008a2c:	eba6 0807 	sub.w	r8, r6, r7
 8008a30:	608b      	str	r3, [r1, #8]
 8008a32:	f1b8 0f00 	cmp.w	r8, #0
 8008a36:	dd9c      	ble.n	8008972 <__sflush_r+0x1a>
 8008a38:	6a21      	ldr	r1, [r4, #32]
 8008a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a3c:	4643      	mov	r3, r8
 8008a3e:	463a      	mov	r2, r7
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b0      	blx	r6
 8008a44:	2800      	cmp	r0, #0
 8008a46:	dc06      	bgt.n	8008a56 <__sflush_r+0xfe>
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	f04f 30ff 	mov.w	r0, #4294967295
 8008a54:	e78e      	b.n	8008974 <__sflush_r+0x1c>
 8008a56:	4407      	add	r7, r0
 8008a58:	eba8 0800 	sub.w	r8, r8, r0
 8008a5c:	e7e9      	b.n	8008a32 <__sflush_r+0xda>
 8008a5e:	bf00      	nop
 8008a60:	20400001 	.word	0x20400001

08008a64 <_fflush_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	690b      	ldr	r3, [r1, #16]
 8008a68:	4605      	mov	r5, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	b913      	cbnz	r3, 8008a74 <_fflush_r+0x10>
 8008a6e:	2500      	movs	r5, #0
 8008a70:	4628      	mov	r0, r5
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	b118      	cbz	r0, 8008a7e <_fflush_r+0x1a>
 8008a76:	6983      	ldr	r3, [r0, #24]
 8008a78:	b90b      	cbnz	r3, 8008a7e <_fflush_r+0x1a>
 8008a7a:	f000 f887 	bl	8008b8c <__sinit>
 8008a7e:	4b14      	ldr	r3, [pc, #80]	; (8008ad0 <_fflush_r+0x6c>)
 8008a80:	429c      	cmp	r4, r3
 8008a82:	d11b      	bne.n	8008abc <_fflush_r+0x58>
 8008a84:	686c      	ldr	r4, [r5, #4]
 8008a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0ef      	beq.n	8008a6e <_fflush_r+0xa>
 8008a8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a90:	07d0      	lsls	r0, r2, #31
 8008a92:	d404      	bmi.n	8008a9e <_fflush_r+0x3a>
 8008a94:	0599      	lsls	r1, r3, #22
 8008a96:	d402      	bmi.n	8008a9e <_fflush_r+0x3a>
 8008a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a9a:	f000 f915 	bl	8008cc8 <__retarget_lock_acquire_recursive>
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	f7ff ff59 	bl	8008958 <__sflush_r>
 8008aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aa8:	07da      	lsls	r2, r3, #31
 8008aaa:	4605      	mov	r5, r0
 8008aac:	d4e0      	bmi.n	8008a70 <_fflush_r+0xc>
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	059b      	lsls	r3, r3, #22
 8008ab2:	d4dd      	bmi.n	8008a70 <_fflush_r+0xc>
 8008ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ab6:	f000 f908 	bl	8008cca <__retarget_lock_release_recursive>
 8008aba:	e7d9      	b.n	8008a70 <_fflush_r+0xc>
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <_fflush_r+0x70>)
 8008abe:	429c      	cmp	r4, r3
 8008ac0:	d101      	bne.n	8008ac6 <_fflush_r+0x62>
 8008ac2:	68ac      	ldr	r4, [r5, #8]
 8008ac4:	e7df      	b.n	8008a86 <_fflush_r+0x22>
 8008ac6:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <_fflush_r+0x74>)
 8008ac8:	429c      	cmp	r4, r3
 8008aca:	bf08      	it	eq
 8008acc:	68ec      	ldreq	r4, [r5, #12]
 8008ace:	e7da      	b.n	8008a86 <_fflush_r+0x22>
 8008ad0:	08009bd4 	.word	0x08009bd4
 8008ad4:	08009bf4 	.word	0x08009bf4
 8008ad8:	08009bb4 	.word	0x08009bb4

08008adc <std>:
 8008adc:	2300      	movs	r3, #0
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aea:	6083      	str	r3, [r0, #8]
 8008aec:	8181      	strh	r1, [r0, #12]
 8008aee:	6643      	str	r3, [r0, #100]	; 0x64
 8008af0:	81c2      	strh	r2, [r0, #14]
 8008af2:	6183      	str	r3, [r0, #24]
 8008af4:	4619      	mov	r1, r3
 8008af6:	2208      	movs	r2, #8
 8008af8:	305c      	adds	r0, #92	; 0x5c
 8008afa:	f7ff fd6d 	bl	80085d8 <memset>
 8008afe:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <std+0x38>)
 8008b00:	6263      	str	r3, [r4, #36]	; 0x24
 8008b02:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <std+0x3c>)
 8008b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b06:	4b05      	ldr	r3, [pc, #20]	; (8008b1c <std+0x40>)
 8008b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b0a:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <std+0x44>)
 8008b0c:	6224      	str	r4, [r4, #32]
 8008b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8008b10:	bd10      	pop	{r4, pc}
 8008b12:	bf00      	nop
 8008b14:	0800980d 	.word	0x0800980d
 8008b18:	0800982f 	.word	0x0800982f
 8008b1c:	08009867 	.word	0x08009867
 8008b20:	0800988b 	.word	0x0800988b

08008b24 <_cleanup_r>:
 8008b24:	4901      	ldr	r1, [pc, #4]	; (8008b2c <_cleanup_r+0x8>)
 8008b26:	f000 b8af 	b.w	8008c88 <_fwalk_reent>
 8008b2a:	bf00      	nop
 8008b2c:	08008a65 	.word	0x08008a65

08008b30 <__sfmoreglue>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	2268      	movs	r2, #104	; 0x68
 8008b34:	1e4d      	subs	r5, r1, #1
 8008b36:	4355      	muls	r5, r2
 8008b38:	460e      	mov	r6, r1
 8008b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b3e:	f000 f997 	bl	8008e70 <_malloc_r>
 8008b42:	4604      	mov	r4, r0
 8008b44:	b140      	cbz	r0, 8008b58 <__sfmoreglue+0x28>
 8008b46:	2100      	movs	r1, #0
 8008b48:	e9c0 1600 	strd	r1, r6, [r0]
 8008b4c:	300c      	adds	r0, #12
 8008b4e:	60a0      	str	r0, [r4, #8]
 8008b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b54:	f7ff fd40 	bl	80085d8 <memset>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}

08008b5c <__sfp_lock_acquire>:
 8008b5c:	4801      	ldr	r0, [pc, #4]	; (8008b64 <__sfp_lock_acquire+0x8>)
 8008b5e:	f000 b8b3 	b.w	8008cc8 <__retarget_lock_acquire_recursive>
 8008b62:	bf00      	nop
 8008b64:	200005bd 	.word	0x200005bd

08008b68 <__sfp_lock_release>:
 8008b68:	4801      	ldr	r0, [pc, #4]	; (8008b70 <__sfp_lock_release+0x8>)
 8008b6a:	f000 b8ae 	b.w	8008cca <__retarget_lock_release_recursive>
 8008b6e:	bf00      	nop
 8008b70:	200005bd 	.word	0x200005bd

08008b74 <__sinit_lock_acquire>:
 8008b74:	4801      	ldr	r0, [pc, #4]	; (8008b7c <__sinit_lock_acquire+0x8>)
 8008b76:	f000 b8a7 	b.w	8008cc8 <__retarget_lock_acquire_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	200005be 	.word	0x200005be

08008b80 <__sinit_lock_release>:
 8008b80:	4801      	ldr	r0, [pc, #4]	; (8008b88 <__sinit_lock_release+0x8>)
 8008b82:	f000 b8a2 	b.w	8008cca <__retarget_lock_release_recursive>
 8008b86:	bf00      	nop
 8008b88:	200005be 	.word	0x200005be

08008b8c <__sinit>:
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	4604      	mov	r4, r0
 8008b90:	f7ff fff0 	bl	8008b74 <__sinit_lock_acquire>
 8008b94:	69a3      	ldr	r3, [r4, #24]
 8008b96:	b11b      	cbz	r3, 8008ba0 <__sinit+0x14>
 8008b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9c:	f7ff bff0 	b.w	8008b80 <__sinit_lock_release>
 8008ba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8008ba6:	4b13      	ldr	r3, [pc, #76]	; (8008bf4 <__sinit+0x68>)
 8008ba8:	4a13      	ldr	r2, [pc, #76]	; (8008bf8 <__sinit+0x6c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	bf04      	itt	eq
 8008bb2:	2301      	moveq	r3, #1
 8008bb4:	61a3      	streq	r3, [r4, #24]
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 f820 	bl	8008bfc <__sfp>
 8008bbc:	6060      	str	r0, [r4, #4]
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 f81c 	bl	8008bfc <__sfp>
 8008bc4:	60a0      	str	r0, [r4, #8]
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 f818 	bl	8008bfc <__sfp>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	60e0      	str	r0, [r4, #12]
 8008bd0:	2104      	movs	r1, #4
 8008bd2:	6860      	ldr	r0, [r4, #4]
 8008bd4:	f7ff ff82 	bl	8008adc <std>
 8008bd8:	68a0      	ldr	r0, [r4, #8]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	2109      	movs	r1, #9
 8008bde:	f7ff ff7d 	bl	8008adc <std>
 8008be2:	68e0      	ldr	r0, [r4, #12]
 8008be4:	2202      	movs	r2, #2
 8008be6:	2112      	movs	r1, #18
 8008be8:	f7ff ff78 	bl	8008adc <std>
 8008bec:	2301      	movs	r3, #1
 8008bee:	61a3      	str	r3, [r4, #24]
 8008bf0:	e7d2      	b.n	8008b98 <__sinit+0xc>
 8008bf2:	bf00      	nop
 8008bf4:	08009bb0 	.word	0x08009bb0
 8008bf8:	08008b25 	.word	0x08008b25

08008bfc <__sfp>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	4607      	mov	r7, r0
 8008c00:	f7ff ffac 	bl	8008b5c <__sfp_lock_acquire>
 8008c04:	4b1e      	ldr	r3, [pc, #120]	; (8008c80 <__sfp+0x84>)
 8008c06:	681e      	ldr	r6, [r3, #0]
 8008c08:	69b3      	ldr	r3, [r6, #24]
 8008c0a:	b913      	cbnz	r3, 8008c12 <__sfp+0x16>
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff ffbd 	bl	8008b8c <__sinit>
 8008c12:	3648      	adds	r6, #72	; 0x48
 8008c14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	d503      	bpl.n	8008c24 <__sfp+0x28>
 8008c1c:	6833      	ldr	r3, [r6, #0]
 8008c1e:	b30b      	cbz	r3, 8008c64 <__sfp+0x68>
 8008c20:	6836      	ldr	r6, [r6, #0]
 8008c22:	e7f7      	b.n	8008c14 <__sfp+0x18>
 8008c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c28:	b9d5      	cbnz	r5, 8008c60 <__sfp+0x64>
 8008c2a:	4b16      	ldr	r3, [pc, #88]	; (8008c84 <__sfp+0x88>)
 8008c2c:	60e3      	str	r3, [r4, #12]
 8008c2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c32:	6665      	str	r5, [r4, #100]	; 0x64
 8008c34:	f000 f847 	bl	8008cc6 <__retarget_lock_init_recursive>
 8008c38:	f7ff ff96 	bl	8008b68 <__sfp_lock_release>
 8008c3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c44:	6025      	str	r5, [r4, #0]
 8008c46:	61a5      	str	r5, [r4, #24]
 8008c48:	2208      	movs	r2, #8
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c50:	f7ff fcc2 	bl	80085d8 <memset>
 8008c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c60:	3468      	adds	r4, #104	; 0x68
 8008c62:	e7d9      	b.n	8008c18 <__sfp+0x1c>
 8008c64:	2104      	movs	r1, #4
 8008c66:	4638      	mov	r0, r7
 8008c68:	f7ff ff62 	bl	8008b30 <__sfmoreglue>
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	6030      	str	r0, [r6, #0]
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d1d5      	bne.n	8008c20 <__sfp+0x24>
 8008c74:	f7ff ff78 	bl	8008b68 <__sfp_lock_release>
 8008c78:	230c      	movs	r3, #12
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	e7ee      	b.n	8008c5c <__sfp+0x60>
 8008c7e:	bf00      	nop
 8008c80:	08009bb0 	.word	0x08009bb0
 8008c84:	ffff0001 	.word	0xffff0001

08008c88 <_fwalk_reent>:
 8008c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	4688      	mov	r8, r1
 8008c90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c94:	2700      	movs	r7, #0
 8008c96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c9a:	f1b9 0901 	subs.w	r9, r9, #1
 8008c9e:	d505      	bpl.n	8008cac <_fwalk_reent+0x24>
 8008ca0:	6824      	ldr	r4, [r4, #0]
 8008ca2:	2c00      	cmp	r4, #0
 8008ca4:	d1f7      	bne.n	8008c96 <_fwalk_reent+0xe>
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cac:	89ab      	ldrh	r3, [r5, #12]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d907      	bls.n	8008cc2 <_fwalk_reent+0x3a>
 8008cb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	d003      	beq.n	8008cc2 <_fwalk_reent+0x3a>
 8008cba:	4629      	mov	r1, r5
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	47c0      	blx	r8
 8008cc0:	4307      	orrs	r7, r0
 8008cc2:	3568      	adds	r5, #104	; 0x68
 8008cc4:	e7e9      	b.n	8008c9a <_fwalk_reent+0x12>

08008cc6 <__retarget_lock_init_recursive>:
 8008cc6:	4770      	bx	lr

08008cc8 <__retarget_lock_acquire_recursive>:
 8008cc8:	4770      	bx	lr

08008cca <__retarget_lock_release_recursive>:
 8008cca:	4770      	bx	lr

08008ccc <__swhatbuf_r>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	460e      	mov	r6, r1
 8008cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	b096      	sub	sp, #88	; 0x58
 8008cd8:	4614      	mov	r4, r2
 8008cda:	461d      	mov	r5, r3
 8008cdc:	da08      	bge.n	8008cf0 <__swhatbuf_r+0x24>
 8008cde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	602a      	str	r2, [r5, #0]
 8008ce6:	061a      	lsls	r2, r3, #24
 8008ce8:	d410      	bmi.n	8008d0c <__swhatbuf_r+0x40>
 8008cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cee:	e00e      	b.n	8008d0e <__swhatbuf_r+0x42>
 8008cf0:	466a      	mov	r2, sp
 8008cf2:	f000 fdf1 	bl	80098d8 <_fstat_r>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	dbf1      	blt.n	8008cde <__swhatbuf_r+0x12>
 8008cfa:	9a01      	ldr	r2, [sp, #4]
 8008cfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d04:	425a      	negs	r2, r3
 8008d06:	415a      	adcs	r2, r3
 8008d08:	602a      	str	r2, [r5, #0]
 8008d0a:	e7ee      	b.n	8008cea <__swhatbuf_r+0x1e>
 8008d0c:	2340      	movs	r3, #64	; 0x40
 8008d0e:	2000      	movs	r0, #0
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	b016      	add	sp, #88	; 0x58
 8008d14:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d18 <__smakebuf_r>:
 8008d18:	898b      	ldrh	r3, [r1, #12]
 8008d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d1c:	079d      	lsls	r5, r3, #30
 8008d1e:	4606      	mov	r6, r0
 8008d20:	460c      	mov	r4, r1
 8008d22:	d507      	bpl.n	8008d34 <__smakebuf_r+0x1c>
 8008d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	6123      	str	r3, [r4, #16]
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	6163      	str	r3, [r4, #20]
 8008d30:	b002      	add	sp, #8
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	ab01      	add	r3, sp, #4
 8008d36:	466a      	mov	r2, sp
 8008d38:	f7ff ffc8 	bl	8008ccc <__swhatbuf_r>
 8008d3c:	9900      	ldr	r1, [sp, #0]
 8008d3e:	4605      	mov	r5, r0
 8008d40:	4630      	mov	r0, r6
 8008d42:	f000 f895 	bl	8008e70 <_malloc_r>
 8008d46:	b948      	cbnz	r0, 8008d5c <__smakebuf_r+0x44>
 8008d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d4c:	059a      	lsls	r2, r3, #22
 8008d4e:	d4ef      	bmi.n	8008d30 <__smakebuf_r+0x18>
 8008d50:	f023 0303 	bic.w	r3, r3, #3
 8008d54:	f043 0302 	orr.w	r3, r3, #2
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	e7e3      	b.n	8008d24 <__smakebuf_r+0xc>
 8008d5c:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <__smakebuf_r+0x7c>)
 8008d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	6020      	str	r0, [r4, #0]
 8008d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d68:	81a3      	strh	r3, [r4, #12]
 8008d6a:	9b00      	ldr	r3, [sp, #0]
 8008d6c:	6163      	str	r3, [r4, #20]
 8008d6e:	9b01      	ldr	r3, [sp, #4]
 8008d70:	6120      	str	r0, [r4, #16]
 8008d72:	b15b      	cbz	r3, 8008d8c <__smakebuf_r+0x74>
 8008d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f000 fdbf 	bl	80098fc <_isatty_r>
 8008d7e:	b128      	cbz	r0, 8008d8c <__smakebuf_r+0x74>
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	f023 0303 	bic.w	r3, r3, #3
 8008d86:	f043 0301 	orr.w	r3, r3, #1
 8008d8a:	81a3      	strh	r3, [r4, #12]
 8008d8c:	89a0      	ldrh	r0, [r4, #12]
 8008d8e:	4305      	orrs	r5, r0
 8008d90:	81a5      	strh	r5, [r4, #12]
 8008d92:	e7cd      	b.n	8008d30 <__smakebuf_r+0x18>
 8008d94:	08008b25 	.word	0x08008b25

08008d98 <_free_r>:
 8008d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d9a:	2900      	cmp	r1, #0
 8008d9c:	d044      	beq.n	8008e28 <_free_r+0x90>
 8008d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008da2:	9001      	str	r0, [sp, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f1a1 0404 	sub.w	r4, r1, #4
 8008daa:	bfb8      	it	lt
 8008dac:	18e4      	addlt	r4, r4, r3
 8008dae:	f000 fdef 	bl	8009990 <__malloc_lock>
 8008db2:	4a1e      	ldr	r2, [pc, #120]	; (8008e2c <_free_r+0x94>)
 8008db4:	9801      	ldr	r0, [sp, #4]
 8008db6:	6813      	ldr	r3, [r2, #0]
 8008db8:	b933      	cbnz	r3, 8008dc8 <_free_r+0x30>
 8008dba:	6063      	str	r3, [r4, #4]
 8008dbc:	6014      	str	r4, [r2, #0]
 8008dbe:	b003      	add	sp, #12
 8008dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dc4:	f000 bdea 	b.w	800999c <__malloc_unlock>
 8008dc8:	42a3      	cmp	r3, r4
 8008dca:	d908      	bls.n	8008dde <_free_r+0x46>
 8008dcc:	6825      	ldr	r5, [r4, #0]
 8008dce:	1961      	adds	r1, r4, r5
 8008dd0:	428b      	cmp	r3, r1
 8008dd2:	bf01      	itttt	eq
 8008dd4:	6819      	ldreq	r1, [r3, #0]
 8008dd6:	685b      	ldreq	r3, [r3, #4]
 8008dd8:	1949      	addeq	r1, r1, r5
 8008dda:	6021      	streq	r1, [r4, #0]
 8008ddc:	e7ed      	b.n	8008dba <_free_r+0x22>
 8008dde:	461a      	mov	r2, r3
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	b10b      	cbz	r3, 8008de8 <_free_r+0x50>
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	d9fa      	bls.n	8008dde <_free_r+0x46>
 8008de8:	6811      	ldr	r1, [r2, #0]
 8008dea:	1855      	adds	r5, r2, r1
 8008dec:	42a5      	cmp	r5, r4
 8008dee:	d10b      	bne.n	8008e08 <_free_r+0x70>
 8008df0:	6824      	ldr	r4, [r4, #0]
 8008df2:	4421      	add	r1, r4
 8008df4:	1854      	adds	r4, r2, r1
 8008df6:	42a3      	cmp	r3, r4
 8008df8:	6011      	str	r1, [r2, #0]
 8008dfa:	d1e0      	bne.n	8008dbe <_free_r+0x26>
 8008dfc:	681c      	ldr	r4, [r3, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	6053      	str	r3, [r2, #4]
 8008e02:	4421      	add	r1, r4
 8008e04:	6011      	str	r1, [r2, #0]
 8008e06:	e7da      	b.n	8008dbe <_free_r+0x26>
 8008e08:	d902      	bls.n	8008e10 <_free_r+0x78>
 8008e0a:	230c      	movs	r3, #12
 8008e0c:	6003      	str	r3, [r0, #0]
 8008e0e:	e7d6      	b.n	8008dbe <_free_r+0x26>
 8008e10:	6825      	ldr	r5, [r4, #0]
 8008e12:	1961      	adds	r1, r4, r5
 8008e14:	428b      	cmp	r3, r1
 8008e16:	bf04      	itt	eq
 8008e18:	6819      	ldreq	r1, [r3, #0]
 8008e1a:	685b      	ldreq	r3, [r3, #4]
 8008e1c:	6063      	str	r3, [r4, #4]
 8008e1e:	bf04      	itt	eq
 8008e20:	1949      	addeq	r1, r1, r5
 8008e22:	6021      	streq	r1, [r4, #0]
 8008e24:	6054      	str	r4, [r2, #4]
 8008e26:	e7ca      	b.n	8008dbe <_free_r+0x26>
 8008e28:	b003      	add	sp, #12
 8008e2a:	bd30      	pop	{r4, r5, pc}
 8008e2c:	200005c0 	.word	0x200005c0

08008e30 <sbrk_aligned>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	4e0e      	ldr	r6, [pc, #56]	; (8008e6c <sbrk_aligned+0x3c>)
 8008e34:	460c      	mov	r4, r1
 8008e36:	6831      	ldr	r1, [r6, #0]
 8008e38:	4605      	mov	r5, r0
 8008e3a:	b911      	cbnz	r1, 8008e42 <sbrk_aligned+0x12>
 8008e3c:	f000 fcd6 	bl	80097ec <_sbrk_r>
 8008e40:	6030      	str	r0, [r6, #0]
 8008e42:	4621      	mov	r1, r4
 8008e44:	4628      	mov	r0, r5
 8008e46:	f000 fcd1 	bl	80097ec <_sbrk_r>
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	d00a      	beq.n	8008e64 <sbrk_aligned+0x34>
 8008e4e:	1cc4      	adds	r4, r0, #3
 8008e50:	f024 0403 	bic.w	r4, r4, #3
 8008e54:	42a0      	cmp	r0, r4
 8008e56:	d007      	beq.n	8008e68 <sbrk_aligned+0x38>
 8008e58:	1a21      	subs	r1, r4, r0
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f000 fcc6 	bl	80097ec <_sbrk_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	d101      	bne.n	8008e68 <sbrk_aligned+0x38>
 8008e64:	f04f 34ff 	mov.w	r4, #4294967295
 8008e68:	4620      	mov	r0, r4
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	200005c4 	.word	0x200005c4

08008e70 <_malloc_r>:
 8008e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e74:	1ccd      	adds	r5, r1, #3
 8008e76:	f025 0503 	bic.w	r5, r5, #3
 8008e7a:	3508      	adds	r5, #8
 8008e7c:	2d0c      	cmp	r5, #12
 8008e7e:	bf38      	it	cc
 8008e80:	250c      	movcc	r5, #12
 8008e82:	2d00      	cmp	r5, #0
 8008e84:	4607      	mov	r7, r0
 8008e86:	db01      	blt.n	8008e8c <_malloc_r+0x1c>
 8008e88:	42a9      	cmp	r1, r5
 8008e8a:	d905      	bls.n	8008e98 <_malloc_r+0x28>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	2600      	movs	r6, #0
 8008e92:	4630      	mov	r0, r6
 8008e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e98:	4e2e      	ldr	r6, [pc, #184]	; (8008f54 <_malloc_r+0xe4>)
 8008e9a:	f000 fd79 	bl	8009990 <__malloc_lock>
 8008e9e:	6833      	ldr	r3, [r6, #0]
 8008ea0:	461c      	mov	r4, r3
 8008ea2:	bb34      	cbnz	r4, 8008ef2 <_malloc_r+0x82>
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f7ff ffc2 	bl	8008e30 <sbrk_aligned>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	4604      	mov	r4, r0
 8008eb0:	d14d      	bne.n	8008f4e <_malloc_r+0xde>
 8008eb2:	6834      	ldr	r4, [r6, #0]
 8008eb4:	4626      	mov	r6, r4
 8008eb6:	2e00      	cmp	r6, #0
 8008eb8:	d140      	bne.n	8008f3c <_malloc_r+0xcc>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	eb04 0803 	add.w	r8, r4, r3
 8008ec4:	f000 fc92 	bl	80097ec <_sbrk_r>
 8008ec8:	4580      	cmp	r8, r0
 8008eca:	d13a      	bne.n	8008f42 <_malloc_r+0xd2>
 8008ecc:	6821      	ldr	r1, [r4, #0]
 8008ece:	3503      	adds	r5, #3
 8008ed0:	1a6d      	subs	r5, r5, r1
 8008ed2:	f025 0503 	bic.w	r5, r5, #3
 8008ed6:	3508      	adds	r5, #8
 8008ed8:	2d0c      	cmp	r5, #12
 8008eda:	bf38      	it	cc
 8008edc:	250c      	movcc	r5, #12
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff ffa5 	bl	8008e30 <sbrk_aligned>
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d02b      	beq.n	8008f42 <_malloc_r+0xd2>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	442b      	add	r3, r5
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	e00e      	b.n	8008f10 <_malloc_r+0xa0>
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	1b52      	subs	r2, r2, r5
 8008ef6:	d41e      	bmi.n	8008f36 <_malloc_r+0xc6>
 8008ef8:	2a0b      	cmp	r2, #11
 8008efa:	d916      	bls.n	8008f2a <_malloc_r+0xba>
 8008efc:	1961      	adds	r1, r4, r5
 8008efe:	42a3      	cmp	r3, r4
 8008f00:	6025      	str	r5, [r4, #0]
 8008f02:	bf18      	it	ne
 8008f04:	6059      	strne	r1, [r3, #4]
 8008f06:	6863      	ldr	r3, [r4, #4]
 8008f08:	bf08      	it	eq
 8008f0a:	6031      	streq	r1, [r6, #0]
 8008f0c:	5162      	str	r2, [r4, r5]
 8008f0e:	604b      	str	r3, [r1, #4]
 8008f10:	4638      	mov	r0, r7
 8008f12:	f104 060b 	add.w	r6, r4, #11
 8008f16:	f000 fd41 	bl	800999c <__malloc_unlock>
 8008f1a:	f026 0607 	bic.w	r6, r6, #7
 8008f1e:	1d23      	adds	r3, r4, #4
 8008f20:	1af2      	subs	r2, r6, r3
 8008f22:	d0b6      	beq.n	8008e92 <_malloc_r+0x22>
 8008f24:	1b9b      	subs	r3, r3, r6
 8008f26:	50a3      	str	r3, [r4, r2]
 8008f28:	e7b3      	b.n	8008e92 <_malloc_r+0x22>
 8008f2a:	6862      	ldr	r2, [r4, #4]
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	bf0c      	ite	eq
 8008f30:	6032      	streq	r2, [r6, #0]
 8008f32:	605a      	strne	r2, [r3, #4]
 8008f34:	e7ec      	b.n	8008f10 <_malloc_r+0xa0>
 8008f36:	4623      	mov	r3, r4
 8008f38:	6864      	ldr	r4, [r4, #4]
 8008f3a:	e7b2      	b.n	8008ea2 <_malloc_r+0x32>
 8008f3c:	4634      	mov	r4, r6
 8008f3e:	6876      	ldr	r6, [r6, #4]
 8008f40:	e7b9      	b.n	8008eb6 <_malloc_r+0x46>
 8008f42:	230c      	movs	r3, #12
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	4638      	mov	r0, r7
 8008f48:	f000 fd28 	bl	800999c <__malloc_unlock>
 8008f4c:	e7a1      	b.n	8008e92 <_malloc_r+0x22>
 8008f4e:	6025      	str	r5, [r4, #0]
 8008f50:	e7de      	b.n	8008f10 <_malloc_r+0xa0>
 8008f52:	bf00      	nop
 8008f54:	200005c0 	.word	0x200005c0

08008f58 <__ssputs_r>:
 8008f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	688e      	ldr	r6, [r1, #8]
 8008f5e:	429e      	cmp	r6, r3
 8008f60:	4682      	mov	sl, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	4690      	mov	r8, r2
 8008f66:	461f      	mov	r7, r3
 8008f68:	d838      	bhi.n	8008fdc <__ssputs_r+0x84>
 8008f6a:	898a      	ldrh	r2, [r1, #12]
 8008f6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f70:	d032      	beq.n	8008fd8 <__ssputs_r+0x80>
 8008f72:	6825      	ldr	r5, [r4, #0]
 8008f74:	6909      	ldr	r1, [r1, #16]
 8008f76:	eba5 0901 	sub.w	r9, r5, r1
 8008f7a:	6965      	ldr	r5, [r4, #20]
 8008f7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f84:	3301      	adds	r3, #1
 8008f86:	444b      	add	r3, r9
 8008f88:	106d      	asrs	r5, r5, #1
 8008f8a:	429d      	cmp	r5, r3
 8008f8c:	bf38      	it	cc
 8008f8e:	461d      	movcc	r5, r3
 8008f90:	0553      	lsls	r3, r2, #21
 8008f92:	d531      	bpl.n	8008ff8 <__ssputs_r+0xa0>
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7ff ff6b 	bl	8008e70 <_malloc_r>
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	b950      	cbnz	r0, 8008fb4 <__ssputs_r+0x5c>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	f8ca 3000 	str.w	r3, [sl]
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb4:	6921      	ldr	r1, [r4, #16]
 8008fb6:	464a      	mov	r2, r9
 8008fb8:	f000 fcc2 	bl	8009940 <memcpy>
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc6:	81a3      	strh	r3, [r4, #12]
 8008fc8:	6126      	str	r6, [r4, #16]
 8008fca:	6165      	str	r5, [r4, #20]
 8008fcc:	444e      	add	r6, r9
 8008fce:	eba5 0509 	sub.w	r5, r5, r9
 8008fd2:	6026      	str	r6, [r4, #0]
 8008fd4:	60a5      	str	r5, [r4, #8]
 8008fd6:	463e      	mov	r6, r7
 8008fd8:	42be      	cmp	r6, r7
 8008fda:	d900      	bls.n	8008fde <__ssputs_r+0x86>
 8008fdc:	463e      	mov	r6, r7
 8008fde:	6820      	ldr	r0, [r4, #0]
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	4641      	mov	r1, r8
 8008fe4:	f000 fcba 	bl	800995c <memmove>
 8008fe8:	68a3      	ldr	r3, [r4, #8]
 8008fea:	1b9b      	subs	r3, r3, r6
 8008fec:	60a3      	str	r3, [r4, #8]
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	4433      	add	r3, r6
 8008ff2:	6023      	str	r3, [r4, #0]
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e7db      	b.n	8008fb0 <__ssputs_r+0x58>
 8008ff8:	462a      	mov	r2, r5
 8008ffa:	f000 fcd5 	bl	80099a8 <_realloc_r>
 8008ffe:	4606      	mov	r6, r0
 8009000:	2800      	cmp	r0, #0
 8009002:	d1e1      	bne.n	8008fc8 <__ssputs_r+0x70>
 8009004:	6921      	ldr	r1, [r4, #16]
 8009006:	4650      	mov	r0, sl
 8009008:	f7ff fec6 	bl	8008d98 <_free_r>
 800900c:	e7c7      	b.n	8008f9e <__ssputs_r+0x46>
	...

08009010 <_svfiprintf_r>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	4698      	mov	r8, r3
 8009016:	898b      	ldrh	r3, [r1, #12]
 8009018:	061b      	lsls	r3, r3, #24
 800901a:	b09d      	sub	sp, #116	; 0x74
 800901c:	4607      	mov	r7, r0
 800901e:	460d      	mov	r5, r1
 8009020:	4614      	mov	r4, r2
 8009022:	d50e      	bpl.n	8009042 <_svfiprintf_r+0x32>
 8009024:	690b      	ldr	r3, [r1, #16]
 8009026:	b963      	cbnz	r3, 8009042 <_svfiprintf_r+0x32>
 8009028:	2140      	movs	r1, #64	; 0x40
 800902a:	f7ff ff21 	bl	8008e70 <_malloc_r>
 800902e:	6028      	str	r0, [r5, #0]
 8009030:	6128      	str	r0, [r5, #16]
 8009032:	b920      	cbnz	r0, 800903e <_svfiprintf_r+0x2e>
 8009034:	230c      	movs	r3, #12
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	e0d1      	b.n	80091e2 <_svfiprintf_r+0x1d2>
 800903e:	2340      	movs	r3, #64	; 0x40
 8009040:	616b      	str	r3, [r5, #20]
 8009042:	2300      	movs	r3, #0
 8009044:	9309      	str	r3, [sp, #36]	; 0x24
 8009046:	2320      	movs	r3, #32
 8009048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800904c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009050:	2330      	movs	r3, #48	; 0x30
 8009052:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091fc <_svfiprintf_r+0x1ec>
 8009056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800905a:	f04f 0901 	mov.w	r9, #1
 800905e:	4623      	mov	r3, r4
 8009060:	469a      	mov	sl, r3
 8009062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009066:	b10a      	cbz	r2, 800906c <_svfiprintf_r+0x5c>
 8009068:	2a25      	cmp	r2, #37	; 0x25
 800906a:	d1f9      	bne.n	8009060 <_svfiprintf_r+0x50>
 800906c:	ebba 0b04 	subs.w	fp, sl, r4
 8009070:	d00b      	beq.n	800908a <_svfiprintf_r+0x7a>
 8009072:	465b      	mov	r3, fp
 8009074:	4622      	mov	r2, r4
 8009076:	4629      	mov	r1, r5
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff ff6d 	bl	8008f58 <__ssputs_r>
 800907e:	3001      	adds	r0, #1
 8009080:	f000 80aa 	beq.w	80091d8 <_svfiprintf_r+0x1c8>
 8009084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009086:	445a      	add	r2, fp
 8009088:	9209      	str	r2, [sp, #36]	; 0x24
 800908a:	f89a 3000 	ldrb.w	r3, [sl]
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 80a2 	beq.w	80091d8 <_svfiprintf_r+0x1c8>
 8009094:	2300      	movs	r3, #0
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800909e:	f10a 0a01 	add.w	sl, sl, #1
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	9307      	str	r3, [sp, #28]
 80090a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090aa:	931a      	str	r3, [sp, #104]	; 0x68
 80090ac:	4654      	mov	r4, sl
 80090ae:	2205      	movs	r2, #5
 80090b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b4:	4851      	ldr	r0, [pc, #324]	; (80091fc <_svfiprintf_r+0x1ec>)
 80090b6:	f7f7 f8a3 	bl	8000200 <memchr>
 80090ba:	9a04      	ldr	r2, [sp, #16]
 80090bc:	b9d8      	cbnz	r0, 80090f6 <_svfiprintf_r+0xe6>
 80090be:	06d0      	lsls	r0, r2, #27
 80090c0:	bf44      	itt	mi
 80090c2:	2320      	movmi	r3, #32
 80090c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c8:	0711      	lsls	r1, r2, #28
 80090ca:	bf44      	itt	mi
 80090cc:	232b      	movmi	r3, #43	; 0x2b
 80090ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090d2:	f89a 3000 	ldrb.w	r3, [sl]
 80090d6:	2b2a      	cmp	r3, #42	; 0x2a
 80090d8:	d015      	beq.n	8009106 <_svfiprintf_r+0xf6>
 80090da:	9a07      	ldr	r2, [sp, #28]
 80090dc:	4654      	mov	r4, sl
 80090de:	2000      	movs	r0, #0
 80090e0:	f04f 0c0a 	mov.w	ip, #10
 80090e4:	4621      	mov	r1, r4
 80090e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ea:	3b30      	subs	r3, #48	; 0x30
 80090ec:	2b09      	cmp	r3, #9
 80090ee:	d94e      	bls.n	800918e <_svfiprintf_r+0x17e>
 80090f0:	b1b0      	cbz	r0, 8009120 <_svfiprintf_r+0x110>
 80090f2:	9207      	str	r2, [sp, #28]
 80090f4:	e014      	b.n	8009120 <_svfiprintf_r+0x110>
 80090f6:	eba0 0308 	sub.w	r3, r0, r8
 80090fa:	fa09 f303 	lsl.w	r3, r9, r3
 80090fe:	4313      	orrs	r3, r2
 8009100:	9304      	str	r3, [sp, #16]
 8009102:	46a2      	mov	sl, r4
 8009104:	e7d2      	b.n	80090ac <_svfiprintf_r+0x9c>
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	1d19      	adds	r1, r3, #4
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	9103      	str	r1, [sp, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfbb      	ittet	lt
 8009112:	425b      	neglt	r3, r3
 8009114:	f042 0202 	orrlt.w	r2, r2, #2
 8009118:	9307      	strge	r3, [sp, #28]
 800911a:	9307      	strlt	r3, [sp, #28]
 800911c:	bfb8      	it	lt
 800911e:	9204      	strlt	r2, [sp, #16]
 8009120:	7823      	ldrb	r3, [r4, #0]
 8009122:	2b2e      	cmp	r3, #46	; 0x2e
 8009124:	d10c      	bne.n	8009140 <_svfiprintf_r+0x130>
 8009126:	7863      	ldrb	r3, [r4, #1]
 8009128:	2b2a      	cmp	r3, #42	; 0x2a
 800912a:	d135      	bne.n	8009198 <_svfiprintf_r+0x188>
 800912c:	9b03      	ldr	r3, [sp, #12]
 800912e:	1d1a      	adds	r2, r3, #4
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	9203      	str	r2, [sp, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	bfb8      	it	lt
 8009138:	f04f 33ff 	movlt.w	r3, #4294967295
 800913c:	3402      	adds	r4, #2
 800913e:	9305      	str	r3, [sp, #20]
 8009140:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800920c <_svfiprintf_r+0x1fc>
 8009144:	7821      	ldrb	r1, [r4, #0]
 8009146:	2203      	movs	r2, #3
 8009148:	4650      	mov	r0, sl
 800914a:	f7f7 f859 	bl	8000200 <memchr>
 800914e:	b140      	cbz	r0, 8009162 <_svfiprintf_r+0x152>
 8009150:	2340      	movs	r3, #64	; 0x40
 8009152:	eba0 000a 	sub.w	r0, r0, sl
 8009156:	fa03 f000 	lsl.w	r0, r3, r0
 800915a:	9b04      	ldr	r3, [sp, #16]
 800915c:	4303      	orrs	r3, r0
 800915e:	3401      	adds	r4, #1
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009166:	4826      	ldr	r0, [pc, #152]	; (8009200 <_svfiprintf_r+0x1f0>)
 8009168:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800916c:	2206      	movs	r2, #6
 800916e:	f7f7 f847 	bl	8000200 <memchr>
 8009172:	2800      	cmp	r0, #0
 8009174:	d038      	beq.n	80091e8 <_svfiprintf_r+0x1d8>
 8009176:	4b23      	ldr	r3, [pc, #140]	; (8009204 <_svfiprintf_r+0x1f4>)
 8009178:	bb1b      	cbnz	r3, 80091c2 <_svfiprintf_r+0x1b2>
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	3307      	adds	r3, #7
 800917e:	f023 0307 	bic.w	r3, r3, #7
 8009182:	3308      	adds	r3, #8
 8009184:	9303      	str	r3, [sp, #12]
 8009186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009188:	4433      	add	r3, r6
 800918a:	9309      	str	r3, [sp, #36]	; 0x24
 800918c:	e767      	b.n	800905e <_svfiprintf_r+0x4e>
 800918e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009192:	460c      	mov	r4, r1
 8009194:	2001      	movs	r0, #1
 8009196:	e7a5      	b.n	80090e4 <_svfiprintf_r+0xd4>
 8009198:	2300      	movs	r3, #0
 800919a:	3401      	adds	r4, #1
 800919c:	9305      	str	r3, [sp, #20]
 800919e:	4619      	mov	r1, r3
 80091a0:	f04f 0c0a 	mov.w	ip, #10
 80091a4:	4620      	mov	r0, r4
 80091a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091aa:	3a30      	subs	r2, #48	; 0x30
 80091ac:	2a09      	cmp	r2, #9
 80091ae:	d903      	bls.n	80091b8 <_svfiprintf_r+0x1a8>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0c5      	beq.n	8009140 <_svfiprintf_r+0x130>
 80091b4:	9105      	str	r1, [sp, #20]
 80091b6:	e7c3      	b.n	8009140 <_svfiprintf_r+0x130>
 80091b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80091bc:	4604      	mov	r4, r0
 80091be:	2301      	movs	r3, #1
 80091c0:	e7f0      	b.n	80091a4 <_svfiprintf_r+0x194>
 80091c2:	ab03      	add	r3, sp, #12
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	462a      	mov	r2, r5
 80091c8:	4b0f      	ldr	r3, [pc, #60]	; (8009208 <_svfiprintf_r+0x1f8>)
 80091ca:	a904      	add	r1, sp, #16
 80091cc:	4638      	mov	r0, r7
 80091ce:	f3af 8000 	nop.w
 80091d2:	1c42      	adds	r2, r0, #1
 80091d4:	4606      	mov	r6, r0
 80091d6:	d1d6      	bne.n	8009186 <_svfiprintf_r+0x176>
 80091d8:	89ab      	ldrh	r3, [r5, #12]
 80091da:	065b      	lsls	r3, r3, #25
 80091dc:	f53f af2c 	bmi.w	8009038 <_svfiprintf_r+0x28>
 80091e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091e2:	b01d      	add	sp, #116	; 0x74
 80091e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e8:	ab03      	add	r3, sp, #12
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	462a      	mov	r2, r5
 80091ee:	4b06      	ldr	r3, [pc, #24]	; (8009208 <_svfiprintf_r+0x1f8>)
 80091f0:	a904      	add	r1, sp, #16
 80091f2:	4638      	mov	r0, r7
 80091f4:	f000 f9d4 	bl	80095a0 <_printf_i>
 80091f8:	e7eb      	b.n	80091d2 <_svfiprintf_r+0x1c2>
 80091fa:	bf00      	nop
 80091fc:	08009c14 	.word	0x08009c14
 8009200:	08009c1e 	.word	0x08009c1e
 8009204:	00000000 	.word	0x00000000
 8009208:	08008f59 	.word	0x08008f59
 800920c:	08009c1a 	.word	0x08009c1a

08009210 <__sfputc_r>:
 8009210:	6893      	ldr	r3, [r2, #8]
 8009212:	3b01      	subs	r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	b410      	push	{r4}
 8009218:	6093      	str	r3, [r2, #8]
 800921a:	da08      	bge.n	800922e <__sfputc_r+0x1e>
 800921c:	6994      	ldr	r4, [r2, #24]
 800921e:	42a3      	cmp	r3, r4
 8009220:	db01      	blt.n	8009226 <__sfputc_r+0x16>
 8009222:	290a      	cmp	r1, #10
 8009224:	d103      	bne.n	800922e <__sfputc_r+0x1e>
 8009226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800922a:	f7ff bad5 	b.w	80087d8 <__swbuf_r>
 800922e:	6813      	ldr	r3, [r2, #0]
 8009230:	1c58      	adds	r0, r3, #1
 8009232:	6010      	str	r0, [r2, #0]
 8009234:	7019      	strb	r1, [r3, #0]
 8009236:	4608      	mov	r0, r1
 8009238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800923c:	4770      	bx	lr

0800923e <__sfputs_r>:
 800923e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009240:	4606      	mov	r6, r0
 8009242:	460f      	mov	r7, r1
 8009244:	4614      	mov	r4, r2
 8009246:	18d5      	adds	r5, r2, r3
 8009248:	42ac      	cmp	r4, r5
 800924a:	d101      	bne.n	8009250 <__sfputs_r+0x12>
 800924c:	2000      	movs	r0, #0
 800924e:	e007      	b.n	8009260 <__sfputs_r+0x22>
 8009250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009254:	463a      	mov	r2, r7
 8009256:	4630      	mov	r0, r6
 8009258:	f7ff ffda 	bl	8009210 <__sfputc_r>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d1f3      	bne.n	8009248 <__sfputs_r+0xa>
 8009260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009264 <_vfiprintf_r>:
 8009264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	460d      	mov	r5, r1
 800926a:	b09d      	sub	sp, #116	; 0x74
 800926c:	4614      	mov	r4, r2
 800926e:	4698      	mov	r8, r3
 8009270:	4606      	mov	r6, r0
 8009272:	b118      	cbz	r0, 800927c <_vfiprintf_r+0x18>
 8009274:	6983      	ldr	r3, [r0, #24]
 8009276:	b90b      	cbnz	r3, 800927c <_vfiprintf_r+0x18>
 8009278:	f7ff fc88 	bl	8008b8c <__sinit>
 800927c:	4b89      	ldr	r3, [pc, #548]	; (80094a4 <_vfiprintf_r+0x240>)
 800927e:	429d      	cmp	r5, r3
 8009280:	d11b      	bne.n	80092ba <_vfiprintf_r+0x56>
 8009282:	6875      	ldr	r5, [r6, #4]
 8009284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009286:	07d9      	lsls	r1, r3, #31
 8009288:	d405      	bmi.n	8009296 <_vfiprintf_r+0x32>
 800928a:	89ab      	ldrh	r3, [r5, #12]
 800928c:	059a      	lsls	r2, r3, #22
 800928e:	d402      	bmi.n	8009296 <_vfiprintf_r+0x32>
 8009290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009292:	f7ff fd19 	bl	8008cc8 <__retarget_lock_acquire_recursive>
 8009296:	89ab      	ldrh	r3, [r5, #12]
 8009298:	071b      	lsls	r3, r3, #28
 800929a:	d501      	bpl.n	80092a0 <_vfiprintf_r+0x3c>
 800929c:	692b      	ldr	r3, [r5, #16]
 800929e:	b9eb      	cbnz	r3, 80092dc <_vfiprintf_r+0x78>
 80092a0:	4629      	mov	r1, r5
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7ff faea 	bl	800887c <__swsetup_r>
 80092a8:	b1c0      	cbz	r0, 80092dc <_vfiprintf_r+0x78>
 80092aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092ac:	07dc      	lsls	r4, r3, #31
 80092ae:	d50e      	bpl.n	80092ce <_vfiprintf_r+0x6a>
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	b01d      	add	sp, #116	; 0x74
 80092b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ba:	4b7b      	ldr	r3, [pc, #492]	; (80094a8 <_vfiprintf_r+0x244>)
 80092bc:	429d      	cmp	r5, r3
 80092be:	d101      	bne.n	80092c4 <_vfiprintf_r+0x60>
 80092c0:	68b5      	ldr	r5, [r6, #8]
 80092c2:	e7df      	b.n	8009284 <_vfiprintf_r+0x20>
 80092c4:	4b79      	ldr	r3, [pc, #484]	; (80094ac <_vfiprintf_r+0x248>)
 80092c6:	429d      	cmp	r5, r3
 80092c8:	bf08      	it	eq
 80092ca:	68f5      	ldreq	r5, [r6, #12]
 80092cc:	e7da      	b.n	8009284 <_vfiprintf_r+0x20>
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	0598      	lsls	r0, r3, #22
 80092d2:	d4ed      	bmi.n	80092b0 <_vfiprintf_r+0x4c>
 80092d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d6:	f7ff fcf8 	bl	8008cca <__retarget_lock_release_recursive>
 80092da:	e7e9      	b.n	80092b0 <_vfiprintf_r+0x4c>
 80092dc:	2300      	movs	r3, #0
 80092de:	9309      	str	r3, [sp, #36]	; 0x24
 80092e0:	2320      	movs	r3, #32
 80092e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ea:	2330      	movs	r3, #48	; 0x30
 80092ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094b0 <_vfiprintf_r+0x24c>
 80092f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092f4:	f04f 0901 	mov.w	r9, #1
 80092f8:	4623      	mov	r3, r4
 80092fa:	469a      	mov	sl, r3
 80092fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009300:	b10a      	cbz	r2, 8009306 <_vfiprintf_r+0xa2>
 8009302:	2a25      	cmp	r2, #37	; 0x25
 8009304:	d1f9      	bne.n	80092fa <_vfiprintf_r+0x96>
 8009306:	ebba 0b04 	subs.w	fp, sl, r4
 800930a:	d00b      	beq.n	8009324 <_vfiprintf_r+0xc0>
 800930c:	465b      	mov	r3, fp
 800930e:	4622      	mov	r2, r4
 8009310:	4629      	mov	r1, r5
 8009312:	4630      	mov	r0, r6
 8009314:	f7ff ff93 	bl	800923e <__sfputs_r>
 8009318:	3001      	adds	r0, #1
 800931a:	f000 80aa 	beq.w	8009472 <_vfiprintf_r+0x20e>
 800931e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009320:	445a      	add	r2, fp
 8009322:	9209      	str	r2, [sp, #36]	; 0x24
 8009324:	f89a 3000 	ldrb.w	r3, [sl]
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 80a2 	beq.w	8009472 <_vfiprintf_r+0x20e>
 800932e:	2300      	movs	r3, #0
 8009330:	f04f 32ff 	mov.w	r2, #4294967295
 8009334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009338:	f10a 0a01 	add.w	sl, sl, #1
 800933c:	9304      	str	r3, [sp, #16]
 800933e:	9307      	str	r3, [sp, #28]
 8009340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009344:	931a      	str	r3, [sp, #104]	; 0x68
 8009346:	4654      	mov	r4, sl
 8009348:	2205      	movs	r2, #5
 800934a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934e:	4858      	ldr	r0, [pc, #352]	; (80094b0 <_vfiprintf_r+0x24c>)
 8009350:	f7f6 ff56 	bl	8000200 <memchr>
 8009354:	9a04      	ldr	r2, [sp, #16]
 8009356:	b9d8      	cbnz	r0, 8009390 <_vfiprintf_r+0x12c>
 8009358:	06d1      	lsls	r1, r2, #27
 800935a:	bf44      	itt	mi
 800935c:	2320      	movmi	r3, #32
 800935e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009362:	0713      	lsls	r3, r2, #28
 8009364:	bf44      	itt	mi
 8009366:	232b      	movmi	r3, #43	; 0x2b
 8009368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800936c:	f89a 3000 	ldrb.w	r3, [sl]
 8009370:	2b2a      	cmp	r3, #42	; 0x2a
 8009372:	d015      	beq.n	80093a0 <_vfiprintf_r+0x13c>
 8009374:	9a07      	ldr	r2, [sp, #28]
 8009376:	4654      	mov	r4, sl
 8009378:	2000      	movs	r0, #0
 800937a:	f04f 0c0a 	mov.w	ip, #10
 800937e:	4621      	mov	r1, r4
 8009380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009384:	3b30      	subs	r3, #48	; 0x30
 8009386:	2b09      	cmp	r3, #9
 8009388:	d94e      	bls.n	8009428 <_vfiprintf_r+0x1c4>
 800938a:	b1b0      	cbz	r0, 80093ba <_vfiprintf_r+0x156>
 800938c:	9207      	str	r2, [sp, #28]
 800938e:	e014      	b.n	80093ba <_vfiprintf_r+0x156>
 8009390:	eba0 0308 	sub.w	r3, r0, r8
 8009394:	fa09 f303 	lsl.w	r3, r9, r3
 8009398:	4313      	orrs	r3, r2
 800939a:	9304      	str	r3, [sp, #16]
 800939c:	46a2      	mov	sl, r4
 800939e:	e7d2      	b.n	8009346 <_vfiprintf_r+0xe2>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	1d19      	adds	r1, r3, #4
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	9103      	str	r1, [sp, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	bfbb      	ittet	lt
 80093ac:	425b      	neglt	r3, r3
 80093ae:	f042 0202 	orrlt.w	r2, r2, #2
 80093b2:	9307      	strge	r3, [sp, #28]
 80093b4:	9307      	strlt	r3, [sp, #28]
 80093b6:	bfb8      	it	lt
 80093b8:	9204      	strlt	r2, [sp, #16]
 80093ba:	7823      	ldrb	r3, [r4, #0]
 80093bc:	2b2e      	cmp	r3, #46	; 0x2e
 80093be:	d10c      	bne.n	80093da <_vfiprintf_r+0x176>
 80093c0:	7863      	ldrb	r3, [r4, #1]
 80093c2:	2b2a      	cmp	r3, #42	; 0x2a
 80093c4:	d135      	bne.n	8009432 <_vfiprintf_r+0x1ce>
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	1d1a      	adds	r2, r3, #4
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	9203      	str	r2, [sp, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfb8      	it	lt
 80093d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80093d6:	3402      	adds	r4, #2
 80093d8:	9305      	str	r3, [sp, #20]
 80093da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094c0 <_vfiprintf_r+0x25c>
 80093de:	7821      	ldrb	r1, [r4, #0]
 80093e0:	2203      	movs	r2, #3
 80093e2:	4650      	mov	r0, sl
 80093e4:	f7f6 ff0c 	bl	8000200 <memchr>
 80093e8:	b140      	cbz	r0, 80093fc <_vfiprintf_r+0x198>
 80093ea:	2340      	movs	r3, #64	; 0x40
 80093ec:	eba0 000a 	sub.w	r0, r0, sl
 80093f0:	fa03 f000 	lsl.w	r0, r3, r0
 80093f4:	9b04      	ldr	r3, [sp, #16]
 80093f6:	4303      	orrs	r3, r0
 80093f8:	3401      	adds	r4, #1
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009400:	482c      	ldr	r0, [pc, #176]	; (80094b4 <_vfiprintf_r+0x250>)
 8009402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009406:	2206      	movs	r2, #6
 8009408:	f7f6 fefa 	bl	8000200 <memchr>
 800940c:	2800      	cmp	r0, #0
 800940e:	d03f      	beq.n	8009490 <_vfiprintf_r+0x22c>
 8009410:	4b29      	ldr	r3, [pc, #164]	; (80094b8 <_vfiprintf_r+0x254>)
 8009412:	bb1b      	cbnz	r3, 800945c <_vfiprintf_r+0x1f8>
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	3307      	adds	r3, #7
 8009418:	f023 0307 	bic.w	r3, r3, #7
 800941c:	3308      	adds	r3, #8
 800941e:	9303      	str	r3, [sp, #12]
 8009420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009422:	443b      	add	r3, r7
 8009424:	9309      	str	r3, [sp, #36]	; 0x24
 8009426:	e767      	b.n	80092f8 <_vfiprintf_r+0x94>
 8009428:	fb0c 3202 	mla	r2, ip, r2, r3
 800942c:	460c      	mov	r4, r1
 800942e:	2001      	movs	r0, #1
 8009430:	e7a5      	b.n	800937e <_vfiprintf_r+0x11a>
 8009432:	2300      	movs	r3, #0
 8009434:	3401      	adds	r4, #1
 8009436:	9305      	str	r3, [sp, #20]
 8009438:	4619      	mov	r1, r3
 800943a:	f04f 0c0a 	mov.w	ip, #10
 800943e:	4620      	mov	r0, r4
 8009440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009444:	3a30      	subs	r2, #48	; 0x30
 8009446:	2a09      	cmp	r2, #9
 8009448:	d903      	bls.n	8009452 <_vfiprintf_r+0x1ee>
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0c5      	beq.n	80093da <_vfiprintf_r+0x176>
 800944e:	9105      	str	r1, [sp, #20]
 8009450:	e7c3      	b.n	80093da <_vfiprintf_r+0x176>
 8009452:	fb0c 2101 	mla	r1, ip, r1, r2
 8009456:	4604      	mov	r4, r0
 8009458:	2301      	movs	r3, #1
 800945a:	e7f0      	b.n	800943e <_vfiprintf_r+0x1da>
 800945c:	ab03      	add	r3, sp, #12
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	462a      	mov	r2, r5
 8009462:	4b16      	ldr	r3, [pc, #88]	; (80094bc <_vfiprintf_r+0x258>)
 8009464:	a904      	add	r1, sp, #16
 8009466:	4630      	mov	r0, r6
 8009468:	f3af 8000 	nop.w
 800946c:	4607      	mov	r7, r0
 800946e:	1c78      	adds	r0, r7, #1
 8009470:	d1d6      	bne.n	8009420 <_vfiprintf_r+0x1bc>
 8009472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009474:	07d9      	lsls	r1, r3, #31
 8009476:	d405      	bmi.n	8009484 <_vfiprintf_r+0x220>
 8009478:	89ab      	ldrh	r3, [r5, #12]
 800947a:	059a      	lsls	r2, r3, #22
 800947c:	d402      	bmi.n	8009484 <_vfiprintf_r+0x220>
 800947e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009480:	f7ff fc23 	bl	8008cca <__retarget_lock_release_recursive>
 8009484:	89ab      	ldrh	r3, [r5, #12]
 8009486:	065b      	lsls	r3, r3, #25
 8009488:	f53f af12 	bmi.w	80092b0 <_vfiprintf_r+0x4c>
 800948c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800948e:	e711      	b.n	80092b4 <_vfiprintf_r+0x50>
 8009490:	ab03      	add	r3, sp, #12
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	462a      	mov	r2, r5
 8009496:	4b09      	ldr	r3, [pc, #36]	; (80094bc <_vfiprintf_r+0x258>)
 8009498:	a904      	add	r1, sp, #16
 800949a:	4630      	mov	r0, r6
 800949c:	f000 f880 	bl	80095a0 <_printf_i>
 80094a0:	e7e4      	b.n	800946c <_vfiprintf_r+0x208>
 80094a2:	bf00      	nop
 80094a4:	08009bd4 	.word	0x08009bd4
 80094a8:	08009bf4 	.word	0x08009bf4
 80094ac:	08009bb4 	.word	0x08009bb4
 80094b0:	08009c14 	.word	0x08009c14
 80094b4:	08009c1e 	.word	0x08009c1e
 80094b8:	00000000 	.word	0x00000000
 80094bc:	0800923f 	.word	0x0800923f
 80094c0:	08009c1a 	.word	0x08009c1a

080094c4 <_printf_common>:
 80094c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	4616      	mov	r6, r2
 80094ca:	4699      	mov	r9, r3
 80094cc:	688a      	ldr	r2, [r1, #8]
 80094ce:	690b      	ldr	r3, [r1, #16]
 80094d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094d4:	4293      	cmp	r3, r2
 80094d6:	bfb8      	it	lt
 80094d8:	4613      	movlt	r3, r2
 80094da:	6033      	str	r3, [r6, #0]
 80094dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094e0:	4607      	mov	r7, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	b10a      	cbz	r2, 80094ea <_printf_common+0x26>
 80094e6:	3301      	adds	r3, #1
 80094e8:	6033      	str	r3, [r6, #0]
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	0699      	lsls	r1, r3, #26
 80094ee:	bf42      	ittt	mi
 80094f0:	6833      	ldrmi	r3, [r6, #0]
 80094f2:	3302      	addmi	r3, #2
 80094f4:	6033      	strmi	r3, [r6, #0]
 80094f6:	6825      	ldr	r5, [r4, #0]
 80094f8:	f015 0506 	ands.w	r5, r5, #6
 80094fc:	d106      	bne.n	800950c <_printf_common+0x48>
 80094fe:	f104 0a19 	add.w	sl, r4, #25
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	6832      	ldr	r2, [r6, #0]
 8009506:	1a9b      	subs	r3, r3, r2
 8009508:	42ab      	cmp	r3, r5
 800950a:	dc26      	bgt.n	800955a <_printf_common+0x96>
 800950c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009510:	1e13      	subs	r3, r2, #0
 8009512:	6822      	ldr	r2, [r4, #0]
 8009514:	bf18      	it	ne
 8009516:	2301      	movne	r3, #1
 8009518:	0692      	lsls	r2, r2, #26
 800951a:	d42b      	bmi.n	8009574 <_printf_common+0xb0>
 800951c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009520:	4649      	mov	r1, r9
 8009522:	4638      	mov	r0, r7
 8009524:	47c0      	blx	r8
 8009526:	3001      	adds	r0, #1
 8009528:	d01e      	beq.n	8009568 <_printf_common+0xa4>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	68e5      	ldr	r5, [r4, #12]
 800952e:	6832      	ldr	r2, [r6, #0]
 8009530:	f003 0306 	and.w	r3, r3, #6
 8009534:	2b04      	cmp	r3, #4
 8009536:	bf08      	it	eq
 8009538:	1aad      	subeq	r5, r5, r2
 800953a:	68a3      	ldr	r3, [r4, #8]
 800953c:	6922      	ldr	r2, [r4, #16]
 800953e:	bf0c      	ite	eq
 8009540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009544:	2500      	movne	r5, #0
 8009546:	4293      	cmp	r3, r2
 8009548:	bfc4      	itt	gt
 800954a:	1a9b      	subgt	r3, r3, r2
 800954c:	18ed      	addgt	r5, r5, r3
 800954e:	2600      	movs	r6, #0
 8009550:	341a      	adds	r4, #26
 8009552:	42b5      	cmp	r5, r6
 8009554:	d11a      	bne.n	800958c <_printf_common+0xc8>
 8009556:	2000      	movs	r0, #0
 8009558:	e008      	b.n	800956c <_printf_common+0xa8>
 800955a:	2301      	movs	r3, #1
 800955c:	4652      	mov	r2, sl
 800955e:	4649      	mov	r1, r9
 8009560:	4638      	mov	r0, r7
 8009562:	47c0      	blx	r8
 8009564:	3001      	adds	r0, #1
 8009566:	d103      	bne.n	8009570 <_printf_common+0xac>
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009570:	3501      	adds	r5, #1
 8009572:	e7c6      	b.n	8009502 <_printf_common+0x3e>
 8009574:	18e1      	adds	r1, r4, r3
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	2030      	movs	r0, #48	; 0x30
 800957a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800957e:	4422      	add	r2, r4
 8009580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009588:	3302      	adds	r3, #2
 800958a:	e7c7      	b.n	800951c <_printf_common+0x58>
 800958c:	2301      	movs	r3, #1
 800958e:	4622      	mov	r2, r4
 8009590:	4649      	mov	r1, r9
 8009592:	4638      	mov	r0, r7
 8009594:	47c0      	blx	r8
 8009596:	3001      	adds	r0, #1
 8009598:	d0e6      	beq.n	8009568 <_printf_common+0xa4>
 800959a:	3601      	adds	r6, #1
 800959c:	e7d9      	b.n	8009552 <_printf_common+0x8e>
	...

080095a0 <_printf_i>:
 80095a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095a4:	7e0f      	ldrb	r7, [r1, #24]
 80095a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095a8:	2f78      	cmp	r7, #120	; 0x78
 80095aa:	4691      	mov	r9, r2
 80095ac:	4680      	mov	r8, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	469a      	mov	sl, r3
 80095b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095b6:	d807      	bhi.n	80095c8 <_printf_i+0x28>
 80095b8:	2f62      	cmp	r7, #98	; 0x62
 80095ba:	d80a      	bhi.n	80095d2 <_printf_i+0x32>
 80095bc:	2f00      	cmp	r7, #0
 80095be:	f000 80d8 	beq.w	8009772 <_printf_i+0x1d2>
 80095c2:	2f58      	cmp	r7, #88	; 0x58
 80095c4:	f000 80a3 	beq.w	800970e <_printf_i+0x16e>
 80095c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095d0:	e03a      	b.n	8009648 <_printf_i+0xa8>
 80095d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095d6:	2b15      	cmp	r3, #21
 80095d8:	d8f6      	bhi.n	80095c8 <_printf_i+0x28>
 80095da:	a101      	add	r1, pc, #4	; (adr r1, 80095e0 <_printf_i+0x40>)
 80095dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095e0:	08009639 	.word	0x08009639
 80095e4:	0800964d 	.word	0x0800964d
 80095e8:	080095c9 	.word	0x080095c9
 80095ec:	080095c9 	.word	0x080095c9
 80095f0:	080095c9 	.word	0x080095c9
 80095f4:	080095c9 	.word	0x080095c9
 80095f8:	0800964d 	.word	0x0800964d
 80095fc:	080095c9 	.word	0x080095c9
 8009600:	080095c9 	.word	0x080095c9
 8009604:	080095c9 	.word	0x080095c9
 8009608:	080095c9 	.word	0x080095c9
 800960c:	08009759 	.word	0x08009759
 8009610:	0800967d 	.word	0x0800967d
 8009614:	0800973b 	.word	0x0800973b
 8009618:	080095c9 	.word	0x080095c9
 800961c:	080095c9 	.word	0x080095c9
 8009620:	0800977b 	.word	0x0800977b
 8009624:	080095c9 	.word	0x080095c9
 8009628:	0800967d 	.word	0x0800967d
 800962c:	080095c9 	.word	0x080095c9
 8009630:	080095c9 	.word	0x080095c9
 8009634:	08009743 	.word	0x08009743
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	602a      	str	r2, [r5, #0]
 8009640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009648:	2301      	movs	r3, #1
 800964a:	e0a3      	b.n	8009794 <_printf_i+0x1f4>
 800964c:	6820      	ldr	r0, [r4, #0]
 800964e:	6829      	ldr	r1, [r5, #0]
 8009650:	0606      	lsls	r6, r0, #24
 8009652:	f101 0304 	add.w	r3, r1, #4
 8009656:	d50a      	bpl.n	800966e <_printf_i+0xce>
 8009658:	680e      	ldr	r6, [r1, #0]
 800965a:	602b      	str	r3, [r5, #0]
 800965c:	2e00      	cmp	r6, #0
 800965e:	da03      	bge.n	8009668 <_printf_i+0xc8>
 8009660:	232d      	movs	r3, #45	; 0x2d
 8009662:	4276      	negs	r6, r6
 8009664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009668:	485e      	ldr	r0, [pc, #376]	; (80097e4 <_printf_i+0x244>)
 800966a:	230a      	movs	r3, #10
 800966c:	e019      	b.n	80096a2 <_printf_i+0x102>
 800966e:	680e      	ldr	r6, [r1, #0]
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009676:	bf18      	it	ne
 8009678:	b236      	sxthne	r6, r6
 800967a:	e7ef      	b.n	800965c <_printf_i+0xbc>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	6820      	ldr	r0, [r4, #0]
 8009680:	1d19      	adds	r1, r3, #4
 8009682:	6029      	str	r1, [r5, #0]
 8009684:	0601      	lsls	r1, r0, #24
 8009686:	d501      	bpl.n	800968c <_printf_i+0xec>
 8009688:	681e      	ldr	r6, [r3, #0]
 800968a:	e002      	b.n	8009692 <_printf_i+0xf2>
 800968c:	0646      	lsls	r6, r0, #25
 800968e:	d5fb      	bpl.n	8009688 <_printf_i+0xe8>
 8009690:	881e      	ldrh	r6, [r3, #0]
 8009692:	4854      	ldr	r0, [pc, #336]	; (80097e4 <_printf_i+0x244>)
 8009694:	2f6f      	cmp	r7, #111	; 0x6f
 8009696:	bf0c      	ite	eq
 8009698:	2308      	moveq	r3, #8
 800969a:	230a      	movne	r3, #10
 800969c:	2100      	movs	r1, #0
 800969e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096a2:	6865      	ldr	r5, [r4, #4]
 80096a4:	60a5      	str	r5, [r4, #8]
 80096a6:	2d00      	cmp	r5, #0
 80096a8:	bfa2      	ittt	ge
 80096aa:	6821      	ldrge	r1, [r4, #0]
 80096ac:	f021 0104 	bicge.w	r1, r1, #4
 80096b0:	6021      	strge	r1, [r4, #0]
 80096b2:	b90e      	cbnz	r6, 80096b8 <_printf_i+0x118>
 80096b4:	2d00      	cmp	r5, #0
 80096b6:	d04d      	beq.n	8009754 <_printf_i+0x1b4>
 80096b8:	4615      	mov	r5, r2
 80096ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80096be:	fb03 6711 	mls	r7, r3, r1, r6
 80096c2:	5dc7      	ldrb	r7, [r0, r7]
 80096c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096c8:	4637      	mov	r7, r6
 80096ca:	42bb      	cmp	r3, r7
 80096cc:	460e      	mov	r6, r1
 80096ce:	d9f4      	bls.n	80096ba <_printf_i+0x11a>
 80096d0:	2b08      	cmp	r3, #8
 80096d2:	d10b      	bne.n	80096ec <_printf_i+0x14c>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	07de      	lsls	r6, r3, #31
 80096d8:	d508      	bpl.n	80096ec <_printf_i+0x14c>
 80096da:	6923      	ldr	r3, [r4, #16]
 80096dc:	6861      	ldr	r1, [r4, #4]
 80096de:	4299      	cmp	r1, r3
 80096e0:	bfde      	ittt	le
 80096e2:	2330      	movle	r3, #48	; 0x30
 80096e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096ec:	1b52      	subs	r2, r2, r5
 80096ee:	6122      	str	r2, [r4, #16]
 80096f0:	f8cd a000 	str.w	sl, [sp]
 80096f4:	464b      	mov	r3, r9
 80096f6:	aa03      	add	r2, sp, #12
 80096f8:	4621      	mov	r1, r4
 80096fa:	4640      	mov	r0, r8
 80096fc:	f7ff fee2 	bl	80094c4 <_printf_common>
 8009700:	3001      	adds	r0, #1
 8009702:	d14c      	bne.n	800979e <_printf_i+0x1fe>
 8009704:	f04f 30ff 	mov.w	r0, #4294967295
 8009708:	b004      	add	sp, #16
 800970a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970e:	4835      	ldr	r0, [pc, #212]	; (80097e4 <_printf_i+0x244>)
 8009710:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009714:	6829      	ldr	r1, [r5, #0]
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	f851 6b04 	ldr.w	r6, [r1], #4
 800971c:	6029      	str	r1, [r5, #0]
 800971e:	061d      	lsls	r5, r3, #24
 8009720:	d514      	bpl.n	800974c <_printf_i+0x1ac>
 8009722:	07df      	lsls	r7, r3, #31
 8009724:	bf44      	itt	mi
 8009726:	f043 0320 	orrmi.w	r3, r3, #32
 800972a:	6023      	strmi	r3, [r4, #0]
 800972c:	b91e      	cbnz	r6, 8009736 <_printf_i+0x196>
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	f023 0320 	bic.w	r3, r3, #32
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	2310      	movs	r3, #16
 8009738:	e7b0      	b.n	800969c <_printf_i+0xfc>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	f043 0320 	orr.w	r3, r3, #32
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	2378      	movs	r3, #120	; 0x78
 8009744:	4828      	ldr	r0, [pc, #160]	; (80097e8 <_printf_i+0x248>)
 8009746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800974a:	e7e3      	b.n	8009714 <_printf_i+0x174>
 800974c:	0659      	lsls	r1, r3, #25
 800974e:	bf48      	it	mi
 8009750:	b2b6      	uxthmi	r6, r6
 8009752:	e7e6      	b.n	8009722 <_printf_i+0x182>
 8009754:	4615      	mov	r5, r2
 8009756:	e7bb      	b.n	80096d0 <_printf_i+0x130>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	6826      	ldr	r6, [r4, #0]
 800975c:	6961      	ldr	r1, [r4, #20]
 800975e:	1d18      	adds	r0, r3, #4
 8009760:	6028      	str	r0, [r5, #0]
 8009762:	0635      	lsls	r5, r6, #24
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	d501      	bpl.n	800976c <_printf_i+0x1cc>
 8009768:	6019      	str	r1, [r3, #0]
 800976a:	e002      	b.n	8009772 <_printf_i+0x1d2>
 800976c:	0670      	lsls	r0, r6, #25
 800976e:	d5fb      	bpl.n	8009768 <_printf_i+0x1c8>
 8009770:	8019      	strh	r1, [r3, #0]
 8009772:	2300      	movs	r3, #0
 8009774:	6123      	str	r3, [r4, #16]
 8009776:	4615      	mov	r5, r2
 8009778:	e7ba      	b.n	80096f0 <_printf_i+0x150>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	1d1a      	adds	r2, r3, #4
 800977e:	602a      	str	r2, [r5, #0]
 8009780:	681d      	ldr	r5, [r3, #0]
 8009782:	6862      	ldr	r2, [r4, #4]
 8009784:	2100      	movs	r1, #0
 8009786:	4628      	mov	r0, r5
 8009788:	f7f6 fd3a 	bl	8000200 <memchr>
 800978c:	b108      	cbz	r0, 8009792 <_printf_i+0x1f2>
 800978e:	1b40      	subs	r0, r0, r5
 8009790:	6060      	str	r0, [r4, #4]
 8009792:	6863      	ldr	r3, [r4, #4]
 8009794:	6123      	str	r3, [r4, #16]
 8009796:	2300      	movs	r3, #0
 8009798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800979c:	e7a8      	b.n	80096f0 <_printf_i+0x150>
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	462a      	mov	r2, r5
 80097a2:	4649      	mov	r1, r9
 80097a4:	4640      	mov	r0, r8
 80097a6:	47d0      	blx	sl
 80097a8:	3001      	adds	r0, #1
 80097aa:	d0ab      	beq.n	8009704 <_printf_i+0x164>
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	079b      	lsls	r3, r3, #30
 80097b0:	d413      	bmi.n	80097da <_printf_i+0x23a>
 80097b2:	68e0      	ldr	r0, [r4, #12]
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	4298      	cmp	r0, r3
 80097b8:	bfb8      	it	lt
 80097ba:	4618      	movlt	r0, r3
 80097bc:	e7a4      	b.n	8009708 <_printf_i+0x168>
 80097be:	2301      	movs	r3, #1
 80097c0:	4632      	mov	r2, r6
 80097c2:	4649      	mov	r1, r9
 80097c4:	4640      	mov	r0, r8
 80097c6:	47d0      	blx	sl
 80097c8:	3001      	adds	r0, #1
 80097ca:	d09b      	beq.n	8009704 <_printf_i+0x164>
 80097cc:	3501      	adds	r5, #1
 80097ce:	68e3      	ldr	r3, [r4, #12]
 80097d0:	9903      	ldr	r1, [sp, #12]
 80097d2:	1a5b      	subs	r3, r3, r1
 80097d4:	42ab      	cmp	r3, r5
 80097d6:	dcf2      	bgt.n	80097be <_printf_i+0x21e>
 80097d8:	e7eb      	b.n	80097b2 <_printf_i+0x212>
 80097da:	2500      	movs	r5, #0
 80097dc:	f104 0619 	add.w	r6, r4, #25
 80097e0:	e7f5      	b.n	80097ce <_printf_i+0x22e>
 80097e2:	bf00      	nop
 80097e4:	08009c25 	.word	0x08009c25
 80097e8:	08009c36 	.word	0x08009c36

080097ec <_sbrk_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4d06      	ldr	r5, [pc, #24]	; (8009808 <_sbrk_r+0x1c>)
 80097f0:	2300      	movs	r3, #0
 80097f2:	4604      	mov	r4, r0
 80097f4:	4608      	mov	r0, r1
 80097f6:	602b      	str	r3, [r5, #0]
 80097f8:	f7f9 f912 	bl	8002a20 <_sbrk>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_sbrk_r+0x1a>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_sbrk_r+0x1a>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	200005c8 	.word	0x200005c8

0800980c <__sread>:
 800980c:	b510      	push	{r4, lr}
 800980e:	460c      	mov	r4, r1
 8009810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009814:	f000 f8f8 	bl	8009a08 <_read_r>
 8009818:	2800      	cmp	r0, #0
 800981a:	bfab      	itete	ge
 800981c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800981e:	89a3      	ldrhlt	r3, [r4, #12]
 8009820:	181b      	addge	r3, r3, r0
 8009822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009826:	bfac      	ite	ge
 8009828:	6563      	strge	r3, [r4, #84]	; 0x54
 800982a:	81a3      	strhlt	r3, [r4, #12]
 800982c:	bd10      	pop	{r4, pc}

0800982e <__swrite>:
 800982e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009832:	461f      	mov	r7, r3
 8009834:	898b      	ldrh	r3, [r1, #12]
 8009836:	05db      	lsls	r3, r3, #23
 8009838:	4605      	mov	r5, r0
 800983a:	460c      	mov	r4, r1
 800983c:	4616      	mov	r6, r2
 800983e:	d505      	bpl.n	800984c <__swrite+0x1e>
 8009840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009844:	2302      	movs	r3, #2
 8009846:	2200      	movs	r2, #0
 8009848:	f000 f868 	bl	800991c <_lseek_r>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009856:	81a3      	strh	r3, [r4, #12]
 8009858:	4632      	mov	r2, r6
 800985a:	463b      	mov	r3, r7
 800985c:	4628      	mov	r0, r5
 800985e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009862:	f000 b817 	b.w	8009894 <_write_r>

08009866 <__sseek>:
 8009866:	b510      	push	{r4, lr}
 8009868:	460c      	mov	r4, r1
 800986a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986e:	f000 f855 	bl	800991c <_lseek_r>
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	bf15      	itete	ne
 8009878:	6560      	strne	r0, [r4, #84]	; 0x54
 800987a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800987e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009882:	81a3      	strheq	r3, [r4, #12]
 8009884:	bf18      	it	ne
 8009886:	81a3      	strhne	r3, [r4, #12]
 8009888:	bd10      	pop	{r4, pc}

0800988a <__sclose>:
 800988a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800988e:	f000 b813 	b.w	80098b8 <_close_r>
	...

08009894 <_write_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	4d07      	ldr	r5, [pc, #28]	; (80098b4 <_write_r+0x20>)
 8009898:	4604      	mov	r4, r0
 800989a:	4608      	mov	r0, r1
 800989c:	4611      	mov	r1, r2
 800989e:	2200      	movs	r2, #0
 80098a0:	602a      	str	r2, [r5, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f7f9 f86b 	bl	800297e <_write>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_write_r+0x1e>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_write_r+0x1e>
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	200005c8 	.word	0x200005c8

080098b8 <_close_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4d06      	ldr	r5, [pc, #24]	; (80098d4 <_close_r+0x1c>)
 80098bc:	2300      	movs	r3, #0
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	f7f9 f877 	bl	80029b6 <_close>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_close_r+0x1a>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_close_r+0x1a>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	200005c8 	.word	0x200005c8

080098d8 <_fstat_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d07      	ldr	r5, [pc, #28]	; (80098f8 <_fstat_r+0x20>)
 80098dc:	2300      	movs	r3, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	4611      	mov	r1, r2
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	f7f9 f872 	bl	80029ce <_fstat>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	d102      	bne.n	80098f4 <_fstat_r+0x1c>
 80098ee:	682b      	ldr	r3, [r5, #0]
 80098f0:	b103      	cbz	r3, 80098f4 <_fstat_r+0x1c>
 80098f2:	6023      	str	r3, [r4, #0]
 80098f4:	bd38      	pop	{r3, r4, r5, pc}
 80098f6:	bf00      	nop
 80098f8:	200005c8 	.word	0x200005c8

080098fc <_isatty_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4d06      	ldr	r5, [pc, #24]	; (8009918 <_isatty_r+0x1c>)
 8009900:	2300      	movs	r3, #0
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	602b      	str	r3, [r5, #0]
 8009908:	f7f9 f871 	bl	80029ee <_isatty>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_isatty_r+0x1a>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_isatty_r+0x1a>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	200005c8 	.word	0x200005c8

0800991c <_lseek_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d07      	ldr	r5, [pc, #28]	; (800993c <_lseek_r+0x20>)
 8009920:	4604      	mov	r4, r0
 8009922:	4608      	mov	r0, r1
 8009924:	4611      	mov	r1, r2
 8009926:	2200      	movs	r2, #0
 8009928:	602a      	str	r2, [r5, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	f7f9 f86a 	bl	8002a04 <_lseek>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_lseek_r+0x1e>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_lseek_r+0x1e>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	200005c8 	.word	0x200005c8

08009940 <memcpy>:
 8009940:	440a      	add	r2, r1
 8009942:	4291      	cmp	r1, r2
 8009944:	f100 33ff 	add.w	r3, r0, #4294967295
 8009948:	d100      	bne.n	800994c <memcpy+0xc>
 800994a:	4770      	bx	lr
 800994c:	b510      	push	{r4, lr}
 800994e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009956:	4291      	cmp	r1, r2
 8009958:	d1f9      	bne.n	800994e <memcpy+0xe>
 800995a:	bd10      	pop	{r4, pc}

0800995c <memmove>:
 800995c:	4288      	cmp	r0, r1
 800995e:	b510      	push	{r4, lr}
 8009960:	eb01 0402 	add.w	r4, r1, r2
 8009964:	d902      	bls.n	800996c <memmove+0x10>
 8009966:	4284      	cmp	r4, r0
 8009968:	4623      	mov	r3, r4
 800996a:	d807      	bhi.n	800997c <memmove+0x20>
 800996c:	1e43      	subs	r3, r0, #1
 800996e:	42a1      	cmp	r1, r4
 8009970:	d008      	beq.n	8009984 <memmove+0x28>
 8009972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800997a:	e7f8      	b.n	800996e <memmove+0x12>
 800997c:	4402      	add	r2, r0
 800997e:	4601      	mov	r1, r0
 8009980:	428a      	cmp	r2, r1
 8009982:	d100      	bne.n	8009986 <memmove+0x2a>
 8009984:	bd10      	pop	{r4, pc}
 8009986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800998a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800998e:	e7f7      	b.n	8009980 <memmove+0x24>

08009990 <__malloc_lock>:
 8009990:	4801      	ldr	r0, [pc, #4]	; (8009998 <__malloc_lock+0x8>)
 8009992:	f7ff b999 	b.w	8008cc8 <__retarget_lock_acquire_recursive>
 8009996:	bf00      	nop
 8009998:	200005bc 	.word	0x200005bc

0800999c <__malloc_unlock>:
 800999c:	4801      	ldr	r0, [pc, #4]	; (80099a4 <__malloc_unlock+0x8>)
 800999e:	f7ff b994 	b.w	8008cca <__retarget_lock_release_recursive>
 80099a2:	bf00      	nop
 80099a4:	200005bc 	.word	0x200005bc

080099a8 <_realloc_r>:
 80099a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ac:	4680      	mov	r8, r0
 80099ae:	4614      	mov	r4, r2
 80099b0:	460e      	mov	r6, r1
 80099b2:	b921      	cbnz	r1, 80099be <_realloc_r+0x16>
 80099b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b8:	4611      	mov	r1, r2
 80099ba:	f7ff ba59 	b.w	8008e70 <_malloc_r>
 80099be:	b92a      	cbnz	r2, 80099cc <_realloc_r+0x24>
 80099c0:	f7ff f9ea 	bl	8008d98 <_free_r>
 80099c4:	4625      	mov	r5, r4
 80099c6:	4628      	mov	r0, r5
 80099c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099cc:	f000 f82e 	bl	8009a2c <_malloc_usable_size_r>
 80099d0:	4284      	cmp	r4, r0
 80099d2:	4607      	mov	r7, r0
 80099d4:	d802      	bhi.n	80099dc <_realloc_r+0x34>
 80099d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099da:	d812      	bhi.n	8009a02 <_realloc_r+0x5a>
 80099dc:	4621      	mov	r1, r4
 80099de:	4640      	mov	r0, r8
 80099e0:	f7ff fa46 	bl	8008e70 <_malloc_r>
 80099e4:	4605      	mov	r5, r0
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d0ed      	beq.n	80099c6 <_realloc_r+0x1e>
 80099ea:	42bc      	cmp	r4, r7
 80099ec:	4622      	mov	r2, r4
 80099ee:	4631      	mov	r1, r6
 80099f0:	bf28      	it	cs
 80099f2:	463a      	movcs	r2, r7
 80099f4:	f7ff ffa4 	bl	8009940 <memcpy>
 80099f8:	4631      	mov	r1, r6
 80099fa:	4640      	mov	r0, r8
 80099fc:	f7ff f9cc 	bl	8008d98 <_free_r>
 8009a00:	e7e1      	b.n	80099c6 <_realloc_r+0x1e>
 8009a02:	4635      	mov	r5, r6
 8009a04:	e7df      	b.n	80099c6 <_realloc_r+0x1e>
	...

08009a08 <_read_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d07      	ldr	r5, [pc, #28]	; (8009a28 <_read_r+0x20>)
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
 8009a12:	2200      	movs	r2, #0
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7f8 ff94 	bl	8002944 <_read>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_read_r+0x1e>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_read_r+0x1e>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	200005c8 	.word	0x200005c8

08009a2c <_malloc_usable_size_r>:
 8009a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a30:	1f18      	subs	r0, r3, #4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	bfbc      	itt	lt
 8009a36:	580b      	ldrlt	r3, [r1, r0]
 8009a38:	18c0      	addlt	r0, r0, r3
 8009a3a:	4770      	bx	lr

08009a3c <_init>:
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	bf00      	nop
 8009a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a42:	bc08      	pop	{r3}
 8009a44:	469e      	mov	lr, r3
 8009a46:	4770      	bx	lr

08009a48 <_fini>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	bf00      	nop
 8009a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a4e:	bc08      	pop	{r3}
 8009a50:	469e      	mov	lr, r3
 8009a52:	4770      	bx	lr
